//     This code was generated by a Reinforced.Typings tool. 
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
var PowerTables;
(function (PowerTables) {
    var Configuration;
    (function (Configuration) {
        var Json;
        (function (Json) {
            (function (SelectAllBehavior) {
                SelectAllBehavior[SelectAllBehavior["AllVisible"] = 0] = "AllVisible";
                SelectAllBehavior[SelectAllBehavior["OnlyIfAllDataVisible"] = 1] = "OnlyIfAllDataVisible";
                SelectAllBehavior[SelectAllBehavior["AllLoadedData"] = 2] = "AllLoadedData";
                SelectAllBehavior[SelectAllBehavior["Disabled"] = 3] = "Disabled";
            })(Json.SelectAllBehavior || (Json.SelectAllBehavior = {}));
            var SelectAllBehavior = Json.SelectAllBehavior;
            (function (ResetSelectionBehavior) {
                ResetSelectionBehavior[ResetSelectionBehavior["DontReset"] = 0] = "DontReset";
                ResetSelectionBehavior[ResetSelectionBehavior["ServerReload"] = 1] = "ServerReload";
                ResetSelectionBehavior[ResetSelectionBehavior["ClientReload"] = 2] = "ClientReload";
            })(Json.ResetSelectionBehavior || (Json.ResetSelectionBehavior = {}));
            var ResetSelectionBehavior = Json.ResetSelectionBehavior;
        })(Json = Configuration.Json || (Configuration.Json = {}));
    })(Configuration = PowerTables.Configuration || (PowerTables.Configuration = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    (function (MessageType) {
        MessageType[MessageType["UserMessage"] = 0] = "UserMessage";
        MessageType[MessageType["Banner"] = 1] = "Banner";
    })(PowerTables.MessageType || (PowerTables.MessageType = {}));
    var MessageType = PowerTables.MessageType;
    (function (Ordering) {
        Ordering[Ordering["Ascending"] = 0] = "Ascending";
        Ordering[Ordering["Descending"] = 1] = "Descending";
        Ordering[Ordering["Neutral"] = 2] = "Neutral";
    })(PowerTables.Ordering || (PowerTables.Ordering = {}));
    var Ordering = PowerTables.Ordering;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var LoadingOverlap;
        (function (LoadingOverlap) {
            (function (OverlapMode) {
                OverlapMode[OverlapMode["All"] = 0] = "All";
                OverlapMode[OverlapMode["BodyOnly"] = 1] = "BodyOnly";
                OverlapMode[OverlapMode["Parent"] = 2] = "Parent";
            })(LoadingOverlap.OverlapMode || (LoadingOverlap.OverlapMode = {}));
            var OverlapMode = LoadingOverlap.OverlapMode;
        })(LoadingOverlap = Plugins.LoadingOverlap || (Plugins.LoadingOverlap = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var Hierarchy;
        (function (Hierarchy) {
            (function (NodeExpandBehavior) {
                NodeExpandBehavior[NodeExpandBehavior["LoadFromCacheWhenPossible"] = 0] = "LoadFromCacheWhenPossible";
                NodeExpandBehavior[NodeExpandBehavior["AlwaysLoadRemotely"] = 1] = "AlwaysLoadRemotely";
            })(Hierarchy.NodeExpandBehavior || (Hierarchy.NodeExpandBehavior = {}));
            var NodeExpandBehavior = Hierarchy.NodeExpandBehavior;
            (function (TreeCollapsedNodeFilterBehavior) {
                TreeCollapsedNodeFilterBehavior[TreeCollapsedNodeFilterBehavior["IncludeCollapsed"] = 0] = "IncludeCollapsed";
                TreeCollapsedNodeFilterBehavior[TreeCollapsedNodeFilterBehavior["ExcludeCollapsed"] = 1] = "ExcludeCollapsed";
            })(Hierarchy.TreeCollapsedNodeFilterBehavior || (Hierarchy.TreeCollapsedNodeFilterBehavior = {}));
            var TreeCollapsedNodeFilterBehavior = Hierarchy.TreeCollapsedNodeFilterBehavior;
        })(Hierarchy = Plugins.Hierarchy || (Plugins.Hierarchy = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Adjustments;
    (function (Adjustments) {
        (function (SelectionToggle) {
            SelectionToggle[SelectionToggle["LeaveAsIs"] = 0] = "LeaveAsIs";
            SelectionToggle[SelectionToggle["All"] = 1] = "All";
            SelectionToggle[SelectionToggle["Nothing"] = 2] = "Nothing";
        })(Adjustments.SelectionToggle || (Adjustments.SelectionToggle = {}));
        var SelectionToggle = Adjustments.SelectionToggle;
    })(Adjustments = PowerTables.Adjustments || (PowerTables.Adjustments = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var RegularSelect;
        (function (RegularSelect) {
            (function (RegularSelectMode) {
                RegularSelectMode[RegularSelectMode["Rows"] = 0] = "Rows";
                RegularSelectMode[RegularSelectMode["Cells"] = 1] = "Cells";
            })(RegularSelect.RegularSelectMode || (RegularSelect.RegularSelectMode = {}));
            var RegularSelectMode = RegularSelect.RegularSelectMode;
        })(RegularSelect = Plugins.RegularSelect || (Plugins.RegularSelect = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Commands;
    (function (Commands) {
        (function (CommandType) {
            CommandType[CommandType["Client"] = 0] = "Client";
            CommandType[CommandType["Server"] = 1] = "Server";
        })(Commands.CommandType || (Commands.CommandType = {}));
        var CommandType = Commands.CommandType;
    })(Commands = PowerTables.Commands || (PowerTables.Commands = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * Components container for registration/resolving plugins
     */
    var ComponentsContainer = (function () {
        function ComponentsContainer() {
        }
        /**
         * Registers component in components container for further instantiation
         * @param key Text ID for component
         * @param ctor Constructor function
         * @returns {}
         */
        ComponentsContainer.registerComponent = function (key, ctor) {
            this._components[key] = ctor;
        };
        /**
         * Instantiates component by its ID with specified arguments
         * @param key Text ID of desired component
         * @param args String arguments for instantiation
         * @returns {}
         */
        ComponentsContainer.resolveComponent = function (key, args) {
            if (this._components[key] == null || this._components[key] == undefined)
                throw new Error("Component " + key + " is not registered. Please ensure that you have connected all the additional scripts");
            if (!args)
                return new (this._components[key]);
            else {
                var ctor = this._components[key];
                var boundCtor = Function.prototype.bind.apply(ctor, [null].concat(args));
                return new boundCtor();
            }
        };
        /**
         * Registers component-provided events in particular EventsService instance.
         * It is important to register all component's events befor instantiation and .init call
         * to make them available to subscribe each other's events.
         *
         * Instance manager asserts that .registerEvent will be called exactly once for
         * each component used in table
         *
         * @param key Text ID of desired component
         * @param eventsManager Events manager instance
         * @returns {}
         */
        ComponentsContainer.registerComponentEvents = function (key, eventsManager, masterTable) {
            if (this._components[key] == null || this._components[key] == undefined)
                throw new Error("Component " + key + " is not registered. Please ensure that you have connected all the additional scripts");
            if (this._components[key].registerEvents && typeof this._components[key].registerEvents === 'function') {
                this._components[key].registerEvents.call(eventsManager, eventsManager, masterTable);
            }
        };
        /*
         * @internal
         */
        ComponentsContainer.registerAllEvents = function (eventsManager, masterTable) {
            for (var key in this._components) {
                if (this._components[key].registerEvents && typeof this._components[key].registerEvents === 'function') {
                    this._components[key].registerEvents.call(eventsManager, eventsManager, masterTable);
                }
            }
        };
        ComponentsContainer._components = {};
        return ComponentsContainer;
    }());
    PowerTables.ComponentsContainer = ComponentsContainer;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * This enumeration distinguishes which way
     * underlying query will be used
     */
    (function (QueryScope) {
        /**
         * Mentioned query will be sent to server to obtain
         * data (probably) for further local filtration.
         * All locally filtered fields should be excluded from
         * underlying query
         */
        QueryScope[QueryScope["Server"] = 0] = "Server";
        /**
         * Mentioned query will be used for local data filtration.
         * To gain performance, please exclude all data settings that were
         * applied during server request
         */
        QueryScope[QueryScope["Client"] = 1] = "Client";
        /**
         * This query should contain both data for client and server filtering.
         * Transboundary queries are used to obtain query settings
         * that will be used on server side to retrieve data set that
         * will be used for server command handling, so server needs all filtering settings
         */
        QueryScope[QueryScope["Transboundary"] = 2] = "Transboundary";
    })(PowerTables.QueryScope || (PowerTables.QueryScope = {}));
    var QueryScope = PowerTables.QueryScope;
    (function (EventDirection) {
        EventDirection[EventDirection["Before"] = 0] = "Before";
        EventDirection[EventDirection["After"] = 1] = "After";
        EventDirection[EventDirection["Undirected"] = 2] = "Undirected";
    })(PowerTables.EventDirection || (PowerTables.EventDirection = {}));
    var EventDirection = PowerTables.EventDirection;
})(PowerTables || (PowerTables = {}));
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var PowerTables;
(function (PowerTables) {
    var Editing;
    (function (Editing) {
        var Editors;
        (function (Editors) {
            var Cells;
            (function (Cells) {
                var CellsEditHandler = (function (_super) {
                    __extends(CellsEditHandler, _super);
                    function CellsEditHandler() {
                        var _this = this;
                        _super.apply(this, arguments);
                        this._isEditing = false;
                        this.afterDrawn = function (e) {
                            _this.MasterTable.Events.ClientRowsRendering.subscribeBefore(_this.onBeforeClientRowsRendering.bind(_this), 'editor');
                            _this.MasterTable.Events.DataRendered.subscribeAfter(_this.onAfterDataRendered.bind(_this), 'editor');
                        };
                    }
                    CellsEditHandler.prototype.ensureEditing = function (rowDisplayIndex) {
                        if (this._isEditing)
                            return;
                        var lookup = this.MasterTable.DataHolder.localLookupDisplayedData(rowDisplayIndex);
                        this.DataObject = lookup.DataObject;
                        this.CurrentDataObjectModified = {};
                        for (var cd in this.DataObject) {
                            if (this.DataObject.hasOwnProperty(cd)) {
                                this.CurrentDataObjectModified[cd] = this.DataObject[cd];
                            }
                        }
                        this.MasterTable.Events.Edit.invokeBefore(this, this.CurrentDataObjectModified);
                        var row = this.MasterTable.Controller.produceRow(lookup.DataObject, lookup.DisplayedIndex);
                        this.Cells = row.Cells;
                        this.Index = lookup.DisplayedIndex;
                        this._isEditing = true;
                    };
                    CellsEditHandler.prototype.beginCellEdit = function (column, rowIndex) {
                        if (!this.isEditable(column))
                            return;
                        this.ensureEditing(rowIndex);
                        var editor = this.createEditor(column.RawName, column, true, Editing.EditorMode.Cell);
                        this.Cells[column.RawName] = editor;
                        this._activeEditor = editor;
                        var e = this.MasterTable.Renderer.Modifier.redrawCell(editor);
                        editor.onAfterRender(e);
                        this.setEditorValue(editor);
                        editor.focus();
                        return editor;
                    };
                    CellsEditHandler.prototype.beginCellEditHandle = function (e) {
                        if (this._isEditing)
                            return;
                        var col = this.MasterTable.InstanceManager.getColumnByOrder(e.ColumnIndex);
                        this.beginCellEdit(col, e.DisplayingRowIndex);
                        e.Stop = true;
                    };
                    CellsEditHandler.prototype.onBeforeClientRowsRendering = function (e) {
                        if (!this._isEditing)
                            return;
                        for (var i = 0; i < e.EventArgs.length; i++) {
                            if (e.EventArgs[i].DataObject === this.DataObject) {
                                e.EventArgs[i] = this;
                                this.Index = i;
                            }
                        }
                    };
                    CellsEditHandler.prototype.onAfterDataRendered = function (e) {
                        if (!this._isEditing)
                            return;
                        if (this._activeEditor != null)
                            this._activeEditor.onAfterRender(null);
                    };
                    CellsEditHandler.prototype.commit = function (editor) {
                        var _this = this;
                        var msgs = [];
                        this.retrieveEditorData(editor, msgs);
                        if (msgs.length !== 0) {
                            this.MasterTable.Events.EditValidationFailed.invokeAfter(this, {
                                OriginalDataObject: this.DataObject,
                                ModifiedDataObject: this.CurrentDataObjectModified,
                                Messages: msgs
                            });
                            return;
                        }
                        if (editor.VisualStates != null)
                            editor.VisualStates.changeState('saving');
                        this.finishEditing(editor, false);
                        this.sendDataObjectToServer(function () {
                            if (!_this._isEditing) {
                                _this.MasterTable.Events.Edit.invokeAfter(_this, _this.CurrentDataObjectModified);
                                _this.CurrentDataObjectModified = null;
                            }
                        });
                    };
                    CellsEditHandler.prototype.finishEditing = function (editor, redraw) {
                        if (redraw && editor.VisualStates != null)
                            editor.VisualStates.normalState();
                        this._activeEditor = null;
                        this.Cells[editor.Column.RawName] = this.MasterTable.Controller.produceCell(this.DataObject, editor.Column, this);
                        if (redraw) {
                            this.MasterTable.Renderer.Modifier.redrawCell(this.Cells[editor.Column.RawName]);
                        }
                        this.cleanupAfterEdit();
                    };
                    CellsEditHandler.prototype.cleanupAfterEdit = function () {
                        this._isEditing = false;
                        this._activeEditor = null;
                        this.Cells = {};
                    };
                    CellsEditHandler.prototype.notifyChanged = function (editor) {
                        this.retrieveEditorData(editor);
                    };
                    CellsEditHandler.prototype.reject = function (editor) {
                        this.finishEditing(editor, true);
                    };
                    return CellsEditHandler;
                }(Editing.EditHandlerBase));
                Cells.CellsEditHandler = CellsEditHandler;
                PowerTables.ComponentsContainer.registerComponent('CellsEditHandler', CellsEditHandler);
            })(Cells = Editors.Cells || (Editors.Cells = {}));
        })(Editors = Editing.Editors || (Editing.Editors = {}));
    })(Editing = PowerTables.Editing || (PowerTables.Editing = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Editing;
    (function (Editing) {
        var EditHandlerBase = (function (_super) {
            __extends(EditHandlerBase, _super);
            function EditHandlerBase() {
                _super.apply(this, arguments);
                //#region IRow members
                this.Cells = {};
                this.IsSpecial = true;
                this.ValidationMessages = [];
                this.EditorConfigurations = {};
            }
            EditHandlerBase.prototype.commit = function (editor) {
                throw Error("Not implemented");
            };
            EditHandlerBase.prototype.notifyChanged = function (editor) {
                throw Error("Not implemented");
            };
            EditHandlerBase.prototype.reject = function (editor) {
                throw Error("Not implemented");
            };
            EditHandlerBase.prototype.dispatchEditResponse = function (editResponse, then) {
                if (then)
                    then();
            };
            EditHandlerBase.prototype.isEditable = function (column) {
                return this.EditorConfigurations.hasOwnProperty(column.RawName);
            };
            EditHandlerBase.prototype.sendDataObjectToServer = function (then) {
                var _this = this;
                this.MasterTable.Loader.requestServer('Edit', function (r) { return _this.dispatchEditResponse(r, then); }, function (q) {
                    q.AdditionalData['Edit'] = JSON.stringify(_this.CurrentDataObjectModified);
                    return q;
                });
            };
            EditHandlerBase.prototype.hasChanges = function () {
                for (var k in this.DataObject) {
                    if (this.DataObject[k] !== this.CurrentDataObjectModified[k])
                        return true;
                }
                return false;
            };
            EditHandlerBase.prototype.setEditorValue = function (editor) {
                editor.IsInitialValueSetting = true;
                editor.setValue(this.CurrentDataObjectModified[editor.FieldName]);
                editor.IsInitialValueSetting = false;
            };
            EditHandlerBase.prototype.createEditor = function (fieldName, column, canComplete, editorType) {
                var editorConf = this.EditorConfigurations[fieldName];
                var editor = PowerTables.ComponentsContainer.resolveComponent(editorConf.PluginId);
                editor.DataObject = this.DataObject;
                editor.ModifiedDataObject = this.CurrentDataObjectModified;
                editor.Data = this.DataObject[fieldName];
                editor.FieldName = fieldName;
                editor.Column = column;
                editor.CanComplete = canComplete;
                editor.IsFormEdit = editorType === EditorMode.Form;
                editor.IsRowEdit = editorType === EditorMode.Row;
                editor.IsCellEdit = !(editor.IsFormEdit || editor.IsRowEdit);
                editor.Row = this;
                editor.RawConfig = { Configuration: editorConf, Order: 0, PluginId: editorConf.PluginId, Placement: '', TemplateId: editorConf.TemplateId };
                editor.init(this.MasterTable);
                return editor;
            };
            EditHandlerBase.prototype.retrieveEditorData = function (editor, errors) {
                var errorsArrayPresent = (!(!errors));
                errors = errors || [];
                var thisErrors = [];
                this.CurrentDataObjectModified[editor.FieldName] = editor.getValue(thisErrors);
                for (var j = 0; j < thisErrors.length; j++) {
                    thisErrors[j].Message = editor.getErrorMessage(thisErrors[j].Code);
                }
                editor.Data = this.CurrentDataObjectModified[editor.FieldName];
                editor.ValidationMessages = thisErrors;
                for (var i = 0; i < thisErrors.length; i++) {
                    errors.push(thisErrors[i]);
                }
                if (thisErrors.length > 0) {
                    editor.IsValid = false;
                    if (editor.VisualStates != null)
                        editor.VisualStates.changeState('invalid');
                }
                else {
                    editor.IsValid = true;
                    if (editor.VisualStates != null)
                        editor.VisualStates.normalState();
                }
                if (!errorsArrayPresent) {
                    this.ValidationMessages.concat(errors);
                }
            };
            EditHandlerBase.prototype.init = function (masterTable) {
                _super.prototype.init.call(this, masterTable);
                for (var i = 0; i < this.Configuration.Fields.length; i++) {
                    this.EditorConfigurations[this.Configuration.Fields[i].FieldName] = this.Configuration.Fields[i];
                }
            };
            return EditHandlerBase;
        }(PowerTables.Plugins.PluginBase));
        Editing.EditHandlerBase = EditHandlerBase;
        (function (EditorMode) {
            EditorMode[EditorMode["Cell"] = 0] = "Cell";
            EditorMode[EditorMode["Row"] = 1] = "Row";
            EditorMode[EditorMode["Form"] = 2] = "Form";
        })(Editing.EditorMode || (Editing.EditorMode = {}));
        var EditorMode = Editing.EditorMode;
    })(Editing = PowerTables.Editing || (PowerTables.Editing = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Editing;
    (function (Editing) {
        var EditorBase = (function (_super) {
            __extends(EditorBase, _super);
            function EditorBase() {
                _super.apply(this, arguments);
                /**
                 * Collection with editor's recent validation messages
                 */
                this.ValidationMessages = [];
            }
            EditorBase.prototype.renderedValidationMessages = function () {
                return this.MasterTable.Renderer.getCachedTemplate(this.Configuration.ValidationMessagesTemplateId)({
                    Messages: this.ValidationMessages,
                    IsRowEdit: this.IsRowEdit,
                    IsFormEdit: this.IsFormEdit
                });
            };
            /**
             * Retrieves original value for this particular cell editor
             *
             * @returns {Any} Original, unchanged value
             */
            EditorBase.prototype.getThisOriginalValue = function () {
                return this.DataObject[this.Column.RawName];
            };
            /**
             * Resets editor value to initial settings
             */
            EditorBase.prototype.reset = function () {
                this.setValue(this.getThisOriginalValue());
            };
            /**
             * Returns entered editor value
             *
             * @returns {}
             */
            EditorBase.prototype.getValue = function (errors) { throw new Error("Not implemented"); };
            /**
             * Sets editor value from the outside
             */
            EditorBase.prototype.setValue = function (value) { throw new Error("Not implemented"); };
            /**
             * Template-bound event raising on changing this editor's value
             */
            EditorBase.prototype.changedHandler = function (e) {
                if (this.IsInitialValueSetting)
                    return;
                this.Row.notifyChanged(this);
            };
            /**
             * Event handler for commit (save edited, ok, submit etc) event raised from inside of CellEditor
             * Commit leads to validation. Cell editor should be notified
             */
            EditorBase.prototype.commitHandler = function (e) {
                this.Row.commit(this);
            };
            /**
             * Event handler for reject (cancel editing) event raised from inside of CellEditor
             * Cell editor should be notified
             */
            EditorBase.prototype.rejectHandler = function (e) {
                this.Row.reject(this);
            };
            /**
             * Called when cell editor has been drawn
             *
             * @param e HTML element where editor is rendered
             * @returns {}
             */
            EditorBase.prototype.onAfterRender = function (e) { };
            /**
             * Needed by editor in some cases
             *
             * @returns {}
             */
            EditorBase.prototype.focus = function () { };
            EditorBase.prototype.OriginalContent = function () {
                return this.MasterTable.Renderer.ContentRenderer.renderCell(this);
            };
            EditorBase.prototype.notifyObjectChanged = function () { };
            EditorBase.prototype.defineMessages = function () {
                return {};
            };
            EditorBase.prototype.getErrorMessage = function (key) {
                if (!this._errorMessages.hasOwnProperty(key))
                    return 'Error';
                return this._errorMessages[key];
            };
            EditorBase.prototype.init = function (masterTable) {
                _super.prototype.init.call(this, masterTable);
                this._errorMessages = this.defineMessages();
                for (var k in this.Configuration.ValidationMessagesOverride) {
                    this._errorMessages[k] = this.Configuration.ValidationMessagesOverride[k];
                }
            };
            return EditorBase;
        }(PowerTables.Plugins.PluginBase));
        Editing.EditorBase = EditorBase;
    })(Editing = PowerTables.Editing || (PowerTables.Editing = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Editing;
    (function (Editing) {
        var Editors;
        (function (Editors) {
            var Check;
            (function (Check) {
                var CheckEditor = (function (_super) {
                    __extends(CheckEditor, _super);
                    function CheckEditor() {
                        _super.apply(this, arguments);
                    }
                    CheckEditor.prototype.renderContent = function (templatesProvider) {
                        return this.defaultRender(templatesProvider);
                    };
                    CheckEditor.prototype.changedHandler = function (e) {
                        this._value = !this._value;
                        this.updateState();
                        _super.prototype.changedHandler.call(this, e);
                    };
                    CheckEditor.prototype.updateState = function () {
                        if (!this._value) {
                            this.VisualStates.unmixinState('checked');
                        }
                        else {
                            this.VisualStates.mixinState('checked');
                        }
                    };
                    CheckEditor.prototype.getValue = function (errors) {
                        if (this.Configuration.IsMandatory && !this._value) {
                            errors.push({ Code: 'MANDATORY' });
                            return null;
                        }
                        return this._value;
                    };
                    CheckEditor.prototype.setValue = function (value) {
                        this._value = (!(!value));
                        this.updateState();
                    };
                    CheckEditor.prototype.focus = function () {
                        if (this.FocusElement)
                            this.FocusElement.focus();
                    };
                    CheckEditor.prototype.defineMessages = function () {
                        return {
                            'MANDATORY': this.Column.Configuration.Title + " is required"
                        };
                    };
                    return CheckEditor;
                }(PowerTables.Editing.EditorBase));
                Check.CheckEditor = CheckEditor;
                PowerTables.ComponentsContainer.registerComponent('CheckEditor', CheckEditor);
            })(Check = Editors.Check || (Editors.Check = {}));
        })(Editors = Editing.Editors || (Editing.Editors = {}));
    })(Editing = PowerTables.Editing || (PowerTables.Editing = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Editing;
    (function (Editing) {
        var Editors;
        (function (Editors) {
            var Display;
            (function (Display) {
                var DisplayEditor = (function (_super) {
                    __extends(DisplayEditor, _super);
                    function DisplayEditor() {
                        _super.apply(this, arguments);
                    }
                    DisplayEditor.prototype.renderContent = function (templatesProvider) {
                        return this.defaultRender(templatesProvider);
                    };
                    DisplayEditor.prototype.Render = function () {
                        this._previousContent = this.Configuration.Template(this);
                        return this._previousContent;
                    };
                    DisplayEditor.prototype.notifyObjectChanged = function () {
                        var cont = this.Configuration.Template(this);
                        if (cont !== this._previousContent) {
                            this.ContentElement.innerHTML = cont;
                            this._previousContent = cont;
                        }
                    };
                    DisplayEditor.prototype.getValue = function (errors) {
                        return this.DataObject[this.Column.RawName];
                    };
                    DisplayEditor.prototype.setValue = function (value) { };
                    return DisplayEditor;
                }(PowerTables.Editing.EditorBase));
                Display.DisplayEditor = DisplayEditor;
                PowerTables.ComponentsContainer.registerComponent('DisplayEditor', DisplayEditor);
            })(Display = Editors.Display || (Editors.Display = {}));
        })(Editors = Editing.Editors || (Editing.Editors = {}));
    })(Editing = PowerTables.Editing || (PowerTables.Editing = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Editing;
    (function (Editing) {
        var Editors;
        (function (Editors) {
            var Memo;
            (function (Memo) {
                var MemoEditor = (function (_super) {
                    __extends(MemoEditor, _super);
                    function MemoEditor() {
                        _super.apply(this, arguments);
                    }
                    MemoEditor.prototype.init = function (masterTable) {
                        _super.prototype.init.call(this, masterTable);
                        this.MaxChars = this.Configuration.MaxChars;
                        this.WarningChars = this.Configuration.WarningChars;
                        this.Rows = this.Configuration.Rows;
                        this.Columns = this.Configuration.Columns;
                        this.CurrentChars = 0;
                    };
                    MemoEditor.prototype.changedHandler = function (e) {
                        this.CurrentChars = this.TextArea.value.length;
                        if (this.WarningChars !== 0 && this.CurrentChars >= this.WarningChars && this.CurrentChars <= this.MaxChars) {
                            this.VisualStates.mixinState('warning');
                        }
                        else {
                            this.VisualStates.unmixinState('warning');
                        }
                        _super.prototype.changedHandler.call(this, e);
                    };
                    MemoEditor.prototype.setValue = function (value) {
                        this.TextArea.value = value;
                    };
                    MemoEditor.prototype.getValue = function (errors) {
                        var value = this.TextArea.value;
                        if (this.MaxChars > 0 && value.length > this.MaxChars) {
                            errors.push({ Code: 'MAXCHARS' });
                            return null;
                        }
                        return value;
                    };
                    MemoEditor.prototype.renderContent = function (templatesProvider) {
                        return this.defaultRender(templatesProvider);
                    };
                    MemoEditor.prototype.focus = function () {
                        this.TextArea.focus();
                        this.TextArea.setSelectionRange(0, this.TextArea.value.length);
                    };
                    MemoEditor.prototype.defineMessages = function () {
                        return {
                            'MAXCHARS': "Maximum " + this.Column.Configuration.Title + " length exceeded",
                            'EMPTYSTRING': this.Column.Configuration.Title + " must not be an empty string"
                        };
                    };
                    return MemoEditor;
                }(PowerTables.Editing.EditorBase));
                Memo.MemoEditor = MemoEditor;
                PowerTables.ComponentsContainer.registerComponent('MemoEditor', MemoEditor);
            })(Memo = Editors.Memo || (Editors.Memo = {}));
        })(Editors = Editing.Editors || (Editing.Editors = {}));
    })(Editing = PowerTables.Editing || (PowerTables.Editing = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Editing;
    (function (Editing) {
        var Editors;
        (function (Editors) {
            var PlainText;
            (function (PlainText) {
                var PlainTextEditor = (function (_super) {
                    __extends(PlainTextEditor, _super);
                    function PlainTextEditor() {
                        _super.apply(this, arguments);
                        this._floatRegex = new RegExp("^[0-9]+(\.[0-9]+)?$");
                    }
                    PlainTextEditor.prototype.getValue = function (errors) {
                        if (this.Column.IsDateTime) {
                            var d = this.MasterTable.Date.getDateFromDatePicker(this.Input);
                            if ((d == null) && !this.Column.Configuration.IsNullable) {
                                errors.push({ Code: 'NULL' });
                                return null;
                            }
                            return d;
                        }
                        else {
                            return this._parseFunction(this.Input.value, this.Column, errors);
                        }
                    };
                    PlainTextEditor.prototype.setValue = function (value) {
                        if (this.Column.IsDateTime) {
                            this.MasterTable.Date.putDateToDatePicker(this.Input, value);
                        }
                        else {
                            this.Input.value = this._formatFunction(value, this.Column);
                        }
                    };
                    PlainTextEditor.prototype.init = function (masterTable) {
                        _super.prototype.init.call(this, masterTable);
                        if (this.Configuration.ValidationRegex) {
                            this.ValidationRegex = new RegExp(this.Configuration.ValidationRegex);
                        }
                        this._dotSeparators = new RegExp(this.Configuration.FloatDotReplaceSeparatorsRegex);
                        this._removeSeparators = new RegExp(this.Configuration.FloatRemoveSeparatorsRegex);
                        this._parseFunction = this.Configuration.ParseFunction || this.defaultParse;
                        this._formatFunction = this.Configuration.FormatFunction || this.defaultFormat;
                    };
                    PlainTextEditor.prototype.defaultParse = function (value, column, errors) {
                        if (this.ValidationRegex) {
                            var mtch = this.ValidationRegex.test(value);
                            if (!mtch) {
                                errors.push({ Code: 'REGEX' });
                                return null;
                            }
                            return value;
                        }
                        if (value == null || value == undefined || value.length === 0) {
                            if (!column.Configuration.IsNullable && (!column.IsString)) {
                                errors.push({ Code: 'NULL' });
                                return null;
                            }
                            if (column.IsString && !this.Configuration.AllowEmptyString) {
                                errors.push({ Code: 'EMPTYSTRING' });
                                return null;
                            }
                            return '';
                        }
                        if (this.Configuration.MaxAllowedLength > 0) {
                            if (value.length > this.Configuration.MaxAllowedLength) {
                                errors.push({ Code: 'MAXCHARS' });
                                return null;
                            }
                        }
                        var i;
                        if (column.IsInteger || column.IsEnum) {
                            value = value.replace(this._removeSeparators, '');
                            i = parseInt(value);
                            if (isNaN(i)) {
                                errors.push({ Code: 'NONINT' });
                                return null;
                            }
                            return i;
                        }
                        if (column.IsFloat) {
                            var negative = (value.length > 0 && value.charAt(0) === '-');
                            value = negative ? value.substring(1) : value;
                            value = value.replace(this._removeSeparators, '');
                            value = value.replace(this._dotSeparators, '.');
                            i = parseFloat(negative ? ('-' + value) : value);
                            if (isNaN(i) || (!this._floatRegex.test(value))) {
                                errors.push({ Code: 'NONFLOAT' });
                                return null;
                            }
                            return i;
                        }
                        if (column.IsBoolean) {
                            var bs = value.toUpperCase().trim();
                            if (bs === 'TRUE')
                                return true;
                            if (bs === 'FALSE')
                                return false;
                            errors.push({ Code: 'NONBOOL' });
                            return null;
                        }
                        return value;
                    };
                    PlainTextEditor.prototype.defaultFormat = function (value, column) {
                        if (value == null || value == undefined)
                            return '';
                        return value.toString();
                    };
                    PlainTextEditor.prototype.changedHandler = function (e) {
                        _super.prototype.changedHandler.call(this, e);
                    };
                    PlainTextEditor.prototype.renderContent = function (templatesProvider) {
                        return this.defaultRender(templatesProvider);
                    };
                    PlainTextEditor.prototype.focus = function () {
                        this.Input.focus();
                        this.Input.setSelectionRange(0, this.Input.value.length);
                    };
                    PlainTextEditor.prototype.defineMessages = function () {
                        return {
                            'NONBOOL': "Invalid boolean value provided for " + this.Column.Configuration.Title,
                            'NONFLOAT': "Invalid number provided for " + this.Column.Configuration.Title,
                            'NONINT': "Invalid number provided for " + this.Column.Configuration.Title,
                            'MAXCHARS': "Maximum " + this.Column.Configuration.Title + " length exceeded",
                            'EMPTYSTRING': this.Column.Configuration.Title + " must not be an empty string",
                            'NULL': this.Column.Configuration.Title + " value is mandatory",
                            'REGEX': "Validation failed for " + this.Column.Configuration.Title,
                        };
                    };
                    return PlainTextEditor;
                }(PowerTables.Editing.EditorBase));
                PlainText.PlainTextEditor = PlainTextEditor;
                PowerTables.ComponentsContainer.registerComponent('PlainTextEditor', PlainTextEditor);
            })(PlainText = Editors.PlainText || (Editors.PlainText = {}));
        })(Editors = Editing.Editors || (Editing.Editors = {}));
    })(Editing = PowerTables.Editing || (PowerTables.Editing = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Editing;
    (function (Editing) {
        var Editors;
        (function (Editors) {
            var SelectList;
            (function (SelectList) {
                var SelectListEditor = (function (_super) {
                    __extends(SelectListEditor, _super);
                    function SelectListEditor() {
                        _super.apply(this, arguments);
                    }
                    SelectListEditor.prototype.getValue = function (errors) {
                        var selectedOption = this.List.options.item(this.List.selectedIndex);
                        var item = selectedOption == null ? '' : selectedOption.value.toString();
                        var value = null;
                        if (item.length === 0) {
                            if (this.Column.IsString && this.Configuration.AllowEmptyString)
                                value = item;
                            else {
                                if (this.Column.Configuration.IsNullable)
                                    value = null;
                                else {
                                    errors.push({ Code: 'NULLVALUE' });
                                }
                            }
                        }
                        else {
                            if (this.Column.IsEnum || this.Column.IsInteger)
                                value = parseInt(item);
                            else if (this.Column.IsFloat)
                                value = parseFloat(item);
                            else if (this.Column.IsBoolean)
                                value = item.toUpperCase() === 'TRUE';
                            else if (this.Column.IsDateTime)
                                value = this.MasterTable.Date.parse(item);
                            else if (this.Column.IsString)
                                value = item.toString();
                            else
                                errors.push({ Code: 'UNKNOWN' });
                        }
                        return value;
                    };
                    SelectListEditor.prototype.setValue = function (value) {
                        var strvalue = this.Column.IsDateTime ? this.MasterTable.Date.serialize(value) : (value == null ? null : value.toString());
                        var isSet = false;
                        for (var i = 0; i < this.List.options.length; i++) {
                            if (this.List.options.item(i).value === strvalue) {
                                this.List.options.item(i).selected = true;
                                isSet = true;
                            }
                        }
                        if (this.IsInitialValueSetting) {
                            if ((!isSet) &&
                                this.Configuration.MissingKeyFunction != null &&
                                this.Configuration.MissingValueFunction != null) {
                                strvalue = this.Configuration.MissingKeyFunction(this.DataObject);
                                if (strvalue != null) {
                                    strvalue = strvalue.toString();
                                    var text = this.Configuration.MissingValueFunction(this.DataObject).toString();
                                    var e = document.createElement('option');
                                    e.value = strvalue;
                                    e.text = text;
                                    e.selected = true;
                                    this.List.add(e);
                                }
                            }
                        }
                        for (var i = 0; i < this.Items.length; i++) {
                            if (this.Items[i].Value == strvalue) {
                                this.SelectedItem = this.Items[i];
                                break;
                            }
                        }
                        this.VisualStates.mixinState('selected');
                    };
                    SelectListEditor.prototype.onStateChange = function (e) {
                        if (e.State !== 'selected' && e.State !== 'saving') {
                            this.VisualStates.mixinState('selected');
                        }
                    };
                    SelectListEditor.prototype.init = function (masterTable) {
                        _super.prototype.init.call(this, masterTable);
                        this.Items = this.Configuration.SelectListItems;
                        if (this.Configuration.AddEmptyElement) {
                            var empty = {
                                Text: this.Configuration.EmptyElementText,
                                Value: '',
                                Disabled: false,
                                Selected: false
                            };
                            this.Items = [empty].concat(this.Items);
                        }
                    };
                    SelectListEditor.prototype.renderContent = function (templatesProvider) {
                        return this.defaultRender(templatesProvider);
                    };
                    SelectListEditor.prototype.onAfterRender = function (e) {
                        if (this.VisualStates) {
                            this.VisualStates.subscribeStateChange(this.onStateChange.bind(this));
                        }
                    };
                    SelectListEditor.prototype.changedHandler = function (e) {
                        _super.prototype.changedHandler.call(this, e);
                        var item = this.List.options.item(this.List.selectedIndex).value;
                        for (var i = 0; i < this.Items.length; i++) {
                            if (this.Items[i].Value == item) {
                                this.SelectedItem = this.Items[i];
                                break;
                            }
                        }
                        this.VisualStates.mixinState('selected');
                    };
                    SelectListEditor.prototype.focus = function () {
                        this.List.focus();
                    };
                    SelectListEditor.prototype.defineMessages = function () {
                        return {
                            'NULLVALUE': "Value must be provided for " + this.Column.Configuration.Title,
                            'UNKNOWN': "Unknown value for " + this.Column.Configuration.Title
                        };
                    };
                    return SelectListEditor;
                }(PowerTables.Editing.EditorBase));
                SelectList.SelectListEditor = SelectListEditor;
                PowerTables.ComponentsContainer.registerComponent('SelectListEditor', SelectListEditor);
            })(SelectList = Editors.SelectList || (Editors.SelectList = {}));
        })(Editors = Editing.Editors || (Editing.Editors = {}));
    })(Editing = PowerTables.Editing || (PowerTables.Editing = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Editing;
    (function (Editing) {
        var Form;
        (function (Form) {
            var FormEditHandler = (function (_super) {
                __extends(FormEditHandler, _super);
                function FormEditHandler() {
                    _super.apply(this, arguments);
                    this._activeEditors = [];
                }
                FormEditHandler.prototype.ensureEditing = function (rowDisplayIndex) {
                    if (this._isEditing)
                        return;
                    var lookup = this.MasterTable.DataHolder.localLookupDisplayedData(rowDisplayIndex);
                    this.ensureEditingObject(lookup.DataObject);
                };
                FormEditHandler.prototype.ensureEditingObject = function (dataObject) {
                    this.DataObject = dataObject;
                    this.CurrentDataObjectModified = {};
                    for (var cd in this.DataObject) {
                        if (this.DataObject.hasOwnProperty(cd)) {
                            this.CurrentDataObjectModified[cd] = this.DataObject[cd];
                        }
                    }
                    this._isEditing = true;
                };
                FormEditHandler.prototype.add = function () {
                    if (this._isEditing) {
                        this.rejectAll();
                    }
                    this.DataObject = this.MasterTable.DataHolder.defaultObject();
                    this.CurrentDataObjectModified = this.MasterTable.DataHolder.defaultObject();
                    for (var i = 0; i < this.Configuration.Fields.length; i++) {
                        if (this.Configuration.Fields[i].PluginId !== 'DisplayEditor') {
                            this.DataObject[this.Configuration.Fields[i].FieldName] = null;
                            this.CurrentDataObjectModified[this.Configuration.Fields[i].FieldName] = null;
                        }
                    }
                    this.startupForm();
                };
                FormEditHandler.prototype.beginEdit = function (dataObject) {
                    if (this._isEditing) {
                        this.rejectAll();
                    }
                    this.ensureEditing(dataObject);
                    this.startupForm();
                };
                FormEditHandler.prototype.beginFormEditHandler = function (e) {
                    if (this._isEditing) {
                        var lookup = this.MasterTable.DataHolder.localLookupDisplayedData(e.DisplayingRowIndex);
                        if (this.DataObject !== lookup.DataObject) {
                            this.rejectAll();
                        }
                    }
                    this.ensureEditing(e.DisplayingRowIndex);
                    this.startupForm();
                };
                FormEditHandler.prototype.startupForm = function () {
                    this.MasterTable.Events.Edit.invokeBefore(this, this.CurrentDataObjectModified);
                    var vm = new FormEditFormModel();
                    for (var i = 0; i < this.Configuration.Fields.length; i++) {
                        var editorConf = this.Configuration.Fields[i];
                        var column = null;
                        if (editorConf.FakeColumn != null) {
                            column = PowerTables.Services.InstanceManagerService.createColumn(editorConf.FakeColumn, this.MasterTable);
                        }
                        else {
                            column = this.MasterTable.InstanceManager.Columns[editorConf.FieldName];
                        }
                        var editor = this.createEditor(editorConf.FieldName, column, false, Editing.EditorMode.Form);
                        this._activeEditors.push(editor);
                        vm.EditorsSet[editorConf.FieldName] = editor;
                        vm.ActiveEditors.push(editor);
                    }
                    vm.DataObject = this.DataObject;
                    vm.Handler = this;
                    this._currentForm = vm;
                    this._currentFormElement = this.MasterTable.Renderer.renderObject(this.Configuration.FormTemplateId, vm, this.Configuration.FormTargetSelector);
                    vm.RootElement = this._currentFormElement;
                    for (var j = 0; j < this._activeEditors.length; j++) {
                        this.setEditorValue(this._activeEditors[j]);
                    }
                };
                FormEditHandler.prototype.commitAll = function () {
                    var _this = this;
                    this.ValidationMessages = [];
                    var errors = [];
                    for (var i = 0; i < this._activeEditors.length; i++) {
                        this.retrieveEditorData(this._activeEditors[i], errors);
                    }
                    this.ValidationMessages = errors; //todo draw validation errors
                    if (this.ValidationMessages.length > 0) {
                        this.MasterTable.Events.EditValidationFailed.invokeAfter(this, {
                            OriginalDataObject: this.DataObject,
                            ModifiedDataObject: this.CurrentDataObjectModified,
                            Messages: this.ValidationMessages
                        });
                        return;
                    }
                    this._isEditing = false;
                    for (var i = 0; i < this._activeEditors.length; i++) {
                        if (this._activeEditors[i].VisualStates != null)
                            this._activeEditors[i].VisualStates.changeState('saving');
                    }
                    this._isEditing = false;
                    this._activeEditors = [];
                    this.sendDataObjectToServer(function () {
                        if (!_this._isEditing) {
                            _this.MasterTable.Events.Edit.invokeAfter(_this, _this.CurrentDataObjectModified);
                            _this.CurrentDataObjectModified = null;
                            _this.MasterTable.Renderer.destroyObject(_this.Configuration.FormTargetSelector);
                            _this._currentFormElement = null;
                            _this._currentForm = null;
                        }
                    });
                };
                FormEditHandler.prototype.rejectAll = function () {
                    for (var i = 0; i < this._activeEditors.length; i++) {
                        this.reject(this._activeEditors[i]);
                    }
                    this._isEditing = false;
                    this.CurrentDataObjectModified = null;
                    this.MasterTable.Renderer.destroyObject(this.Configuration.FormTargetSelector);
                    this._currentFormElement = null;
                    this._currentForm = null;
                };
                FormEditHandler.prototype.notifyChanged = function (editor) {
                    this.retrieveEditorData(editor);
                    for (var i = 0; i < this._activeEditors.length; i++) {
                        this._activeEditors[i].notifyObjectChanged();
                    }
                };
                FormEditHandler.prototype.commit = function (editor) {
                    var idx = this._activeEditors.indexOf(editor);
                    if (this._activeEditors.length > idx + 1) {
                        idx = -1;
                        for (var i = 0; i < this._activeEditors.length; i++) {
                            if (!this._activeEditors[i].IsValid) {
                                idx = i;
                                break;
                            }
                        }
                        if (idx !== -1)
                            this._activeEditors[idx].focus();
                    }
                };
                FormEditHandler.prototype.reject = function (editor) {
                    this.CurrentDataObjectModified[editor.FieldName] = this.DataObject[editor.FieldName];
                    this.setEditorValue(editor);
                };
                return FormEditHandler;
            }(PowerTables.Editing.EditHandlerBase));
            Form.FormEditHandler = FormEditHandler;
            var FormEditFormModel = (function () {
                function FormEditFormModel() {
                    this.EditorsSet = {};
                    this.ActiveEditors = [];
                }
                FormEditFormModel.prototype.Editors = function () {
                    var s = '';
                    for (var i = 0; i < this.ActiveEditors.length; i++) {
                        s += this.editor(this.ActiveEditors[i]);
                    }
                    return s;
                };
                FormEditFormModel.prototype.editor = function (editor) {
                    return this.Handler.MasterTable.Renderer.renderObjectContent(editor);
                };
                FormEditFormModel.prototype.Editor = function (fieldName) {
                    var editor = this.EditorsSet[fieldName];
                    return this.editor(editor);
                };
                FormEditFormModel.prototype.commit = function () {
                    this.Handler.commitAll();
                };
                FormEditFormModel.prototype.reject = function () {
                    this.Handler.rejectAll();
                };
                return FormEditFormModel;
            }());
            Form.FormEditFormModel = FormEditFormModel;
            PowerTables.ComponentsContainer.registerComponent('FormEditHandler', FormEditHandler);
        })(Form = Editing.Form || (Editing.Form = {}));
    })(Editing = PowerTables.Editing || (PowerTables.Editing = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Editing;
    (function (Editing) {
        var Editors;
        (function (Editors) {
            var Cells;
            (function (Cells) {
                var RowsEditHandler = (function (_super) {
                    __extends(RowsEditHandler, _super);
                    function RowsEditHandler() {
                        var _this = this;
                        _super.apply(this, arguments);
                        this._isEditing = false;
                        this._activeEditors = [];
                        this._isAddingNewRow = false;
                        this.afterDrawn = function (e) {
                            _this.MasterTable.Events.ClientRowsRendering.subscribeBefore(_this.onBeforeClientRowsRendering.bind(_this), 'roweditor');
                            _this.MasterTable.Events.DataRendered.subscribeAfter(_this.onAfterDataRendered.bind(_this), 'roweditor');
                        };
                    }
                    RowsEditHandler.prototype.onBeforeClientRowsRendering = function (e) {
                        if (!this._isEditing)
                            return;
                        for (var i = 0; i < e.EventArgs.length; i++) {
                            if (e.EventArgs[i].DataObject === this.DataObject) {
                                e.EventArgs[i] = this;
                                this.Index = i;
                            }
                        }
                    };
                    RowsEditHandler.prototype.onAfterDataRendered = function (e) {
                        if (!this._isEditing)
                            return;
                        for (var i = 0; i < this._activeEditors.length; i++) {
                            this._activeEditors[i].onAfterRender(null);
                            this.setEditorValue(this._activeEditors[i]);
                        }
                    };
                    RowsEditHandler.prototype.ensureEditing = function (rowDisplayIndex) {
                        if (this._isEditing)
                            return;
                        if (rowDisplayIndex >= 0) {
                            this._isAddingNewRow = false;
                            var lookup = this.MasterTable.DataHolder.localLookupDisplayedData(rowDisplayIndex);
                            this.DataObject = lookup.DataObject;
                            this.CurrentDataObjectModified = {};
                            for (var cd in this.DataObject) {
                                if (this.DataObject.hasOwnProperty(cd)) {
                                    this.CurrentDataObjectModified[cd] = this.DataObject[cd];
                                }
                            }
                        }
                        else {
                            this._isAddingNewRow = true;
                            this.DataObject = this.MasterTable.DataHolder.defaultObject();
                            this.CurrentDataObjectModified = this.MasterTable.DataHolder.defaultObject();
                            for (var i = 0; i < this.Configuration.Fields.length; i++) {
                                if (this.Configuration.Fields[i].PluginId !== 'DisplayEditor') {
                                    this.DataObject[this.Configuration.Fields[i].FieldName] = null;
                                    this.CurrentDataObjectModified[this.Configuration.Fields[i].FieldName] = null;
                                }
                            }
                        }
                        this.MasterTable.Events.Edit.invokeBefore(this, this.CurrentDataObjectModified);
                        var row = this.MasterTable.Controller.produceRow(this.DataObject, rowDisplayIndex < 0 ? -1 : rowDisplayIndex);
                        this.Cells = row.Cells;
                        this.Index = rowDisplayIndex < 0 ? -1 : rowDisplayIndex;
                        this._isEditing = true;
                    };
                    RowsEditHandler.prototype.beginRowEdit = function (rowIndex) {
                        if (this._isEditing) {
                            var lookup = this.MasterTable.DataHolder.localLookupDisplayedData(rowIndex);
                            if (this.DataObject !== lookup.DataObject) {
                                this.rejectAll();
                            }
                        }
                        this.ensureEditing(rowIndex);
                        for (var k in this.Cells) {
                            if (this.Cells.hasOwnProperty(k)) {
                                if (!this.isEditable(this.Cells[k].Column)) {
                                    this.Cells[k]['IsEditing'] = true;
                                    continue;
                                }
                                var columnName = this.Cells[k].Column.RawName;
                                var editor = this.createEditor(this.Cells[k].Column.RawName, this.Cells[k].Column, false, Editing.EditorMode.Row);
                                this.Cells[columnName] = editor;
                                this._activeEditors.push(editor);
                            }
                        }
                        if (rowIndex < 0) {
                            this.MasterTable.Renderer.Modifier.appendRow(this, 0);
                        }
                        else {
                            this.MasterTable.Renderer.Modifier.redrawRow(this);
                        }
                        for (var i = 0; i < this._activeEditors.length; i++) {
                            this.setEditorValue(this._activeEditors[i]);
                        }
                        if (this._activeEditors.length > 0)
                            this._activeEditors[0].focus();
                    };
                    RowsEditHandler.prototype.commitAll = function () {
                        var _this = this;
                        this.ValidationMessages = [];
                        var errors = [];
                        for (var i = 0; i < this._activeEditors.length; i++) {
                            this.retrieveEditorData(this._activeEditors[i], errors);
                        }
                        this.ValidationMessages = errors; //todo draw validation errors
                        if (this.ValidationMessages.length > 0) {
                            this.MasterTable.Events.EditValidationFailed.invokeAfter(this, {
                                OriginalDataObject: this.DataObject,
                                ModifiedDataObject: this.CurrentDataObjectModified,
                                Messages: this.ValidationMessages
                            });
                            return;
                        }
                        this._isEditing = false;
                        for (var i = 0; i < this._activeEditors.length; i++) {
                            if (this._activeEditors[i].VisualStates != null)
                                this._activeEditors[i].VisualStates.changeState('saving');
                        }
                        this._isEditing = false;
                        this._activeEditors = [];
                        this.sendDataObjectToServer(function () {
                            if (!_this._isEditing) {
                                _this.MasterTable.Events.Edit.invokeAfter(_this, _this.CurrentDataObjectModified);
                                _this.CurrentDataObjectModified = null;
                            }
                        });
                    };
                    RowsEditHandler.prototype.commit = function (editor) {
                        var idx = this._activeEditors.indexOf(editor);
                        if (this._activeEditors.length > idx + 1) {
                            idx = -1;
                            for (var i = 0; i < this._activeEditors.length; i++) {
                                if (!this._activeEditors[i].IsValid) {
                                    idx = i;
                                    break;
                                }
                            }
                            if (idx !== -1)
                                this._activeEditors[idx].focus();
                        }
                    };
                    RowsEditHandler.prototype.notifyChanged = function (editor) {
                        this.retrieveEditorData(editor);
                        for (var i = 0; i < this._activeEditors.length; i++) {
                            this._activeEditors[i].notifyObjectChanged();
                        }
                    };
                    RowsEditHandler.prototype.rejectAll = function () {
                        for (var i = 0; i < this._activeEditors.length; i++) {
                            this.reject(this._activeEditors[i]);
                        }
                        this._isEditing = false;
                        this.CurrentDataObjectModified = null;
                        this.Cells = {};
                        if (!this._isAddingNewRow) {
                            var di = this.MasterTable.DataHolder.localLookupDisplayedDataObject(this.DataObject);
                            if (di.IsCurrentlyDisplaying) {
                                //var row = this.MasterTable.Controller.produceRow(this.DataObject, di.DisplayedIndex);
                                this.MasterTable.Controller.redrawVisibleDataObject(this.DataObject);
                            }
                        }
                        else {
                            this.MasterTable.Renderer.Modifier.destroyRow(this);
                        }
                        //this.MasterTable.Renderer.Modifier.redrawRow(row);
                    };
                    RowsEditHandler.prototype.reject = function (editor) {
                        this.CurrentDataObjectModified[editor.FieldName] = this.DataObject[editor.FieldName];
                        this.setEditorValue(editor);
                    };
                    RowsEditHandler.prototype.add = function () {
                        this.beginRowEdit(-1);
                    };
                    RowsEditHandler.prototype.beginRowEditHandle = function (e) {
                        //if (this._isEditing) return;
                        this.beginRowEdit(e.DisplayingRowIndex);
                    };
                    RowsEditHandler.prototype.commitRowEditHandle = function (e) {
                        if (!this._isEditing)
                            return;
                        this.commitAll();
                    };
                    RowsEditHandler.prototype.rejectRowEditHandle = function (e) {
                        if (!this._isEditing)
                            return;
                        this.rejectAll();
                    };
                    return RowsEditHandler;
                }(Editing.EditHandlerBase));
                Cells.RowsEditHandler = RowsEditHandler;
                PowerTables.ComponentsContainer.registerComponent('RowsEditHandler', RowsEditHandler);
            })(Cells = Editors.Cells || (Editors.Cells = {}));
        })(Editors = Editing.Editors || (Editing.Editors = {}));
    })(Editing = PowerTables.Editing || (PowerTables.Editing = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * Wrapper for table event with ability to subscribe/unsubscribe
     */
    var TableEvent = (function () {
        /*
         * @internal
         */
        function TableEvent(masterTable) {
            this._handlersAfter = {};
            this._handlersBefore = {};
            this._masterTable = masterTable;
        }
        /**
         * Invokes event with overridden this arg and specified event args
         *
         * @param thisArg "this" argument to be substituted to callee
         * @param eventArgs Event args will be passed to callee
         */
        TableEvent.prototype.invokeBefore = function (thisArg, eventArgs) {
            var ea = {
                MasterTable: this._masterTable,
                EventArgs: eventArgs,
                EventDirection: PowerTables.EventDirection.Before
            };
            var hndlrs = this._handlersBefore;
            var i = 0;
            for (var k in hndlrs) {
                if (hndlrs.hasOwnProperty(k)) {
                    var kHandlers = hndlrs[k];
                    for (i = 0; i < kHandlers.length; i++) {
                        kHandlers[i].apply(thisArg, [ea]);
                    }
                    i = 0;
                }
            }
        };
        /**
         * Invokes event with overridden this arg and specified event args
         *
         * @param thisArg "this" argument to be substituted to callee
         * @param eventArgs Event args will be passed to callee
         */
        TableEvent.prototype.invokeAfter = function (thisArg, eventArgs) {
            var ea = {
                MasterTable: this._masterTable,
                EventArgs: eventArgs,
                EventDirection: PowerTables.EventDirection.After
            };
            var hndlrs = this._handlersAfter;
            var i = 0;
            for (var k in hndlrs) {
                if (hndlrs.hasOwnProperty(k)) {
                    var kHandlers = hndlrs[k];
                    for (i = 0; i < kHandlers.length; i++) {
                        kHandlers[i].apply(thisArg, [ea]);
                    }
                    i = 0;
                }
            }
        };
        /**
         * Invokes event with overridden this arg and specified event args
         *
         * @param thisArg "this" argument to be substituted to callee
         * @param eventArgs Event args will be passed to callee
         */
        TableEvent.prototype.invoke = function (thisArg, eventArgs) {
            this.invokeAfter(thisArg, eventArgs);
        };
        /**
         * Subscribes specified function to AFTER event with supplied string key.
         * Subscriber key is needed to have an ability to unsubscribe from event
         * and should reflect entity that has been subscriben
         *
         * @param handler Event handler to subscribe
         * @param subscriber Subscriber key to associate with handler
         */
        TableEvent.prototype.subscribeAfter = function (handler, subscriber) {
            if (!this._handlersAfter[subscriber]) {
                this._handlersAfter[subscriber] = [];
            }
            this._handlersAfter[subscriber].push(handler);
        };
        /**
         * Subscribes specified function to AFTER event with supplied string key.
         * Subscriber key is needed to have an ability to unsubscribe from event
         * and should reflect entity that has been subscriben
         *
         * @param handler Event handler to subscribe
         * @param subscriber Subscriber key to associate with handler
         */
        TableEvent.prototype.subscribe = function (handler, subscriber) {
            this.subscribeAfter(handler, subscriber);
        };
        /**
         * Subscribes specified function to BEFORE event with supplied string key.
         * Subscriber key is needed to have an ability to unsubscribe from event
         * and should reflect entity that has been subscriben
         *
         * @param handler Event handler to subscribe
         * @param subscriber Subscriber key to associate with handler
         */
        TableEvent.prototype.subscribeBefore = function (handler, subscriber) {
            if (!this._handlersBefore[subscriber]) {
                this._handlersBefore[subscriber] = [];
            }
            this._handlersBefore[subscriber].push(handler);
        };
        /**
         * Unsubscribes specified addressee from event
         * @param subscriber Subscriber key associated with handler
         */
        TableEvent.prototype.unsubscribe = function (subscriber) {
            this._handlersAfter[subscriber] = null;
            delete this._handlersAfter[subscriber];
        };
        return TableEvent;
    }());
    PowerTables.TableEvent = TableEvent;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Filters;
    (function (Filters) {
        /**
         * Base class for creating filters
         */
        var FilterBase = (function (_super) {
            __extends(FilterBase, _super);
            function FilterBase() {
                _super.apply(this, arguments);
            }
            FilterBase.prototype.modifyQuery = function (query, scope) { };
            FilterBase.prototype.init = function (masterTable) {
                _super.prototype.init.call(this, masterTable);
                this.MasterTable.Loader.registerQueryPartProvider(this);
            };
            /**
             * Call this method inside init and override filterPredicate method to make this filter
             * participate in client-side filtering
             */
            FilterBase.prototype.itIsClientFilter = function () {
                this.MasterTable.DataHolder.registerClientFilter(this);
            };
            FilterBase.prototype.filterPredicate = function (rowObject, query) { throw new Error('Please override this method'); };
            return FilterBase;
        }(PowerTables.Plugins.PluginBase));
        Filters.FilterBase = FilterBase;
    })(Filters = PowerTables.Filters || (PowerTables.Filters = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Filters;
    (function (Filters) {
        var Range;
        (function (Range) {
            var RangeFilterPlugin = (function (_super) {
                __extends(RangeFilterPlugin, _super);
                function RangeFilterPlugin() {
                    var _this = this;
                    _super.apply(this, arguments);
                    this._filteringIsBeingExecuted = false;
                    this._isInitializing = true;
                    this.afterDrawn = function (e) {
                        if (_this.Configuration.Hidden)
                            return;
                        if (_this.AssociatedColumn.IsDateTime) {
                            var fromDate = _this.MasterTable.Date.parse(_this.Configuration.FromValue);
                            var toDate = _this.MasterTable.Date.parse(_this.Configuration.ToValue);
                            _this.MasterTable.Date.putDateToDatePicker(_this.FromValueProvider, fromDate);
                            _this.MasterTable.Date.putDateToDatePicker(_this.ToValueProvider, toDate);
                        }
                        _this._isInitializing = false;
                    };
                }
                RangeFilterPlugin.prototype.getFromValue = function () {
                    if (this.AssociatedColumn.Configuration.IsDataOnly) {
                        return this.Configuration.FromValue;
                    }
                    if (!this.FromValueProvider)
                        return '';
                    if (this.AssociatedColumn.IsDateTime) {
                        var date = this.MasterTable.Date.getDateFromDatePicker(this.FromValueProvider);
                        return this.MasterTable.Date.serialize(date);
                    }
                    return this.FromValueProvider.value;
                };
                RangeFilterPlugin.prototype.getToValue = function () {
                    if (this.AssociatedColumn.Configuration.IsDataOnly) {
                        return this.Configuration.ToValue;
                    }
                    if (!this.ToValueProvider)
                        return '';
                    if (this.AssociatedColumn.IsDateTime) {
                        var date = this.MasterTable.Date.getDateFromDatePicker(this.ToValueProvider);
                        return this.MasterTable.Date.serialize(date);
                    }
                    return this.ToValueProvider.value;
                };
                RangeFilterPlugin.prototype.handleValueChanged = function () {
                    var _this = this;
                    if (this._isInitializing)
                        return;
                    if (this._filteringIsBeingExecuted)
                        return;
                    if ((this._fromPreviousValue === this.getFromValue())
                        && (this._toPreviousValue === this.getToValue()))
                        return;
                    this._fromPreviousValue = this.getFromValue();
                    this._toPreviousValue = this.getToValue();
                    if (this.Configuration.InputDelay > 0) {
                        clearTimeout(this._inpTimeout);
                        this._inpTimeout = setTimeout(function () {
                            _this._filteringIsBeingExecuted = true;
                            _this.MasterTable.Controller.reload();
                            _this._filteringIsBeingExecuted = false;
                        }, this.Configuration.InputDelay);
                    }
                    else {
                        this._filteringIsBeingExecuted = true;
                        this.MasterTable.Controller.reload();
                        this._filteringIsBeingExecuted = false;
                    }
                };
                RangeFilterPlugin.prototype.getFilterArgument = function () {
                    var args = [];
                    var frm = this.getFromValue();
                    var to = this.getToValue();
                    args.push(frm);
                    args.push(to);
                    var result = args.join('|');
                    return result;
                };
                RangeFilterPlugin.prototype.modifyQuery = function (query, scope) {
                    if (this.Configuration.Hidden)
                        return;
                    var val = this.getFilterArgument();
                    if (!val || val.length === 0)
                        return;
                    if (this.Configuration.ClientFiltering && scope === PowerTables.QueryScope.Client || scope === PowerTables.QueryScope.Transboundary) {
                        query.Filterings[this.AssociatedColumn.RawName] = val;
                    }
                    if ((!this.Configuration.ClientFiltering) && scope === PowerTables.QueryScope.Server || scope === PowerTables.QueryScope.Transboundary) {
                        query.Filterings[this.AssociatedColumn.RawName] = val;
                    }
                };
                RangeFilterPlugin.prototype.init = function (masterTable) {
                    _super.prototype.init.call(this, masterTable);
                    if (this.Configuration.ClientFiltering) {
                        this.itIsClientFilter();
                    }
                    this.AssociatedColumn = this.MasterTable.InstanceManager.Columns[this.Configuration.ColumnName];
                };
                RangeFilterPlugin.prototype.renderContent = function (templatesProvider) {
                    if (this.Configuration.Hidden)
                        return '';
                    return this.defaultRender(templatesProvider);
                };
                RangeFilterPlugin.prototype.filterPredicate = function (rowObject, query) {
                    var fval = query.Filterings[this.AssociatedColumn.RawName];
                    if (!fval)
                        return true;
                    var args = fval.split('|');
                    var fromValue = args[0];
                    var toValue = args[1];
                    if (this.Configuration.ClientFilteringFunction) {
                        return this.Configuration.ClientFilteringFunction(rowObject, fromValue, toValue, query);
                    }
                    var frmEmpty = fromValue.trim().length === 0;
                    var toEmpty = toValue.trim().length === 0;
                    if (frmEmpty && toEmpty)
                        return true;
                    if (!query.Filterings.hasOwnProperty(this.AssociatedColumn.RawName))
                        return true;
                    var objVal = rowObject[this.AssociatedColumn.RawName];
                    if (objVal == null)
                        return false;
                    if (this.AssociatedColumn.IsString) {
                        var str = objVal.toString();
                        return ((frmEmpty) || str.localeCompare(fromValue) >= 0) && ((toEmpty) || str.localeCompare(toValue) <= 0);
                    }
                    if (this.AssociatedColumn.IsFloat) {
                        return ((frmEmpty) || objVal >= parseFloat(fromValue)) && ((toEmpty) || objVal <= parseFloat(toValue));
                    }
                    if (this.AssociatedColumn.IsInteger || this.AssociatedColumn.IsEnum) {
                        return ((frmEmpty) || objVal >= parseInt(fromValue)) && ((toEmpty) || objVal <= parseInt(toValue));
                    }
                    if (this.AssociatedColumn.IsDateTime) {
                        var toVal;
                        if (!toEmpty) {
                            toVal = this.MasterTable.Date.parse(toValue);
                            if (this.Configuration.TreatEqualDateAsWholeDay) {
                                toVal.setHours(23);
                                toVal.setMinutes(59);
                                toVal.setSeconds(59);
                            }
                        }
                        return ((frmEmpty) || objVal >= this.MasterTable.Date.parse(fromValue)) && ((toEmpty) || objVal <= toVal);
                    }
                    return true;
                };
                return RangeFilterPlugin;
            }(PowerTables.Filters.FilterBase));
            Range.RangeFilterPlugin = RangeFilterPlugin;
            PowerTables.ComponentsContainer.registerComponent('RangeFilter', RangeFilterPlugin);
        })(Range = Filters.Range || (Filters.Range = {}));
    })(Filters = PowerTables.Filters || (PowerTables.Filters = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Filters;
    (function (Filters) {
        var Select;
        (function (Select) {
            /**
             * Client-side implementation of Select filter
             */
            var SelectFilterPlugin = (function (_super) {
                __extends(SelectFilterPlugin, _super);
                function SelectFilterPlugin() {
                    _super.apply(this, arguments);
                }
                /**
                 * Retrieves selected values serialized with |-delimiter
                 */
                SelectFilterPlugin.prototype.getSerializedValue = function () {
                    if (this.AssociatedColumn.Configuration.IsDataOnly && this.Configuration.SelectedValue) {
                        return this.Configuration.SelectedValue;
                    }
                    return this.getArrayValue().join('|');
                };
                /**
                 * Retrieves array of stringified selected values
                 */
                SelectFilterPlugin.prototype.getArrayValue = function () {
                    if (!this.FilterValueProvider)
                        return [];
                    if (!this.Configuration.IsMultiple) {
                        var selected = this.FilterValueProvider.options[this.FilterValueProvider.selectedIndex];
                        return [selected.value];
                    }
                    else {
                        var elemValues = [];
                        for (var i = 0, iLen = this.FilterValueProvider.options.length; i < iLen; i++) {
                            var opt = this.FilterValueProvider.options[i];
                            if (opt.selected) {
                                elemValues.push(opt.value);
                            }
                        }
                        return elemValues;
                    }
                };
                /**
                 * @internal
                 */
                SelectFilterPlugin.prototype.modifyQuery = function (query, scope) {
                    if (this.Configuration.Hidden)
                        return;
                    var val = this.getSerializedValue();
                    if (!val || val.length === 0)
                        return;
                    if (this.Configuration.ClientFiltering && scope === PowerTables.QueryScope.Client || scope === PowerTables.QueryScope.Transboundary) {
                        query.Filterings[this.AssociatedColumn.RawName] = val;
                    }
                    if ((!this.Configuration.ClientFiltering) && scope === PowerTables.QueryScope.Server || scope === PowerTables.QueryScope.Transboundary) {
                        query.Filterings[this.AssociatedColumn.RawName] = val;
                    }
                };
                /**
                 * @internal
                 */
                SelectFilterPlugin.prototype.renderContent = function (templatesProvider) {
                    if (this.Configuration.Hidden)
                        return '';
                    return this.defaultRender(templatesProvider);
                };
                /**
                 * @internal
                 */
                SelectFilterPlugin.prototype.handleValueChanged = function () {
                    this.MasterTable.Controller.reload();
                };
                /**
                 * @internal
                 */
                SelectFilterPlugin.prototype.init = function (masterTable) {
                    _super.prototype.init.call(this, masterTable);
                    this.AssociatedColumn = this.MasterTable.InstanceManager.Columns[this.Configuration.ColumnName];
                    var sv = this.Configuration.SelectedValue;
                    if (sv !== undefined && sv !== null) {
                        for (var i = 0; i < this.Configuration.Items.length; i++) {
                            if (this.Configuration.Items[i].Value !== sv) {
                                this.Configuration.Items[i].Selected = false;
                            }
                            else {
                                this.Configuration.Items[i].Selected = true;
                            }
                        }
                    }
                    if (this.Configuration.ClientFiltering) {
                        this.itIsClientFilter();
                    }
                };
                /**
                 * @internal
                 */
                SelectFilterPlugin.prototype.filterPredicate = function (rowObject, query) {
                    var fval = query.Filterings[this.AssociatedColumn.RawName];
                    if (fval == null || fval == undefined)
                        return true;
                    if (fval === '$$lattice_not_present$$' && this.AssociatedColumn.Configuration.IsNullable)
                        fval = null;
                    var arr = null;
                    if (this.Configuration.IsMultiple) {
                        arr = fval != null ? fval.split('|') : [null];
                    }
                    else {
                        arr = [fval];
                    }
                    if (this.Configuration.ClientFilteringFunction) {
                        return this.Configuration.ClientFilteringFunction(rowObject, arr, query);
                    }
                    if (!query.Filterings.hasOwnProperty(this.AssociatedColumn.RawName))
                        return true;
                    var objVal = rowObject[this.AssociatedColumn.RawName];
                    if (objVal == null)
                        return arr.indexOf(null) > -1;
                    if (this.AssociatedColumn.IsString) {
                        return arr.indexOf(objVal) >= 0;
                    }
                    var single = false;
                    if (this.AssociatedColumn.IsFloat) {
                        arr.map(function (v) {
                            if (parseFloat(v) === objVal)
                                single = true;
                        });
                        return single;
                    }
                    if (this.AssociatedColumn.IsInteger || this.AssociatedColumn.IsEnum) {
                        single = false;
                        arr.map(function (v) {
                            if (parseInt(v) === objVal)
                                single = true;
                        });
                        return single;
                    }
                    if (this.AssociatedColumn.IsBoolean) {
                        single = false;
                        arr.map(function (v) {
                            var bv = v.toLocaleUpperCase() === 'TRUE' ? true :
                                v.toLocaleUpperCase() === 'FALSE' ? false : null;
                            if (bv == null) {
                                bv = parseInt(fval) > 0;
                            }
                            if (bv === objVal) {
                                single = true;
                            }
                        });
                        return single;
                    }
                    return true;
                };
                return SelectFilterPlugin;
            }(PowerTables.Filters.FilterBase));
            Select.SelectFilterPlugin = SelectFilterPlugin;
            PowerTables.ComponentsContainer.registerComponent('SelectFilter', SelectFilterPlugin);
        })(Select = Filters.Select || (Filters.Select = {}));
    })(Filters = PowerTables.Filters || (PowerTables.Filters = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Filters;
    (function (Filters) {
        var Value;
        (function (Value) {
            /**
             * Client-side part of value filter
             */
            var ValueFilterPlugin = (function (_super) {
                __extends(ValueFilterPlugin, _super);
                function ValueFilterPlugin() {
                    var _this = this;
                    _super.apply(this, arguments);
                    this._filteringIsBeingExecuted = false;
                    this._isInitializing = true;
                    /**
                    * @internal
                    */
                    this.afterDrawn = function (e) {
                        if (_this.Configuration.Hidden)
                            return;
                        if (_this.AssociatedColumn.IsDateTime) {
                            var date = _this.MasterTable.Date.parse(_this.Configuration.DefaultValue);
                            _this.MasterTable.Date.putDateToDatePicker(_this.FilterValueProvider, date);
                        }
                        _this._isInitializing = false;
                    };
                }
                /**
                 * Retrieves entered value. Could be either string or Date object depending on
                 * column associated within filter
                 */
                ValueFilterPlugin.prototype.getValue = function () {
                    if (this.AssociatedColumn.Configuration.IsDataOnly && this.Configuration.DefaultValue) {
                        return this.Configuration.DefaultValue;
                    }
                    if (!this.FilterValueProvider)
                        return '';
                    if (this.AssociatedColumn.IsDateTime) {
                        return this.MasterTable.Date.serialize(this.MasterTable.Date.getDateFromDatePicker(this.FilterValueProvider));
                    }
                    return this.FilterValueProvider.value;
                };
                /**
                * @internal
                */
                ValueFilterPlugin.prototype.handleValueChanged = function () {
                    var _this = this;
                    if (this._isInitializing)
                        return;
                    if (this._filteringIsBeingExecuted)
                        return;
                    if (this.getValue() === this._previousValue) {
                        return;
                    }
                    this._previousValue = this.getValue();
                    if (this.Configuration.InputDelay > 0) {
                        clearTimeout(this._inpTimeout);
                        this._inpTimeout = setTimeout(function () {
                            _this._filteringIsBeingExecuted = true;
                            _this.MasterTable.Controller.reload();
                            _this._filteringIsBeingExecuted = false;
                        }, this.Configuration.InputDelay);
                    }
                    else {
                        this._filteringIsBeingExecuted = true;
                        this.MasterTable.Controller.reload();
                        this._filteringIsBeingExecuted = false;
                    }
                };
                /**
                * @internal
                */
                ValueFilterPlugin.prototype.renderContent = function (templatesProvider) {
                    if (this.Configuration.Hidden)
                        return '';
                    return this.defaultRender(templatesProvider);
                };
                /**
                * @internal
                */
                ValueFilterPlugin.prototype.init = function (masterTable) {
                    _super.prototype.init.call(this, masterTable);
                    if (this.Configuration.ClientFiltering) {
                        this.itIsClientFilter();
                    }
                    this.AssociatedColumn = this.MasterTable.InstanceManager.Columns[this.Configuration.ColumnName];
                };
                /**
                * @internal
                */
                ValueFilterPlugin.prototype.filterPredicate = function (rowObject, query) {
                    var fval = query.Filterings[this.AssociatedColumn.RawName];
                    if (fval == null || fval == undefined)
                        return true;
                    if (fval === '$$lattice_not_present$$' && this.AssociatedColumn.Configuration.IsNullable)
                        fval = null;
                    if (this.Configuration.ClientFilteringFunction) {
                        return this.Configuration.ClientFilteringFunction(rowObject, fval, query);
                    }
                    if (!query.Filterings.hasOwnProperty(this.AssociatedColumn.RawName))
                        return true;
                    var objVal = rowObject[this.AssociatedColumn.RawName];
                    if (objVal == null)
                        return fval == null;
                    if (this.AssociatedColumn.IsString) {
                        objVal = objVal.toString();
                        var entries = fval.split(/\s/);
                        for (var i = 0; i < entries.length; i++) {
                            var e = entries[i].trim();
                            if (e.length > 0) {
                                if (objVal.toLocaleLowerCase().indexOf(e.toLocaleLowerCase()) < 0)
                                    return false;
                            }
                        }
                        return true;
                    }
                    if (this.AssociatedColumn.IsFloat) {
                        var f = parseFloat(fval);
                        return objVal === f;
                    }
                    if (this.AssociatedColumn.IsInteger || this.AssociatedColumn.IsEnum) {
                        var int = parseInt(fval);
                        return objVal === int;
                    }
                    if (this.AssociatedColumn.IsBoolean) {
                        var bv = fval.toLocaleUpperCase() === 'TRUE' ? true :
                            fval.toLocaleUpperCase() === 'FALSE' ? false : null;
                        if (bv == null) {
                            bv = parseInt(fval) > 0;
                        }
                        return objVal === bv;
                    }
                    if (this.AssociatedColumn.IsDateTime) {
                        var date = this.MasterTable.Date.parse(fval);
                        if (this.Configuration.CompareOnlyDates) {
                            return date.getFullYear() === objVal.getFullYear()
                                && date.getDate() === objVal.getDate()
                                && date.getMonth() === objVal.getMonth();
                        }
                        return date === objVal;
                    }
                    return true;
                };
                /**
                * @internal
                */
                ValueFilterPlugin.prototype.modifyQuery = function (query, scope) {
                    if (this.Configuration.Hidden)
                        return;
                    var val = this.getValue();
                    if (!val || val.length === 0)
                        return;
                    if (this.Configuration.ClientFiltering && scope === PowerTables.QueryScope.Client || scope === PowerTables.QueryScope.Transboundary) {
                        query.Filterings[this.AssociatedColumn.RawName] = val;
                    }
                    if ((!this.Configuration.ClientFiltering) && scope === PowerTables.QueryScope.Server || scope === PowerTables.QueryScope.Transboundary) {
                        query.Filterings[this.AssociatedColumn.RawName] = val;
                    }
                };
                return ValueFilterPlugin;
            }(PowerTables.Filters.FilterBase));
            Value.ValueFilterPlugin = ValueFilterPlugin;
            PowerTables.ComponentsContainer.registerComponent('ValueFilter', ValueFilterPlugin);
        })(Value = Filters.Value || (Filters.Value = {}));
    })(Filters = PowerTables.Filters || (PowerTables.Filters = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var Checkboxify;
        (function (Checkboxify) {
            var CheckboxifyPlugin = (function (_super) {
                __extends(CheckboxifyPlugin, _super);
                function CheckboxifyPlugin() {
                    _super.apply(this, arguments);
                }
                CheckboxifyPlugin.prototype.redrawHeader = function () {
                    this.MasterTable.Renderer.Modifier.redrawHeader(this._ourColumn);
                };
                CheckboxifyPlugin.prototype.init = function (masterTable) {
                    var _this = this;
                    _super.prototype.init.call(this, masterTable);
                    this._ourColumn = this.MasterTable.InstanceManager.Columns['_checkboxify'];
                    var header = {
                        Column: this._ourColumn,
                        renderContent: null,
                        renderElement: function (tp) { return tp.getCachedTemplate(_this.Configuration.SelectAllTemplateId)({ IsAllSelected: _this.MasterTable.Selection.isAllSelected(), CanSelectAll: _this.MasterTable.Selection.canSelectAll() }); },
                        selectAllEvent: function (e) { return _this.MasterTable.Selection.toggleAll(); }
                    };
                    this._ourColumn.Header = header;
                };
                CheckboxifyPlugin.prototype.subscribe = function (e) {
                    var _this = this;
                    e.SelectionChanged.subscribeAfter(function (e) { return _this.redrawHeader(); }, 'checkboxify');
                    e.ClientDataProcessing.subscribeAfter(function (e) { return _this.redrawHeader(); }, 'checkboxify');
                    e.DataReceived.subscribeAfter(function (e) { return _this.redrawHeader(); }, 'checkboxify');
                };
                return CheckboxifyPlugin;
            }(PowerTables.Plugins.PluginBase));
            Checkboxify.CheckboxifyPlugin = CheckboxifyPlugin;
            PowerTables.ComponentsContainer.registerComponent('Checkboxify', CheckboxifyPlugin);
        })(Checkboxify = Plugins.Checkboxify || (Plugins.Checkboxify = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var Formwatch;
        (function (Formwatch) {
            var FormwatchPlugin = (function (_super) {
                __extends(FormwatchPlugin, _super);
                function FormwatchPlugin() {
                    _super.apply(this, arguments);
                    this._existingValues = {};
                    this._filteringExecuted = {};
                    this._timeouts = {};
                }
                FormwatchPlugin.extractValueFromMultiSelect = function (o) {
                    var value = [];
                    for (var k = 0; k < o.options.length; k++) {
                        if (o.options[k].selected)
                            value.push(o.options[k].value);
                    }
                    return value;
                };
                FormwatchPlugin.extractInputValue = function (element, fieldConf, dateService) {
                    var value = null;
                    if (element.type === 'select-multiple') {
                        value = FormwatchPlugin.extractValueFromMultiSelect((element));
                    }
                    else if (element.type === 'checkbox') {
                        value = element.checked;
                    }
                    else if (element.type === 'radio') {
                        if (element.checked)
                            value = element.value;
                    }
                    else {
                        if (fieldConf.IsDateTime) {
                            value = dateService.getDateFromDatePicker(element);
                            if (!dateService.isValidDate(value)) {
                                value = dateService.parse(element.value);
                                if (!dateService.isValidDate(value)) {
                                    value = null;
                                }
                            }
                            if (value != null)
                                value = dateService.serialize(value);
                        }
                        else {
                            value = element.value;
                        }
                    }
                    return value;
                };
                FormwatchPlugin.extractData = function (elements, fieldConf, dateService) {
                    var value = null;
                    var element = (elements.length > 0 ? elements.item(0) : null);
                    if (element) {
                        if (fieldConf.IsArray) {
                            if (fieldConf.ArrayDelimiter) {
                                if (element.value == null || element.value.length === 0)
                                    value = [];
                                else
                                    value = element.value.split(fieldConf.ArrayDelimiter);
                            }
                            else {
                                if (elements.length === 1 && element.type === 'select-multiple') {
                                    value = FormwatchPlugin.extractValueFromMultiSelect(element);
                                }
                                else {
                                    value = [];
                                    for (var i = 0; i < elements.length; i++) {
                                        value.push(FormwatchPlugin.extractInputValue(elements.item(i), fieldConf, dateService));
                                    }
                                }
                            }
                        }
                        else {
                            for (var j = 0; j < elements.length; j++) {
                                var v = FormwatchPlugin.extractInputValue(elements.item(j), fieldConf, dateService);
                                if (v != null && v != undefined) {
                                    value = v;
                                    break;
                                }
                            }
                        }
                    }
                    return value;
                };
                FormwatchPlugin.extractFormData = function (configuration, rootElement, dateService) {
                    var result = {};
                    for (var i = 0; i < configuration.length; i++) {
                        var fieldConf = configuration[i];
                        var value = null;
                        var name = fieldConf.FieldJsonName;
                        if (fieldConf.ConstantValue) {
                            value = fieldConf.ConstantValue;
                        }
                        else {
                            if (fieldConf.FieldValueFunction) {
                                value = fieldConf.FieldValueFunction();
                            }
                            else {
                                var elements = rootElement.querySelectorAll(fieldConf.FieldSelector);
                                value = FormwatchPlugin.extractData(elements, fieldConf, dateService);
                            }
                            if (fieldConf.SetConstantIfNotSupplied && (value == null)) {
                                value = fieldConf.ConstantValue;
                            }
                        }
                        if (value != null || result[name] == null || result[name] == undefined) {
                            result[name] = value;
                        }
                    }
                    return result;
                };
                FormwatchPlugin.prototype.modifyQuery = function (query, scope) {
                    var result = FormwatchPlugin.extractFormData(this.Configuration.FieldsConfiguration, document, this.MasterTable.Date);
                    for (var fm in this.Configuration.FiltersMappings) {
                        if (this.Configuration.FiltersMappings.hasOwnProperty(fm)) {
                            var mappingConf = this.Configuration.FiltersMappings[fm];
                            var needToApply = (mappingConf.ForClient && mappingConf.ForServer)
                                || (mappingConf.ForClient && scope === PowerTables.QueryScope.Client)
                                || (mappingConf.ForServer && scope === PowerTables.QueryScope.Server)
                                || (scope === PowerTables.QueryScope.Transboundary);
                            if (needToApply) {
                                switch (mappingConf.FilterType) {
                                    case 0:
                                        var val = result[mappingConf.FieldKeys[0]];
                                        if (!val || val.length === 0)
                                            break;
                                        query.Filterings[fm] = val;
                                        break;
                                    case 1:
                                        if (mappingConf.FieldKeys.length === 1 && (Object.prototype.toString.call(result[mappingConf[0]]) === '[object Array]')) {
                                            query.Filterings[fm] = result[mappingConf[0]][0] + "|" + result[mappingConf[0]][1];
                                        }
                                        else {
                                            query.Filterings[fm] = result[mappingConf.FieldKeys[0]] + "|" + result[mappingConf.FieldKeys[1]];
                                        }
                                        break;
                                    case 2:
                                        if (mappingConf.FieldKeys.length === 1 && (Object.prototype.toString.call(result[mappingConf[0]]) === '[object Array]')) {
                                            query.Filterings[fm] = result[mappingConf[0]].join('|');
                                        }
                                        else {
                                            var values = [];
                                            for (var m = 0; m < mappingConf.FieldKeys.length; m++) {
                                                values.push(result[mappingConf.FieldKeys[m]]);
                                            }
                                            query.Filterings[fm] = values.join('|');
                                        }
                                        break;
                                }
                            }
                        }
                    }
                    if (this.Configuration.DoNotEmbed)
                        return;
                    var str = JSON.stringify(result);
                    query.AdditionalData['Formwatch'] = str;
                };
                FormwatchPlugin.prototype.subscribe = function (e) {
                    var _this = this;
                    for (var i = 0; i < this.Configuration.FieldsConfiguration.length; i++) {
                        var conf = this.Configuration.FieldsConfiguration[i];
                        var element = document.querySelector(conf.FieldSelector);
                        if (conf.AutomaticallyAttachDatepicker) {
                            this.MasterTable.Date.createDatePicker(element);
                        }
                        if (conf.TriggerSearchOnEvents && conf.TriggerSearchOnEvents.length > 0) {
                            for (var j = 0; j < conf.TriggerSearchOnEvents.length; j++) {
                                var evtToTrigger = conf.TriggerSearchOnEvents[j];
                                element.addEventListener(evtToTrigger, (function (c, el) { return function (evt) {
                                    _this.fieldChange(c.FieldSelector, c.SearchTriggerDelay, el, evt);
                                }; })(conf, element));
                            }
                            this._existingValues[conf.FieldSelector] = element.value;
                        }
                    }
                };
                FormwatchPlugin.prototype.fieldChange = function (fieldSelector, delay, element, e) {
                    var _this = this;
                    if (this._filteringExecuted[fieldSelector])
                        return;
                    if (element.value === this._existingValues[fieldSelector]) {
                        return;
                    }
                    this._existingValues[fieldSelector] = element.value;
                    if (delay > 0) {
                        if (this._timeouts[fieldSelector])
                            clearTimeout(this._timeouts[fieldSelector]);
                        this._timeouts[fieldSelector] = setTimeout(function () {
                            _this._filteringExecuted[fieldSelector] = true;
                            _this.MasterTable.Controller.reload();
                            _this._filteringExecuted[fieldSelector] = false;
                        }, delay);
                    }
                    else {
                        this._filteringExecuted[fieldSelector] = true;
                        this.MasterTable.Controller.reload();
                        this._filteringExecuted[fieldSelector] = false;
                    }
                };
                FormwatchPlugin.prototype.init = function (masterTable) {
                    _super.prototype.init.call(this, masterTable);
                    this.MasterTable.Loader.registerQueryPartProvider(this);
                };
                return FormwatchPlugin;
            }(Plugins.PluginBase));
            Formwatch.FormwatchPlugin = FormwatchPlugin;
            PowerTables.ComponentsContainer.registerComponent('Formwatch', FormwatchPlugin);
        })(Formwatch = Plugins.Formwatch || (Plugins.Formwatch = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var Hideout;
        (function (Hideout) {
            var HideoutPlugin = (function (_super) {
                __extends(HideoutPlugin, _super);
                function HideoutPlugin() {
                    _super.apply(this, arguments);
                    this.ColumnStates = [];
                    this._columnStates = {};
                    this._isInitializing = true;
                }
                HideoutPlugin.prototype.isColumnVisible = function (columnName) {
                    return this.isColumnInstanceVisible(this.MasterTable.InstanceManager.Columns[columnName]);
                };
                HideoutPlugin.prototype.isColumnInstanceVisible = function (col) {
                    if (!col)
                        return true;
                    return this._columnStates[col.RawName].Visible;
                };
                HideoutPlugin.prototype.hideColumnByName = function (rawColname) {
                    this.hideColumnInstance(this.MasterTable.InstanceManager.Columns[rawColname]);
                };
                HideoutPlugin.prototype.showColumnByName = function (rawColname) {
                    this.showColumnInstance(this.MasterTable.InstanceManager.Columns[rawColname]);
                };
                //#region Events handling
                HideoutPlugin.prototype.toggleColumn = function (e) {
                    this.toggleColumnByName(e.EventArguments[0]);
                };
                HideoutPlugin.prototype.showColumn = function (e) {
                    this.showColumnByName(e.EventArguments[0]);
                };
                HideoutPlugin.prototype.hideColumn = function (e) {
                    this.hideColumnByName(e.EventArguments[0]);
                };
                //#endregion
                //#region Correct showing/hiding
                //#endregion
                HideoutPlugin.prototype.toggleColumnByName = function (columnName) {
                    if (this.isColumnVisible(columnName)) {
                        this.hideColumnByName(columnName);
                        return false;
                    }
                    else {
                        this.showColumnByName(columnName);
                        return true;
                    }
                };
                HideoutPlugin.prototype.modifyQuery = function (query, scope) {
                    var hidden = [];
                    var shown = [];
                    for (var i = 0; i < this.ColumnStates.length; i++) {
                        if (scope !== PowerTables.QueryScope.Transboundary) {
                            if (this.Configuration.ColumnInitiatingReload.indexOf(this.ColumnStates[i].RawName) < 0)
                                continue;
                        }
                        if (!this.ColumnStates[i].Visible) {
                            hidden.push(this.ColumnStates[i].RawName);
                        }
                        else {
                            shown.push(this.ColumnStates[i].RawName);
                        }
                    }
                    query.AdditionalData['HideoutHidden'] = hidden.join(',');
                    query.AdditionalData['HideoutShown'] = shown.join(',');
                };
                HideoutPlugin.prototype.hideColumnInstance = function (c) {
                    if (!c)
                        return;
                    this._columnStates[c.RawName].Visible = false;
                    this._columnStates[c.RawName].DoesNotExists = false;
                    this.MasterTable.Renderer.Modifier.hideHeader(c);
                    this.MasterTable.Renderer.Modifier.hidePluginsByPosition("filter-" + c.RawName);
                    if (this._isInitializing)
                        return;
                    this.MasterTable.Renderer.Modifier.hideCellsByColumn(c);
                    if (this.Configuration.ColumnInitiatingReload.indexOf(c.RawName) > -1)
                        this.MasterTable.Controller.reload();
                    this.MasterTable.Renderer.Modifier.redrawPlugin(this);
                };
                HideoutPlugin.prototype.showColumnInstance = function (c) {
                    if (!c)
                        return;
                    this._columnStates[c.RawName].Visible = true;
                    var wasNotExist = this._columnStates[c.RawName].DoesNotExists;
                    this._columnStates[c.RawName].DoesNotExists = false;
                    this.MasterTable.Renderer.Modifier.showHeader(c);
                    this.MasterTable.Renderer.Modifier.showPluginsByPosition("filter-" + c.RawName);
                    if (this._isInitializing)
                        return;
                    if (wasNotExist) {
                        if (this.Configuration.ColumnInitiatingReload.indexOf(c.RawName) > -1) {
                            this.MasterTable.Controller.redrawVisibleData();
                            this.MasterTable.Controller.reload();
                        }
                        else {
                            this.MasterTable.Controller.redrawVisibleData();
                        }
                    }
                    else {
                        this.MasterTable.Renderer.Modifier.showCellsByColumn(c);
                        if (this.Configuration.ColumnInitiatingReload.indexOf(c.RawName) > -1) {
                            this.MasterTable.Controller.reload();
                        }
                    }
                    this.MasterTable.Renderer.Modifier.redrawPlugin(this);
                };
                HideoutPlugin.prototype.onBeforeDataRendered = function () {
                    for (var i = 0; i < this.ColumnStates.length; i++) {
                        var col = this.MasterTable.InstanceManager.Columns[this.ColumnStates[i].RawName];
                        if (!this.ColumnStates[i].Visible) {
                            col.Configuration.IsDataOnly = true;
                        }
                        else {
                            col.Configuration.IsDataOnly = false;
                        }
                    }
                };
                HideoutPlugin.prototype.onDataRendered = function () {
                    for (var i = 0; i < this.ColumnStates.length; i++) {
                        if (!this.ColumnStates[i].Visible)
                            this.ColumnStates[i].DoesNotExists = true;
                    }
                    this.MasterTable.Renderer.Modifier.redrawPlugin(this);
                };
                HideoutPlugin.prototype.onLayourRendered = function () {
                    for (var j = 0; j < this.ColumnStates.length; j++) {
                        if (this.Configuration.HiddenColumns[this.ColumnStates[j].RawName]) {
                            this.hideColumnByName(this.ColumnStates[j].RawName);
                        }
                    }
                    this._isInitializing = false;
                };
                HideoutPlugin.prototype.init = function (masterTable) {
                    _super.prototype.init.call(this, masterTable);
                    this.MasterTable.Loader.registerQueryPartProvider(this);
                    for (var i = 0; i < this.Configuration.HideableColumnsNames.length; i++) {
                        var hideable = this.Configuration.HideableColumnsNames[i];
                        var col = this.MasterTable.InstanceManager.Columns[hideable];
                        var instanceInfo = {
                            DoesNotExists: this.Configuration.HiddenColumns.hasOwnProperty(hideable),
                            Visible: true,
                            RawName: hideable,
                            Name: col.Configuration.Title
                        };
                        if (col.Configuration.IsDataOnly) {
                            throw new Error("Column " + col.RawName + " is .DataOnly but\nincluded into hideable columns list.\n.DataOnly columns are invalid for Hideout plugin. Please remove it from selectable columns list");
                        }
                        this._columnStates[hideable] = instanceInfo;
                        this.ColumnStates.push(instanceInfo);
                    }
                };
                HideoutPlugin.prototype.renderContent = function (templatesProvider) {
                    return this.defaultRender(templatesProvider);
                };
                HideoutPlugin.prototype.subscribe = function (e) {
                    e.DataRendered.subscribeAfter(this.onDataRendered.bind(this), 'hideout');
                    e.DataRendered.subscribeBefore(this.onBeforeDataRendered.bind(this), 'hideout');
                    e.LayoutRendered.subscribeAfter(this.onLayourRendered.bind(this), 'hideout');
                };
                HideoutPlugin.prototype.ifColVisibleHelper = function (columnName, opts) {
                    var visible = false;
                    if (this._isInitializing) {
                        visible = !this.Configuration.HiddenColumns.hasOwnProperty(columnName);
                    }
                    else {
                        for (var i = 0; i < this.ColumnStates.length; i++) {
                            if (this.ColumnStates[i].RawName === columnName) {
                                visible = this.ColumnStates[i].Visible;
                                break;
                            }
                        }
                    }
                    if (visible)
                        return opts.fn(this);
                    else
                        return opts.inverse(this);
                };
                HideoutPlugin.prototype.registerAdditionalHelpers = function (hb) {
                    hb.registerHelper('ifColVisible', this.ifColVisibleHelper.bind(this));
                };
                return HideoutPlugin;
            }(Plugins.PluginBase));
            Hideout.HideoutPlugin = HideoutPlugin;
            PowerTables.ComponentsContainer.registerComponent('Hideout', HideoutPlugin);
        })(Hideout = Plugins.Hideout || (Plugins.Hideout = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var Hierarchy;
        (function (Hierarchy) {
            var HierarchyPlugin = (function (_super) {
                __extends(HierarchyPlugin, _super);
                function HierarchyPlugin() {
                    _super.apply(this, arguments);
                    this._hierarchyFiltered = false;
                    this._isFunctionsStolen = false;
                    this._stolenFilterFunctions = [];
                }
                HierarchyPlugin.prototype.expandSubtree = function (args) {
                    this.toggleSubtreeByObject(this.MasterTable.DataHolder.localLookupDisplayedData(args.DisplayingRowIndex).DataObject, true, args.DisplayingRowIndex);
                };
                HierarchyPlugin.prototype.collapseSubtree = function (args) {
                    this.toggleSubtreeByObject(this.MasterTable.DataHolder.localLookupDisplayedData(args.DisplayingRowIndex).DataObject, false, args.DisplayingRowIndex);
                };
                HierarchyPlugin.prototype.toggleSubtree = function (args) {
                    this.toggleSubtreeByObject(this.MasterTable.DataHolder.localLookupDisplayedData(args.DisplayingRowIndex).DataObject, null, args.DisplayingRowIndex);
                };
                HierarchyPlugin.prototype.toggleSubtreeByObject = function (dataObject, turnOpen, index) {
                    if (dataObject == null || dataObject == undefined)
                        return;
                    if (index == null || index == undefined) {
                        var lookup = this.MasterTable.DataHolder.localLookupDisplayedDataObject(dataObject);
                        index = lookup.DisplayedIndex;
                    }
                    if (turnOpen == null || turnOpen == undefined)
                        turnOpen = !dataObject.IsVisible;
                    if (dataObject.IsExpanded === turnOpen)
                        return;
                    if (turnOpen)
                        this.expand(dataObject, index);
                    else
                        this.collapse(dataObject, index);
                };
                HierarchyPlugin.prototype.expand = function (dataObject, index) {
                    var _this = this;
                    dataObject.IsExpanded = true;
                    if (this.Configuration.ExpandBehavior === Hierarchy.NodeExpandBehavior.AlwaysLoadRemotely ||
                        ((dataObject.ChildrenCount > 0) && (!dataObject._subtree) || (dataObject._subtree.length === 0))) {
                        dataObject.IsLoading = true;
                        if (index >= 0)
                            this.MasterTable.Controller.redrawVisibleDataObject(dataObject, index);
                        this.MasterTable.Loader.requestServer('GetHierarchyChildren', function (d) {
                            var children = d.HierarchyItems;
                            for (var i = 0; i < children.length; i++) {
                                children[i].IsVisible = true;
                                children[i]._parent = dataObject;
                                children[i]._subtree = [];
                            }
                            //var ar: PowerTables.ITableAdjustment = { todo
                            //    Updates: children,
                            //};
                            //dataObject.IsLoading = false;
                            //this.MasterTable.DataHolder.proceedAdjustments(ar);
                            _this.refilterStoredData();
                            _this.MasterTable.Controller.redrawVisibleData();
                        }, function (q) {
                            q.AdditionalData['HierarchyParent'] = dataObject.RootKey;
                            return q;
                        });
                        return;
                    }
                    this.toggleVisibleRec(dataObject);
                    this.refilterStoredData();
                    this.MasterTable.Controller.redrawVisibleData();
                };
                HierarchyPlugin.prototype.toggleVisibleRec = function (dataObject) {
                    for (var j = 0; j < dataObject._subtree.length; j++) {
                        dataObject._subtree[j].IsVisible = true;
                        if (dataObject._subtree[j].IsExpanded) {
                            this.toggleVisibleRec(dataObject._subtree[j]);
                        }
                    }
                };
                HierarchyPlugin.prototype.collapse = function (dataObject, index) {
                    this.collapseChildren(dataObject);
                    dataObject.IsExpanded = false;
                    if (index >= 0) {
                        this.MasterTable.Controller.redrawVisibleDataObject(dataObject, index);
                    }
                };
                HierarchyPlugin.prototype.collapseChildren = function (dataObject) {
                    if (!dataObject._subtree || dataObject._subtree.length === 0)
                        return;
                    for (var i = 0; i < dataObject._subtree.length; i++) {
                        var obj = dataObject._subtree[i];
                        if (!obj.IsVisible)
                            continue;
                        this.collapseChildren(obj);
                        obj.IsVisible = false;
                        var displayingIdx = this.MasterTable.DataHolder.localLookupDisplayedDataObject(obj);
                        if (!displayingIdx.IsCurrentlyDisplaying)
                            continue;
                        this.MasterTable.Renderer.Modifier.destroyRowByIndex(displayingIdx.DisplayedIndex);
                    }
                };
                HierarchyPlugin.prototype.init = function (masterTable) {
                    _super.prototype.init.call(this, masterTable);
                    this.MasterTable.DataHolder.registerClientOrdering("TreeOrder", this.hierarchicalOrder.bind(this));
                };
                HierarchyPlugin.prototype.hierarchicalOrder = function (a, b) {
                    if (!this._hierarchyFiltered)
                        return 0;
                    return a._order - b._order;
                };
                HierarchyPlugin.prototype.refilterStoredData = function () {
                    this._hierarchyFiltered = true;
                    this.MasterTable.DataHolder.RecentClientQuery.Orderings['TreeOrder'] = PowerTables.Ordering.Ascending;
                    this.MasterTable.DataHolder.filterStoredDataWithPreviousQuery();
                    delete this.MasterTable.DataHolder.RecentClientQuery.Orderings['TreeOrder'];
                    this._hierarchyFiltered = false;
                };
                HierarchyPlugin.prototype.stackOrder = function (data) {
                    var stack = [];
                    for (var k = 0; k < data.length; k++) {
                        var deep = 0;
                        var cNode = data[k];
                        while (cNode._parent) {
                            deep++;
                            cNode = cNode._parent;
                        }
                        if (deep === 0) {
                            stack.push(data[k]);
                        }
                        data[k].Deepness = deep;
                    }
                    var stackIdx = 0;
                    while (stack.length > 0) {
                        var stackCur = stack.pop();
                        stackCur._order = stackIdx++;
                        if (stackCur._subtree) {
                            for (var l = 1; l <= stackCur._subtree.length; l++) {
                                stack.push(stackCur._subtree[stackCur._subtree.length - l]);
                            }
                        }
                    }
                    this.refilterStoredData();
                };
                HierarchyPlugin.prototype.recalculateSubtreeReferences = function (e) {
                    if (this._hierarchyFiltered)
                        return;
                    if (this.MasterTable.DataHolder.Ordered == null || this.MasterTable.DataHolder.Ordered.length == 1 || this.MasterTable.DataHolder.Ordered.length == 0) {
                        return;
                    }
                    var data = e.Ordered;
                    for (var i = 0; i < data.length; i++) {
                        var obj = data[i];
                        obj._subtree = [];
                        for (var j = 0; j < data.length; j++) {
                            if (data[j].ParentKey === obj.RootKey) {
                                obj._subtree.push(data[j]);
                                data[j]._parent = obj;
                                if (!obj.IsExpanded)
                                    data[j].IsVisible = false;
                                else
                                    data[j].IsVisible = true;
                            }
                        }
                    }
                    this.stackOrder(data);
                };
                HierarchyPlugin.prototype.stealFilterFunctions = function () {
                    if (this._isFunctionsStolen)
                        return;
                    var filters = this.MasterTable.DataHolder.getClientFilters();
                    var idPredicate = function (a, b) { return true; };
                    for (var i = 0; i < filters.length; i++) {
                        this._stolenFilterFunctions.push({
                            filterFun: filters[i].filterPredicate,
                            Filter: filters[i]
                        });
                        filters[i].filterPredicate = idPredicate;
                    }
                    this.MasterTable.DataHolder.registerClientFilter(this);
                    this._isFunctionsStolen = true;
                };
                HierarchyPlugin.prototype.onAfterClientDataProcessing = function (e) {
                    this.recalculateSubtreeReferences(e.EventArgs);
                };
                HierarchyPlugin.prototype.subscribe = function (e) {
                    e.ClientDataProcessing.subscribeAfter(this.onAfterClientDataProcessing.bind(this), 'Hierarchy');
                    e.ClientDataProcessing.subscribeBefore(this.onBeforeClientDataProcessing.bind(this), 'Hierarchy');
                    e.LayoutRendered.subscribeAfter(this.onAfterLayoutRendered.bind(this), 'Hierarchy');
                };
                HierarchyPlugin.prototype.onAfterLayoutRendered = function () {
                    this.stealFilterFunctions();
                };
                HierarchyPlugin.prototype.filterPredicate = function (rowObject, query) {
                    if (rowObject._filtered)
                        return rowObject._acceptable;
                    var searchAlsoCollapsed = this.Configuration.CollapsedNodeFilterBehavior === Hierarchy.TreeCollapsedNodeFilterBehavior.IncludeCollapsed;
                    if ((!searchAlsoCollapsed) && !rowObject.IsVisible)
                        return false;
                    var acceptableFilter = true;
                    for (var i = 0; i < this._stolenFilterFunctions.length; i++) {
                        var fn = this._stolenFilterFunctions[i];
                        var v = fn.filterFun.apply(fn.Filter, [rowObject, query]);
                        if (!v) {
                            acceptableFilter = false;
                            break;
                        }
                    }
                    var acceptableChild = false;
                    if (rowObject._subtree) {
                        if (searchAlsoCollapsed || rowObject.IsExpanded) {
                            for (var j = 0; j < rowObject._subtree.length; j++) {
                                var childAcceptable = this.filterPredicate(rowObject._subtree[j], query);
                                if (childAcceptable) {
                                    acceptableChild = true;
                                    if (searchAlsoCollapsed) {
                                        rowObject._subtree[j].IsVisible = true;
                                        rowObject.IsExpanded = true;
                                    }
                                }
                            }
                        }
                    }
                    var acceptableParent = false;
                    //var cNode = rowObject;
                    //while (cNode._parent) {
                    //    var parentAcceptable = this.filterPredicate(cNode._parent, query);
                    //    if (parentAcceptable) {
                    //        acceptableParent = true;
                    //        break;
                    //    }
                    //    cNode = cNode._parent;
                    //}
                    rowObject._filtered = true;
                    rowObject._acceptable = acceptableChild || acceptableFilter;
                    if (rowObject._acceptable && rowObject._parent) {
                        rowObject._parent.filtered = true;
                        rowObject._acceptable = true;
                    }
                    return rowObject._acceptable;
                };
                HierarchyPlugin.prototype.onBeforeClientDataProcessing = function () {
                    for (var i = 0; i < this.MasterTable.DataHolder.StoredData.length; i++) {
                        delete this.MasterTable.DataHolder.StoredData[i]['_filtered'];
                    }
                };
                return HierarchyPlugin;
            }(Plugins.PluginBase));
            Hierarchy.HierarchyPlugin = HierarchyPlugin;
            PowerTables.ComponentsContainer.registerComponent('Hierarchy', HierarchyPlugin);
        })(Hierarchy = Plugins.Hierarchy || (Plugins.Hierarchy = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var Limit;
        (function (Limit) {
            var LimitPlugin = (function (_super) {
                __extends(LimitPlugin, _super);
                function LimitPlugin() {
                    _super.apply(this, arguments);
                    this._limitSize = 0;
                    this.Sizes = [];
                }
                LimitPlugin.prototype.renderContent = function (templatesProvider) {
                    return this.defaultRender(templatesProvider);
                };
                LimitPlugin.prototype.changeLimitHandler = function (e) {
                    var limit = parseInt(e.EventArguments[0]);
                    if (isNaN(limit))
                        limit = 0;
                    this.changeLimit(limit);
                };
                LimitPlugin.prototype.changeLimit = function (limit) {
                    var changed = this._limitSize !== limit;
                    if (!changed)
                        return;
                    this._limitSize = limit;
                    var labelPair = null;
                    for (var i = 0; i < this.Sizes.length; i++) {
                        labelPair = this.Sizes[i];
                        if (labelPair.Value === limit) {
                            break;
                        }
                    }
                    if (labelPair != null)
                        this.SelectedValue = labelPair;
                    this.MasterTable.Renderer.Modifier.redrawPlugin(this);
                    if (this.Configuration.ReloadTableOnLimitChange)
                        this.MasterTable.Controller.reload();
                };
                LimitPlugin.prototype.modifyQuery = function (query, scope) {
                    var client = this.Configuration.EnableClientLimiting;
                    if (client && (scope === PowerTables.QueryScope.Client || scope === PowerTables.QueryScope.Transboundary)) {
                        query.Paging.PageSize = this._limitSize;
                    }
                    if (!client && (scope === PowerTables.QueryScope.Server || scope === PowerTables.QueryScope.Transboundary)) {
                        query.Paging.PageSize = this._limitSize;
                    }
                };
                LimitPlugin.prototype.init = function (masterTable) {
                    _super.prototype.init.call(this, masterTable);
                    var def = null;
                    for (var i = 0; i < this.Configuration.LimitValues.length; i++) {
                        var a = {
                            Value: this.Configuration.LimitValues[i],
                            Label: this.Configuration.LimitLabels[i],
                            IsSeparator: this.Configuration.LimitLabels[i] === '-'
                        };
                        this.Sizes.push(a);
                        if (a.Label === this.Configuration.DefaultValue) {
                            def = a;
                        }
                    }
                    if (def) {
                        this.SelectedValue = def;
                        this._limitSize = def.Value;
                    }
                    else {
                        this._limitSize = 0;
                    }
                    if (this.Configuration.EnableClientLimiting) {
                        this.MasterTable.DataHolder.EnableClientTake = true;
                    }
                    this.MasterTable.Events.ColumnsCreation.subscribe(this.onColumnsCreation.bind(this), 'paging');
                };
                LimitPlugin.prototype.onColumnsCreation = function () {
                    if (this.Configuration.EnableClientLimiting && !this.MasterTable.DataHolder.EnableClientSkip) {
                        var paging = null;
                        try {
                            paging = this.MasterTable.InstanceManager.getPlugin('Paging');
                        }
                        catch (a) {
                        }
                        if (paging != null)
                            throw new Error('Limit ang paging plugin must both work locally or both remote. Please enable client paging');
                    }
                };
                return LimitPlugin;
            }(PowerTables.Filters.FilterBase));
            Limit.LimitPlugin = LimitPlugin;
            PowerTables.ComponentsContainer.registerComponent('Limit', LimitPlugin);
        })(Limit = Plugins.Limit || (Plugins.Limit = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var LoadingOverlap;
        (function (LoadingOverlap) {
            var LoadingOverlapPlugin = (function (_super) {
                __extends(LoadingOverlapPlugin, _super);
                function LoadingOverlapPlugin() {
                    var _this = this;
                    _super.apply(this, arguments);
                    this._overlappingElement = [];
                    this._overlapLayer = [];
                    this._isOverlapped = false;
                    this.afterDrawn = function (e) {
                        _this.MasterTable.Events.Loading.subscribeBefore(function (e) { return _this.onBeforeLoading(e); }, 'overlapLoading');
                        _this.MasterTable.Events.DataRendered.subscribeAfter(function () { return _this.deoverlap(); }, 'overlapLoading');
                        _this.MasterTable.Events.Loading.subscribeAfter(function () { return _this.deoverlap(); }, 'overlapLoading');
                        window.addEventListener('resize', _this.updateCoordsAll.bind(_this));
                    };
                }
                LoadingOverlapPlugin.prototype.overlapAll = function () {
                    if (this._isOverlapped)
                        return;
                    this._overlapLayer = [];
                    this._overlappingElement = [];
                    for (var k in this.Configuration.Overlaps) {
                        if (this.Configuration.Overlaps.hasOwnProperty(k)) {
                            var elements = null;
                            if (k === '$All')
                                elements = [this.MasterTable.Renderer.RootElement];
                            else if (k === '$BodyOnly')
                                elements = [this.MasterTable.Renderer.BodyElement];
                            else if (k === '$Parent')
                                elements = [this.MasterTable.Renderer.RootElement.parentElement];
                            else {
                                elements = document.querySelectorAll(k);
                            }
                            var elems = [];
                            var overlappers = [];
                            for (var i = 0; i < elements.length; i++) {
                                elems.push(elements[i]);
                                overlappers.push(this.createOverlap(elements[i], this.Configuration.Overlaps[k]));
                            }
                            this._overlappingElement.push(elems);
                            this._overlapLayer.push(overlappers);
                        }
                    }
                    this._isOverlapped = true;
                };
                LoadingOverlapPlugin.prototype.createOverlap = function (efor, templateId) {
                    var element = this.MasterTable.Renderer.Modifier.createElement(this.MasterTable.Renderer.getCachedTemplate(templateId)(null));
                    var mezx = null;
                    if (this._overlappingElement.currentStyle)
                        mezx = this._overlappingElement.currentStyle.zIndex;
                    else if (window.getComputedStyle) {
                        mezx = window.getComputedStyle(element, null).zIndex;
                    }
                    element.style.position = "absolute";
                    element.style.display = "block";
                    element.style.zIndex = (parseInt(mezx) + 1).toString();
                    //document.body.appendChild(element); //todo switch
                    window.document.body.appendChild(element);
                    this.updateCoords(element, efor);
                    return element;
                };
                LoadingOverlapPlugin.prototype.updateCoords = function (overlapLayer, overlapElement) {
                    overlapLayer.style.display = "none";
                    var eo = overlapElement.getBoundingClientRect();
                    //overlapLayer.style.left = eo.left + 'px';
                    //overlapLayer.style.top = overlapElement.offsetTop + 'px';
                    overlapLayer.style.left = eo.left + 'px'; //'0px';
                    overlapLayer.style.top = eo.top + 'px'; // '0px';
                    overlapLayer.style.width = eo.width + 'px';
                    overlapLayer.style.height = eo.height + 'px';
                    overlapLayer.style.display = "block";
                };
                LoadingOverlapPlugin.prototype.updateCoordsAll = function () {
                    for (var j = 0; j < this._overlapLayer.length; j++) {
                        for (var l = 0; l < this._overlapLayer[j].length; l++) {
                            this.updateCoords(this._overlapLayer[j][l], this._overlappingElement[j][l]);
                        }
                    }
                };
                LoadingOverlapPlugin.prototype.deoverlap = function () {
                    if (!this._isOverlapped)
                        return;
                    for (var j = 0; j < this._overlapLayer.length; j++) {
                        for (var l = 0; l < this._overlapLayer[j].length; l++) {
                            window.document.body.removeChild(this._overlapLayer[j][l]);
                        }
                    }
                    this._overlapLayer = [];
                    this._overlappingElement = [];
                    this._isOverlapped = false;
                };
                LoadingOverlapPlugin.prototype.onBeforeLoading = function (e) {
                    this.overlapAll();
                };
                return LoadingOverlapPlugin;
            }(Plugins.PluginBase));
            LoadingOverlap.LoadingOverlapPlugin = LoadingOverlapPlugin;
            PowerTables.ComponentsContainer.registerComponent('LoadingOverlap', LoadingOverlapPlugin);
        })(LoadingOverlap = Plugins.LoadingOverlap || (Plugins.LoadingOverlap = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var Loading;
        (function (Loading) {
            var LoadingPlugin = (function (_super) {
                __extends(LoadingPlugin, _super);
                function LoadingPlugin() {
                    _super.apply(this, arguments);
                }
                LoadingPlugin.prototype.subscribe = function (e) {
                    var _this = this;
                    e.Loading.subscribeBefore(function () { return _this.showLoadingIndicator(); }, 'loading');
                    e.Loading.subscribeAfter(function () { return _this.hideLoadingIndicator(); }, 'loading');
                    e.LayoutRendered.subscribeAfter(function () {
                        _this.hideLoadingIndicator();
                    }, 'loading');
                };
                LoadingPlugin.prototype.showLoadingIndicator = function () {
                    this.MasterTable.Renderer.Modifier.showElement(this.BlinkElement);
                };
                LoadingPlugin.prototype.hideLoadingIndicator = function () {
                    this.MasterTable.Renderer.Modifier.hideElement(this.BlinkElement);
                };
                LoadingPlugin.prototype.renderContent = function (templatesProvider) {
                    return this.defaultRender(templatesProvider);
                };
                LoadingPlugin.Id = 'Loading';
                return LoadingPlugin;
            }(Plugins.PluginBase));
            Loading.LoadingPlugin = LoadingPlugin;
            PowerTables.ComponentsContainer.registerComponent('Loading', LoadingPlugin);
        })(Loading = Plugins.Loading || (Plugins.Loading = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var MouseSelect;
        (function (MouseSelect) {
            var MouseSelectPlugin = (function (_super) {
                __extends(MouseSelectPlugin, _super);
                function MouseSelectPlugin() {
                    var _this = this;
                    _super.apply(this, arguments);
                    this._isAwaitingSelection = false;
                    this.afterDrawn = function (a) {
                        PowerTables.Services.EventsDelegatorService.addHandler(_this.MasterTable.Renderer.RootElement, "mousedown", function (e) {
                            _this._isAwaitingSelection = true;
                            setTimeout(function () {
                                if (!_this._isAwaitingSelection)
                                    return;
                                if (!_this._isSelecting) {
                                    e.stopPropagation();
                                    e.preventDefault();
                                }
                                _this.selectStart(e.pageX, e.pageY);
                            }, 10);
                            return true;
                        });
                        PowerTables.Services.EventsDelegatorService.addHandler(_this.MasterTable.Renderer.RootElement, "mousemove", function (e) {
                            if (_this._isSelecting) {
                                e.stopPropagation();
                                e.preventDefault();
                            }
                            _this.move(e.pageX, e.pageY);
                            return true;
                        });
                        PowerTables.Services.EventsDelegatorService.addHandler(document.documentElement, "mouseup", function (e) {
                            _this._isAwaitingSelection = false;
                            _this.selectEnd();
                            if (_this._isSelecting) {
                                e.stopPropagation();
                                e.preventDefault();
                            }
                            return true;
                        });
                    };
                }
                MouseSelectPlugin.prototype.init = function (masterTable) {
                    _super.prototype.init.call(this, masterTable);
                };
                MouseSelectPlugin.prototype.selectStart = function (x, y) {
                    if (this._isSelecting) {
                        this.selectEnd();
                        return;
                    }
                    this.selectPane = this.MasterTable.Renderer.Modifier
                        .createElement(this.MasterTable.Renderer.getCachedTemplate(this.RawConfig.TemplateId)(null));
                    this.selectPane.style.left = x + 'px';
                    this.selectPane.style.top = y + 'px';
                    this.selectPane.style.width = '0';
                    this.selectPane.style.height = '0';
                    this.selectPane.style.position = 'absolute';
                    this.selectPane.style.zIndex = '9999';
                    this.selectPane.style.pointerEvents = 'none';
                    this.originalX = x;
                    this.originalY = y;
                    document.body.appendChild(this.selectPane);
                    this._isSelecting = true;
                };
                MouseSelectPlugin.prototype.move = function (x, y) {
                    if (!this._isSelecting)
                        return;
                    var cx = (x <= this.originalX) ? x : this.originalX;
                    var cy = (y <= this.originalY) ? y : this.originalY;
                    var nx = (x >= this.originalX) ? x : this.originalX;
                    var ny = (y >= this.originalY) ? y : this.originalY;
                    this.selectPane.style.left = cx + 'px';
                    this.selectPane.style.top = cy + 'px';
                    this.selectPane.style.width = (nx - cx) + 'px';
                    this.selectPane.style.height = (ny - cy) + 'px';
                    //this.originalX = cx;
                    //this.originalY = cy;
                };
                MouseSelectPlugin.prototype.selectEnd = function () {
                    if (!this._isSelecting)
                        return;
                    document.body.removeChild(this.selectPane);
                    this._isSelecting = false;
                };
                return MouseSelectPlugin;
            }(PowerTables.Plugins.PluginBase));
            MouseSelect.MouseSelectPlugin = MouseSelectPlugin;
            PowerTables.ComponentsContainer.registerComponent('MouseSelect', MouseSelectPlugin);
        })(MouseSelect = Plugins.MouseSelect || (Plugins.MouseSelect = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var Ordering;
        (function (Ordering) {
            var OrderingPlugin = (function (_super) {
                __extends(OrderingPlugin, _super);
                function OrderingPlugin() {
                    _super.apply(this, arguments);
                    this._clientOrderings = {};
                    this._serverOrderings = {};
                }
                OrderingPlugin.prototype.subscribe = function (e) {
                    var _this = this;
                    e.ColumnsCreation.subscribe(function (v) {
                        _this.overrideHeadersTemplates(v.EventArgs);
                    }, 'ordering');
                };
                OrderingPlugin.prototype.overrideHeadersTemplates = function (columns) {
                    var _this = this;
                    var templId = this.RawConfig.TemplateId;
                    for (var ck in columns) {
                        if (columns.hasOwnProperty(ck)) {
                            var ordering = this.Configuration.DefaultOrderingsForColumns[ck];
                            this.updateOrdering(ck, ordering);
                            if (columns[ck].Configuration.IsDataOnly)
                                continue;
                            if (ordering == null || ordering == undefined)
                                continue;
                            var newHeader = {
                                Column: columns[ck],
                                switchOrdering: function (e) {
                                    _this.switchOrderingForColumn(e.Receiver.Column.RawName);
                                },
                                TemplateIdOverride: templId,
                                IsClientOrdering: this.isClient(ck)
                            };
                            this.specifyOrdering(newHeader, ordering);
                            columns[ck].Header = newHeader;
                        }
                    }
                };
                OrderingPlugin.prototype.updateOrdering = function (columnName, ordering) {
                    if (this.isClient(columnName))
                        this._clientOrderings[columnName] = ordering;
                    else
                        this._serverOrderings[columnName] = ordering;
                };
                OrderingPlugin.prototype.specifyOrdering = function (object, ordering) {
                    object.IsNeutral = object.IsDescending = object.IsAscending = false;
                    switch (ordering) {
                        case PowerTables.Ordering.Neutral:
                            object.IsNeutral = true;
                            break;
                        case PowerTables.Ordering.Descending:
                            object.IsDescending = true;
                            break;
                        case PowerTables.Ordering.Ascending:
                            object.IsAscending = true;
                            break;
                    }
                };
                OrderingPlugin.prototype.isClient = function (columnName) {
                    return this.Configuration.ClientSortableColumns.hasOwnProperty(columnName);
                };
                OrderingPlugin.prototype.switchOrderingForColumn = function (columnName) {
                    if (this.Configuration.DefaultOrderingsForColumns[columnName] == null || this.Configuration.DefaultOrderingsForColumns[columnName] == undefined)
                        throw new Error("Ordering is not configured for column " + columnName);
                    var orderingsCollection = this.isClient(columnName) ? this._clientOrderings : this._serverOrderings;
                    var next = this.nextOrdering(orderingsCollection[columnName]);
                    this.setOrderingForColumn(columnName, next);
                };
                OrderingPlugin.prototype.setOrderingForColumn = function (columnName, ordering) {
                    var coolHeader = this.MasterTable.InstanceManager.Columns[columnName].Header;
                    this.specifyOrdering(coolHeader, ordering);
                    this.updateOrdering(columnName, ordering);
                    this.MasterTable.Renderer.Modifier.redrawHeader(coolHeader.Column);
                    this.MasterTable.Controller.reload();
                };
                OrderingPlugin.prototype.nextOrdering = function (currentOrdering) {
                    switch (currentOrdering) {
                        case PowerTables.Ordering.Neutral: return PowerTables.Ordering.Ascending;
                        case PowerTables.Ordering.Descending: return PowerTables.Ordering.Neutral;
                        case PowerTables.Ordering.Ascending: return PowerTables.Ordering.Descending;
                    }
                };
                OrderingPlugin.prototype.makeDefaultOrderingFunction = function (fieldName) {
                    var self = this;
                    return (function (field) {
                        return function (a, b) {
                            var x = a[field], y = b[field];
                            if (x === y)
                                return 0;
                            if (x == null || x == undefined)
                                return -1;
                            if (y == null || y == undefined)
                                return 1;
                            if (typeof x === "string") {
                                return x.localeCompare(y);
                            }
                            return (x > y) ? 1 : -1;
                        };
                    })(fieldName);
                };
                OrderingPlugin.prototype.init = function (masterTable) {
                    _super.prototype.init.call(this, masterTable);
                    var hasClientOrderings = false;
                    var fn;
                    for (var cls in this.Configuration.ClientSortableColumns) {
                        if (this.Configuration.ClientSortableColumns.hasOwnProperty(cls)) {
                            hasClientOrderings = true;
                            fn = this.Configuration.ClientSortableColumns[cls];
                            if (!fn) {
                                fn = this.makeDefaultOrderingFunction(cls);
                                this.Configuration.ClientSortableColumns[cls] = fn;
                            }
                            this.MasterTable.DataHolder.registerClientOrdering(cls, fn);
                        }
                    }
                    if (hasClientOrderings) {
                        // if we have at least 1 client ordering then we have to reorder whole 
                        // received data on client
                        // to avoid client ordering priority
                        for (var serverColumn in this.Configuration.DefaultOrderingsForColumns) {
                            if (this.isClient(serverColumn))
                                continue;
                            fn = this.makeDefaultOrderingFunction(serverColumn);
                            this.MasterTable.DataHolder.registerClientOrdering(serverColumn, fn);
                        }
                    }
                };
                OrderingPlugin.prototype.mixinOrderings = function (orderingsCollection, query) {
                    for (var clo in orderingsCollection) {
                        if (orderingsCollection.hasOwnProperty(clo)) {
                            query.Orderings[clo] = orderingsCollection[clo];
                        }
                    }
                };
                OrderingPlugin.prototype.modifyQuery = function (query, scope) {
                    this.mixinOrderings(this._serverOrderings, query);
                    if (scope === PowerTables.QueryScope.Client || scope === PowerTables.QueryScope.Transboundary) {
                        this.mixinOrderings(this._clientOrderings, query);
                    }
                };
                return OrderingPlugin;
            }(PowerTables.Filters.FilterBase));
            Ordering.OrderingPlugin = OrderingPlugin;
            PowerTables.ComponentsContainer.registerComponent('Ordering', OrderingPlugin);
        })(Ordering = Plugins.Ordering || (Plugins.Ordering = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var Paging;
        (function (Paging) {
            var PagingPlugin = (function (_super) {
                __extends(PagingPlugin, _super);
                function PagingPlugin() {
                    _super.apply(this, arguments);
                    this._selectedPage = 0;
                }
                PagingPlugin.prototype.CurrentPage = function () { return this._selectedPage + 1; };
                PagingPlugin.prototype.TotalPages = function () { return this._totalPages; };
                PagingPlugin.prototype.PageSize = function () { return this._pageSize; };
                PagingPlugin.prototype.getCurrentPage = function () {
                    return this._selectedPage;
                };
                PagingPlugin.prototype.getTotalPages = function () {
                    return this._totalPages;
                };
                PagingPlugin.prototype.getPageSize = function () {
                    return this._pageSize;
                };
                PagingPlugin.prototype.onFilterGathered = function (e) {
                    this._pageSize = e.EventArgs.Query.Paging.PageSize;
                };
                PagingPlugin.prototype.onColumnsCreation = function () {
                    if (this.Configuration.EnableClientPaging && !this.MasterTable.DataHolder.EnableClientTake) {
                        var limit = null;
                        try {
                            limit = this.MasterTable.InstanceManager.getPlugin('Limit');
                        }
                        catch (a) { }
                        if (limit != null)
                            throw new Error('Paging ang Limit plugins must both work locally or both remote. Please enable client limiting');
                    }
                };
                PagingPlugin.prototype.onResponse = function (e) {
                    this._selectedPage = e.EventArgs.Data.PageIndex;
                    var tp = e.EventArgs.Data.ResultsCount / this._pageSize;
                    if (tp !== parseInt(tp)) {
                        tp = parseInt(tp) + 1;
                    }
                    this._totalPages = tp;
                    this.MasterTable.Renderer.Modifier.redrawPlugin(this);
                };
                PagingPlugin.prototype.onClientDataProcessing = function (e) {
                    var tp = e.EventArgs.Filtered.length / this._pageSize;
                    if (tp !== parseInt(tp)) {
                        tp = parseInt(tp) + 1;
                    }
                    if (tp < this._selectedPage) {
                        this._selectedPage = 0;
                    }
                    this._totalPages = tp;
                    this.MasterTable.Renderer.Modifier.redrawPlugin(this);
                };
                PagingPlugin.prototype.goToPage = function (page) {
                    this._selectedPage = parseInt(page);
                    this.MasterTable.Controller.reload();
                };
                PagingPlugin.prototype.gotoPageClick = function (e) {
                    if (this.GotoInput) {
                        var v = this.GotoInput.value;
                        v = (parseInt(v) - 1).toString();
                        this.goToPage(v);
                    }
                };
                PagingPlugin.prototype.navigateToPage = function (e) {
                    this.goToPage(e.EventArguments[0]);
                };
                PagingPlugin.prototype.nextClick = function (e) {
                    if (this._selectedPage < this._totalPages)
                        this.goToPage((this._selectedPage + 1).toString());
                };
                PagingPlugin.prototype.previousClick = function (e) {
                    if (this._selectedPage > 0)
                        this.goToPage((this._selectedPage - 1).toString());
                };
                PagingPlugin.prototype.constructPagesElements = function () {
                    var a = [];
                    var total = this._totalPages;
                    var cur = this._selectedPage;
                    var pdiff = this.Configuration.PagesToHideUnderPeriod;
                    if (total > 1) {
                        this.Shown = true;
                        if (!this.Configuration.ArrowsMode) {
                            if (this.Configuration.UseFirstLastPage)
                                a.push({ Page: 0, First: true });
                            if (cur > 0)
                                a.push({ Page: 0, Prev: true });
                            if (this.Configuration.UsePeriods) {
                                if (cur - 1 >= pdiff)
                                    a.push({ Page: 0, Period: true });
                                if (cur - 1 > 0)
                                    a.push({ Page: cur - 1, InActivePage: true });
                                a.push({ Page: cur, ActivePage: true });
                                if (cur + 1 < total)
                                    a.push({ Page: cur + 1, InActivePage: true });
                                if (total - (cur + 1) >= pdiff)
                                    a.push({ Page: 0, Period: true });
                            }
                            else {
                                for (var i = 0; i < total; i++) {
                                    if (cur === i) {
                                        a.push({ Page: i, ActivePage: true });
                                    }
                                    else {
                                        a.push({ Page: i, InActivePage: true });
                                    }
                                }
                            }
                            if (cur < total - 1)
                                a.push({ Page: 0, Next: true });
                            if (this.Configuration.UseFirstLastPage)
                                a.push({ Page: total - 1, Last: true });
                            var disFunction = function () { return this.Page + 1; };
                            for (var j = 0; j < a.length; j++) {
                                a[j].DisPage = disFunction;
                            }
                            this.Pages = a;
                        }
                        else {
                            this.NextArrow = cur < total - 1;
                            this.PrevArrow = cur > 0;
                        }
                    }
                    else {
                        this.Shown = false;
                    }
                };
                PagingPlugin.prototype.renderContent = function (templatesProvider) {
                    this.constructPagesElements();
                    return templatesProvider.getCachedTemplate('paging')(this);
                };
                PagingPlugin.prototype.validateGotopage = function () {
                    var v = this.GotoInput.value;
                    var i = parseInt(v);
                    var valid = !isNaN(i) && (i > 0) && (i <= this._totalPages);
                    if (valid) {
                        this.VisualStates.normalState();
                    }
                    else {
                        this.VisualStates.changeState('invalid');
                    }
                };
                PagingPlugin.prototype.modifyQuery = function (query, scope) {
                    if (this.Configuration.EnableClientPaging && scope === PowerTables.QueryScope.Client) {
                        query.Paging.PageIndex = this._selectedPage;
                    }
                    if ((!this.Configuration.EnableClientPaging) && scope !== PowerTables.QueryScope.Client) {
                        query.Paging.PageIndex = this._selectedPage;
                    }
                };
                PagingPlugin.prototype.init = function (masterTable) {
                    _super.prototype.init.call(this, masterTable);
                    if (!this.Configuration.EnableClientPaging) {
                        this.MasterTable.Events.QueryGathering.subscribeAfter(this.onFilterGathered.bind(this), 'paging');
                    }
                    else {
                        this.MasterTable.Events.ClientQueryGathering.subscribeAfter(this.onFilterGathered.bind(this), 'paging');
                    }
                    if (!this.Configuration.EnableClientPaging) {
                        this.MasterTable.Events.DataReceived.subscribe(this.onResponse.bind(this), 'paging');
                    }
                    else {
                        this.MasterTable.Events.ClientDataProcessing.subscribeAfter(this.onClientDataProcessing.bind(this), 'paging');
                    }
                    this.MasterTable.Events.ColumnsCreation.subscribe(this.onColumnsCreation.bind(this), 'paging');
                    if (this.Configuration.EnableClientPaging) {
                        this.MasterTable.DataHolder.EnableClientSkip = true;
                    }
                };
                return PagingPlugin;
            }(PowerTables.Filters.FilterBase));
            Paging.PagingPlugin = PagingPlugin;
            PowerTables.ComponentsContainer.registerComponent('Paging', PagingPlugin);
        })(Paging = Plugins.Paging || (Plugins.Paging = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        /**
         * Base class for plugins.
         * It contains necessary infrastructure for convinence of plugins creation
         */
        var PluginBase = (function () {
            function PluginBase() {
                /**
                 * Function that is called after plugin is drawn
                 *
                 * @param e Event arguments
                 */
                this.afterDrawn = null;
            }
            PluginBase.prototype.init = function (masterTable) {
                this.MasterTable = masterTable;
                this.Configuration = this.RawConfig.Configuration;
                if (masterTable.Events != null)
                    this.subscribe(masterTable.Events);
                this.registerAdditionalHelpers(masterTable.Renderer.HandlebarsInstance);
            };
            /**
             * Events subscription method.
             * In derived class here should be subscription to various events
             *
             * @param e Events manager
             */
            PluginBase.prototype.subscribe = function (e) {
                if (this.afterDrawn != null) {
                    this.MasterTable.Events.LayoutRendered.subscribeAfter(this.afterDrawn.bind(this), this.RawConfig.PluginId);
                }
            };
            /**
             * In this method you can register any additional Handlebars.js helpers in case of your
             * templates needs ones
             *
             * @param hb Handlebars instance
             * @returns {}
             */
            PluginBase.prototype.registerAdditionalHelpers = function (hb) { };
            /**
             * Default render function using TemplateId from plugin configuration
             * @param e Templates provider
             * @returns content string
             */
            PluginBase.prototype.defaultRender = function (e) {
                return e.getCachedTemplate(this.RawConfig.TemplateId)(this);
            };
            return PluginBase;
        }());
        Plugins.PluginBase = PluginBase;
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var RegularSelect;
        (function (RegularSelect) {
            var RegularSelectPlugin = (function (_super) {
                __extends(RegularSelectPlugin, _super);
                function RegularSelectPlugin() {
                    _super.apply(this, arguments);
                    this._isSelecting = false;
                    this._reset = false;
                    this._prevUiCols = [];
                }
                RegularSelectPlugin.prototype.init = function (masterTable) {
                    _super.prototype.init.call(this, masterTable);
                };
                RegularSelectPlugin.prototype.startSelection = function (e) {
                    this._isSelecting = true;
                    this._startRow = e.DisplayingRowIndex;
                    this._startColumn = e.ColumnIndex;
                    this._endRow = e.DisplayingRowIndex;
                    this._endColumn = this.MasterTable.InstanceManager.getColumnByOrder(e.ColumnIndex).UiOrder;
                    this._reset = false;
                    e.OriginalEvent.preventDefault();
                };
                RegularSelectPlugin.prototype.endSelection = function (e) {
                    this._isSelecting = false;
                    e.OriginalEvent.preventDefault();
                };
                RegularSelectPlugin.prototype.diff = function (row, column) {
                    var select, rngStart, rngEnd;
                    if (this.Configuration.Mode === RegularSelect.RegularSelectMode.Rows) {
                        // first lets calculate rows by difference
                        select = Math.abs(this._endRow - this._startRow) < Math.abs(row - this._startRow);
                        rngStart = row < this._endRow ? row : this._endRow;
                        rngEnd = row > this._endRow ? row : this._endRow;
                        for (var i = rngStart; i <= rngEnd; i++) {
                            this.MasterTable.Selection.toggleDisplayingRow(i, select);
                        }
                        this._endRow = row;
                        this._endColumn = column;
                    }
                    else {
                        select = Math.abs(this._endRow - this._startRow) < Math.abs(row - this._startRow);
                        rngStart = row < this._endRow ? row : this._endRow;
                        rngEnd = row > this._endRow ? row : this._endRow;
                        var selColumns = [];
                        var colMin = this._startColumn < column ? this._startColumn : column;
                        var colMax = this._startColumn > column ? this._startColumn : column;
                        var uiCols = this.MasterTable.InstanceManager.getColumnNames();
                        for (var j = colMin; j <= colMax; j++) {
                            if (!this.MasterTable.InstanceManager.Columns[uiCols[j]].Configuration.IsDataOnly) {
                                selColumns.push(this.MasterTable.InstanceManager.Columns[uiCols[j]].RawName);
                            }
                        }
                        if (!select) {
                            for (var k = rngStart; k <= rngEnd; k++) {
                                //this.MasterTable.Selection.toggleCellsByDisplayIndex(k, selColumns, false);
                                this.MasterTable.Selection.toggleDisplayingRow(k, false);
                            }
                        }
                        var rowMin = this._startRow < row ? this._startRow : row;
                        var rowMax = this._startRow > row ? this._startRow : row;
                        for (var n = rowMin; n <= rowMax; n++) {
                            this.MasterTable.Selection.setCellsByDisplayIndex(n, selColumns);
                        }
                        this._prevUiCols = selColumns;
                        this._endRow = row;
                        this._endColumn = column;
                    }
                };
                RegularSelectPlugin.prototype.move = function (e) {
                    if (!this._isSelecting)
                        return;
                    if (!this._reset) {
                        this.MasterTable.Selection.resetSelection();
                        this._reset = true;
                    }
                    this.diff(e.DisplayingRowIndex, e.ColumnIndex);
                    e.OriginalEvent.preventDefault();
                };
                return RegularSelectPlugin;
            }(PowerTables.Plugins.PluginBase));
            RegularSelect.RegularSelectPlugin = RegularSelectPlugin;
            PowerTables.ComponentsContainer.registerComponent('RegularSelect', RegularSelectPlugin);
        })(RegularSelect = Plugins.RegularSelect || (Plugins.RegularSelect = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var Reload;
        (function (Reload) {
            var ReloadPlugin = (function (_super) {
                __extends(ReloadPlugin, _super);
                function ReloadPlugin() {
                    var _this = this;
                    _super.apply(this, arguments);
                    this.afterDrawn = function (e) {
                        if (_this._renderedExternally) {
                            _this._externalReloadBtn = new ReloadButton(_this.MasterTable.Controller, _this.Configuration.ForceReload);
                            _this.MasterTable.Renderer.renderObject(_this.RawConfig.TemplateId, _this._externalReloadBtn, _this.Configuration.RenderTo);
                            _this._ready = true;
                        }
                    };
                }
                ReloadPlugin.prototype.triggerReload = function () {
                    this.MasterTable.Controller.reload(this.Configuration.ForceReload);
                };
                ReloadPlugin.prototype.renderContent = function (templatesProvider) {
                    if (this._renderedExternally)
                        return '';
                    return this.defaultRender(templatesProvider);
                };
                ReloadPlugin.prototype.startLoading = function () {
                    if (this._renderedExternally) {
                        if (!this._ready)
                            return;
                        this._externalReloadBtn.VisualStates.mixinState('loading');
                    }
                    else {
                        this.VisualStates.mixinState('loading');
                    }
                };
                ReloadPlugin.prototype.stopLoading = function () {
                    if (this._renderedExternally) {
                        if (!this._ready)
                            return;
                        this._externalReloadBtn.VisualStates.unmixinState('loading');
                    }
                    else {
                        this.VisualStates.unmixinState('loading');
                    }
                };
                ReloadPlugin.prototype.subscribe = function (e) {
                    var _this = this;
                    _super.prototype.subscribe.call(this, e);
                    e.Loading.subscribeBefore(function () { return _this.startLoading(); }, 'reload');
                    e.Loading.subscribeAfter(function () { return _this.stopLoading(); }, 'reload');
                    e.LayoutRendered.subscribeAfter(function () {
                        _this.stopLoading();
                    }, 'reload');
                };
                ReloadPlugin.prototype.init = function (masterTable) {
                    _super.prototype.init.call(this, masterTable);
                    this._renderedExternally = this.Configuration.RenderTo != null && this.Configuration.RenderTo != undefined && this.Configuration.RenderTo.length > 0;
                };
                return ReloadPlugin;
            }(PowerTables.Plugins.PluginBase));
            Reload.ReloadPlugin = ReloadPlugin;
            var ReloadButton = (function () {
                function ReloadButton(controller, forceReload) {
                    this._controller = controller;
                    this._forceReload = forceReload;
                }
                ReloadButton.prototype.triggerReload = function () {
                    this._controller.reload(this._forceReload);
                };
                return ReloadButton;
            }());
            PowerTables.ComponentsContainer.registerComponent('Reload', ReloadPlugin);
        })(Reload = Plugins.Reload || (Plugins.Reload = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var ResponseInfo;
        (function (ResponseInfo) {
            var ResponseInfoPlugin = (function (_super) {
                __extends(ResponseInfoPlugin, _super);
                function ResponseInfoPlugin() {
                    _super.apply(this, arguments);
                    this._recentData = {};
                    this._isReadyForRendering = false;
                }
                ResponseInfoPlugin.prototype.onResponse = function (e) {
                    this._isServerRequest = true;
                    if (!this.Configuration.ResponseObjectOverriden) {
                        this._recentServerData = {
                            TotalCount: e.EventArgs.Data.ResultsCount,
                            IsLocalRequest: false,
                            CurrentPage: e.EventArgs.Data.PageIndex,
                            PagingEnabled: this._pagingEnabled
                        };
                    }
                };
                ResponseInfoPlugin.prototype.addClientData = function (e) {
                    for (var k in this.Configuration.ClientCalculators) {
                        if (this.Configuration.ClientCalculators.hasOwnProperty(k)) {
                            this._recentData[k] = this.Configuration.ClientCalculators[k](e);
                        }
                    }
                };
                ResponseInfoPlugin.prototype.onClientDataProcessed = function (e) {
                    if (this.Configuration.ResponseObjectOverriden) {
                        this.addClientData(e.EventArgs);
                        this.MasterTable.Renderer.Modifier.redrawPlugin(this);
                        return;
                    }
                    this._recentData = {
                        TotalCount: this._recentServerData.TotalCount || this.MasterTable.DataHolder.StoredData.length,
                        IsLocalRequest: !this._isServerRequest,
                        CurrentPage: this._recentServerData.CurrentPage || ((!this._pagingPlugin) ? 0 : this._pagingPlugin.getCurrentPage() + 1),
                        TotalPages: ((!this._pagingPlugin) ? 0 : this._pagingPlugin.getTotalPages()),
                        PagingEnabled: this._pagingEnabled
                    };
                    this.addClientData(e.EventArgs);
                    this._isServerRequest = false;
                    this._isReadyForRendering = true;
                    this.MasterTable.Renderer.Modifier.redrawPlugin(this);
                };
                ResponseInfoPlugin.prototype.renderContent = function (templatesProvider) {
                    if (!this._isReadyForRendering)
                        return '';
                    if (this.Configuration.ClientTemplateFunction) {
                        return this.Configuration.ClientTemplateFunction(this._recentData);
                    }
                    else {
                        return this._recentTemplate(this._recentData);
                    }
                };
                ResponseInfoPlugin.prototype.init = function (masterTable) {
                    _super.prototype.init.call(this, masterTable);
                    this._recentTemplate = this.MasterTable.Renderer.getCachedTemplate(this.RawConfig.TemplateId);
                    if (this.Configuration.ResponseObjectOverriden) {
                        this.MasterTable.Loader.registerAdditionalDataReceiver('ResponseInfo', this);
                    }
                    this.MasterTable.Events.ClientDataProcessing.subscribeAfter(this.onClientDataProcessed.bind(this), 'responseInfo');
                    this.MasterTable.Events.DataReceived.subscribe(this.onResponse.bind(this), 'responseInfo');
                    try {
                        this._pagingPlugin = this.MasterTable.InstanceManager.getPlugin('Paging');
                        this._pagingEnabled = true;
                    }
                    catch (v) {
                        this._pagingEnabled = false;
                    }
                };
                ResponseInfoPlugin.prototype.handleAdditionalData = function (additionalData) {
                    this._recentData = additionalData;
                    this._isReadyForRendering = true;
                    this.MasterTable.Renderer.Modifier.redrawPlugin(this);
                };
                return ResponseInfoPlugin;
            }(Plugins.PluginBase));
            ResponseInfo.ResponseInfoPlugin = ResponseInfoPlugin;
            PowerTables.ComponentsContainer.registerComponent('ResponseInfo', ResponseInfoPlugin);
        })(ResponseInfo = Plugins.ResponseInfo || (Plugins.ResponseInfo = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var Toolbar;
        (function (Toolbar) {
            /**
             * Backing class for confirmation panel created as part of button action
             */
            var CommandConfirmation = (function () {
                /**
                 * @internal
                 */
                function CommandConfirmation(confirm, reject, date, autoform) {
                    this._beforeConfirm = [];
                    /**
                     * @internal
                     */
                    this.AfterConfirm = [];
                    this._beforeReject = [];
                    /**
                     * @internal
                     */
                    this.AfterReject = [];
                    /**
                     * @internal
                     */
                    this.AfterConfirmationResponse = [];
                    /**
                     * @internal
                     */
                    this.ConfirmationResponseError = [];
                    /**
                     * Set of form values (available only after window is commited or dismissed)
                     */
                    this.Form = null;
                    this._confirm = confirm;
                    this._reject = reject;
                    this._date = date;
                    this._autoform = autoform;
                }
                /**
                 * @internal
                 */
                CommandConfirmation.prototype.onRender = function (parent) {
                    this.RootElement = parent;
                    if (this._autoform != null) {
                        for (var i = 0; i < this._autoform.length; i++) {
                            var conf = this._autoform[i];
                            if (conf.TriggerSearchOnEvents && conf.TriggerSearchOnEvents.length > 0) {
                                var element = document.querySelector(conf.FieldSelector);
                                if (conf.AutomaticallyAttachDatepicker) {
                                    this._date.createDatePicker(element);
                                }
                            }
                        }
                    }
                };
                /**
                 * @internal
                 */
                CommandConfirmation.prototype.fireEvents = function (form, array) {
                    for (var i = 0; i < array.length; i++) {
                        array[i](form);
                    }
                };
                CommandConfirmation.prototype.collectFormData = function () {
                    if (this.Form != null)
                        return;
                    var form = {};
                    if (this._autoform != null) {
                        form = PowerTables.Plugins.Formwatch.FormwatchPlugin.extractFormData(this._autoform, this.RootElement, this._date);
                    }
                    this.Form = form;
                };
                /**
                 * Commits confirmation form, collects form, destroys confirmation panel element and proceeds server command, fires corresponding events
                 */
                CommandConfirmation.prototype.confirm = function () {
                    this.collectFormData();
                    this.fireEvents(this.Form, this._beforeConfirm);
                    this._confirm(this.Form);
                    this.fireEvents(this.Form, this.AfterConfirm);
                };
                /**
                 * Destroys confirmation panel element, collects form, does not send anything to server, fires corresponding events
                 */
                CommandConfirmation.prototype.dismiss = function () {
                    this.collectFormData();
                    this.fireEvents(this.Form, this._beforeReject);
                    this._reject();
                    this.fireEvents(this.Form, this.AfterReject);
                };
                /**
                 * Subscribes specified function to be invoked after pressing confirm button (or calling confirm method) but before processing
                 * @param fn Function that consumes form data
                 */
                CommandConfirmation.prototype.onBeforeConfirm = function (fn) { this._beforeConfirm.push(fn); };
                /**
                 * Subscribes specified function to be invoked after pressing confirm button and client-side form processing (it is possible to add something to form)
                 * but before sending data to server
                 * @param fn Function that consumes form data
                 */
                CommandConfirmation.prototype.onAfterConfirm = function (fn) { this.AfterConfirm.push(fn); };
                /**
                 * Subscribes specified function to be invoked after pressing reject button (or calling reject method) but before processing
                 * @param fn Function that consumes form data
                 */
                CommandConfirmation.prototype.onBeforeReject = function (fn) { this._beforeReject.push(fn); };
                /**
                 * Subscribes specified function to be invoked after pressing reject button (or calling reject method) but before processing
                 * @param fn Function that consumes form data
                 */
                CommandConfirmation.prototype.onAfterReject = function (fn) { this.AfterReject.push(fn); };
                CommandConfirmation.prototype.onAfterConfirmationResponse = function (fn) { this.AfterConfirmationResponse.push(fn); };
                CommandConfirmation.prototype.onConfirmationResponseError = function (fn) { this.ConfirmationResponseError.push(fn); };
                return CommandConfirmation;
            }());
            Toolbar.CommandConfirmation = CommandConfirmation;
        })(Toolbar = Plugins.Toolbar || (Plugins.Toolbar = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var Toolbar;
        (function (Toolbar) {
            /**
             * Client-side supply for Toolbar plugin
             */
            var ToolbarPlugin = (function (_super) {
                __extends(ToolbarPlugin, _super);
                function ToolbarPlugin() {
                    _super.apply(this, arguments);
                    /**
                     * HTML elements of all buttons that are registered for usage within toolbar plugin. Key= internal button id, Value = HTML element corresponding to button
                     */
                    this.AllButtons = {};
                    this._buttonsConfig = {};
                }
                /**
                 * Simulates event happened on particular button. Internal button id must be supplied as first member of @memberref PowerTables.Rendering.ITemplateBoundEvent.EventArguments
                 *
                 * @param e Template bound event for triggering button action
                 */
                ToolbarPlugin.prototype.buttonHandleEvent = function (e) {
                    var btnId = e.EventArguments[0];
                    this.handleButtonAction(this._buttonsConfig[btnId]);
                };
                ToolbarPlugin.prototype.redrawMe = function () {
                    this.MasterTable.Renderer.Modifier.redrawPlugin(this);
                };
                ToolbarPlugin.prototype.handleButtonAction = function (btn) {
                    var _this = this;
                    if (btn.OnClick) {
                        btn.OnClick.call(this.MasterTable, this.MasterTable, this.AllButtons[btn.InternalId]);
                    }
                    if (btn.Command) {
                        var _self = this;
                        // ReSharper disable Lambda
                        var f = function (queryModifier, success, error) {
                            if (btn.BlackoutWhileCommand) {
                                btn.IsDisabled = true;
                                _self.redrawMe();
                            }
                            _self.MasterTable.Loader.requestServer(btn.Command, function (response) {
                                if (btn.CommandCallbackFunction) {
                                    btn.CommandCallbackFunction.apply(_self.MasterTable, [_self.MasterTable, response]);
                                }
                                else {
                                    if (response.$isDeferred && response.$url) {
                                        window.location.href = response.$url;
                                    }
                                }
                                if (btn.BlackoutWhileCommand) {
                                    btn.IsDisabled = false;
                                    _self.redrawMe();
                                }
                                if (success)
                                    success();
                            }, queryModifier, function () {
                                if (btn.BlackoutWhileCommand) {
                                    btn.IsDisabled = false;
                                    _self.redrawMe();
                                }
                                if (error)
                                    error();
                            });
                        };
                        // ReSharper restore Lambda
                        if (btn.ConfirmationFunction)
                            btn.ConfirmationFunction.apply(this.MasterTable, [f, this.MasterTable]);
                        else if (btn.ConfirmationTemplateId) {
                            var tc = new PowerTables.Plugins.Toolbar.CommandConfirmation(function (data) {
                                f(function (q) {
                                    q.AdditionalData['Confirmation'] = JSON.stringify(data);
                                    return q;
                                }, function () {
                                    tc.fireEvents(tc.Form, tc.AfterConfirmationResponse);
                                }, function () {
                                    tc.fireEvents(tc.Form, tc.ConfirmationResponseError);
                                });
                                _this.MasterTable.Renderer.destroyObject(btn.ConfirmationTargetSelector);
                            }, function () {
                                _this.MasterTable.Renderer.destroyObject(btn.ConfirmationTargetSelector);
                            }, this.MasterTable.Date, btn.ConfirmationFormConfiguration);
                            try {
                                tc.SelectedItems = this.MasterTable.Selection.getSelectedKeys();
                                tc.SelectedObjects = this.MasterTable.Selection.getSelectedObjects();
                            }
                            catch (e) { }
                            var r = this.MasterTable.Renderer.renderObject(btn.ConfirmationTemplateId, tc, btn.ConfirmationTargetSelector);
                            tc.RootElement = r;
                        }
                        else
                            f();
                    }
                };
                /*
                 * @internal
                 */
                ToolbarPlugin.prototype.renderContent = function (templatesProvider) {
                    return this.defaultRender(templatesProvider);
                };
                ToolbarPlugin.prototype.traverseButtons = function (arr) {
                    for (var i = 0; i < arr.length; i++) {
                        this._buttonsConfig[arr[i].InternalId] = arr[i];
                        if (arr[i].HasSubmenu) {
                            this.traverseButtons(arr[i].Submenu);
                        }
                    }
                };
                ToolbarPlugin.prototype.onSelectionChanged = function (e) {
                    var atleastOne = false;
                    var disabled = e.EventArgs.length === 0;
                    for (var bc in this._buttonsConfig) {
                        if (this._buttonsConfig.hasOwnProperty(bc)) {
                            if (this._buttonsConfig[bc].DisableIfNothingChecked) {
                                if (this._buttonsConfig[bc].IsDisabled !== disabled) {
                                    atleastOne = true;
                                    this._buttonsConfig[bc].IsDisabled = disabled;
                                }
                            }
                        }
                    }
                    if (atleastOne)
                        this.MasterTable.Renderer.Modifier.redrawPlugin(this);
                };
                /*
                 * @internal
                 */
                ToolbarPlugin.prototype.init = function (masterTable) {
                    _super.prototype.init.call(this, masterTable);
                    try {
                        var nothingSelected = this.MasterTable.Selection.getSelectedKeys().length === 0;
                        for (var i = 0; i < this.Configuration.Buttons.length; i++) {
                            if (this.Configuration.Buttons[i].DisableIfNothingChecked) {
                                this.Configuration.Buttons[i].IsDisabled = nothingSelected;
                            }
                        }
                    }
                    catch (e) {
                    }
                    this.traverseButtons(this.Configuration.Buttons);
                    this.MasterTable.Events.SelectionChanged.subscribe(this.onSelectionChanged.bind(this), 'toolbar');
                };
                return ToolbarPlugin;
            }(Plugins.PluginBase));
            Toolbar.ToolbarPlugin = ToolbarPlugin;
            PowerTables.ComponentsContainer.registerComponent('Toolbar', ToolbarPlugin);
        })(Toolbar = Plugins.Toolbar || (Plugins.Toolbar = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Plugins;
    (function (Plugins) {
        var Total;
        (function (Total) {
            /**
             * Client-side implementation of totals plugin
             */
            var TotalsPlugin = (function (_super) {
                __extends(TotalsPlugin, _super);
                function TotalsPlugin() {
                    _super.apply(this, arguments);
                }
                TotalsPlugin.prototype.makeTotalsRow = function () {
                    var cols = this.MasterTable.InstanceManager.getUiColumns();
                    var dataObject = {};
                    for (var j = 0; j < cols.length; j++) {
                        var v = null;
                        var cl = cols[j];
                        if (this._totalsForColumns.hasOwnProperty(cl.RawName)) {
                            v = this._totalsForColumns[cl.RawName];
                            if (this.Configuration.ColumnsValueFunctions[cl.RawName]) {
                                v = this.Configuration.ColumnsValueFunctions[cl.RawName](v);
                            }
                        }
                        dataObject[cols[j].RawName] = v;
                    }
                    var result = {
                        Index: -1,
                        MasterTable: this.MasterTable,
                        DataObject: dataObject,
                        Cells: {},
                        renderContent: null,
                        renderElement: null,
                        IsSpecial: true
                    };
                    for (var i = 0; i < cols.length; i++) {
                        var col = cols[i];
                        var cell = {
                            DataObject: dataObject,
                            renderElement: null,
                            renderContent: function (v) { return this.Data; },
                            Column: cols[i],
                            Row: result,
                            Data: dataObject[col.RawName]
                        };
                        result.Cells[col.RawName] = cell;
                    }
                    return result;
                };
                /**
                * @internal
                */
                TotalsPlugin.prototype.onClientRowsRendering = function (e) {
                    if (this._totalsForColumns) {
                        if (this.Configuration.ShowOnTop) {
                            e.EventArgs.splice(0, 0, this.makeTotalsRow());
                        }
                        else {
                            e.EventArgs.push(this.makeTotalsRow());
                        }
                    }
                };
                /**
                * @internal
                */
                TotalsPlugin.prototype.onAdjustments = function (e) {
                    var adjustments = e.EventArgs;
                    if (adjustments.NeedRedrawAllVisible)
                        return;
                    var row = this.makeTotalsRow(); //todo recalculate totals in more intelligent way
                    this.MasterTable.Renderer.Modifier.redrawRow(row);
                };
                /**
                * @internal
                */
                TotalsPlugin.prototype.onClientDataProcessed = function (e) {
                    if (!this._totalsForColumns)
                        this._totalsForColumns = {};
                    for (var k in this.Configuration.ColumnsCalculatorFunctions) {
                        if (this.Configuration.ColumnsCalculatorFunctions.hasOwnProperty(k)) {
                            this._totalsForColumns[k] = this.Configuration.ColumnsCalculatorFunctions[k](e.EventArgs);
                        }
                    }
                };
                /**
                * @internal
                */
                TotalsPlugin.prototype.subscribe = function (e) {
                    e.ClientRowsRendering.subscribeBefore(this.onClientRowsRendering.bind(this), 'totals');
                    e.ClientDataProcessing.subscribeAfter(this.onClientDataProcessed.bind(this), 'totals');
                    e.AdjustmentResult.subscribe(this.onAdjustments.bind(this), 'totals');
                };
                TotalsPlugin.prototype.handleAdditionalData = function (additionalData) {
                    var total = additionalData;
                    for (var tc in total.TotalsForColumns) {
                        if (!this._totalsForColumns)
                            this._totalsForColumns = {};
                        this._totalsForColumns[tc] = total.TotalsForColumns[tc];
                    }
                };
                TotalsPlugin.prototype.init = function (masterTable) {
                    _super.prototype.init.call(this, masterTable);
                    this.MasterTable.Loader.registerAdditionalDataReceiver('Total', this);
                };
                return TotalsPlugin;
            }(Plugins.PluginBase));
            Total.TotalsPlugin = TotalsPlugin;
            PowerTables.ComponentsContainer.registerComponent('Total', TotalsPlugin);
        })(Total = Plugins.Total || (Plugins.Total = {}));
    })(Plugins = PowerTables.Plugins || (PowerTables.Plugins = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
     * Main entry point for all tables functionality
     */
    var PowerTable = (function () {
        /**
         * Constructs new instance of PowerTable object.
         * Usually this method is being called automatically by .InitializationCode or .InitializationScript method,
         * but you also could combine call of Configurator<>.JsonConfig and call of Lattice constructor
         *
         * @param configuration JSON configuration of whole table
         */
        function PowerTable(configuration) {
            this._configuration = configuration;
            this.bindReady();
        }
        PowerTable.prototype.bindReady = function () {
            var _self = this;
            if (document.addEventListener) {
                document.addEventListener('DOMContentLoaded', function () {
                    document.removeEventListener('DOMContentLoaded', arguments.callee, false);
                    _self.initialize();
                }, false);
            }
            else if (document.attachEvent) {
                document.attachEvent('onreadystatechange', function () {
                    if (document.readyState === 'complete') {
                        document.detachEvent('onreadystatechange', arguments.callee);
                        _self.initialize();
                    }
                });
                if (document.documentElement.doScroll && window == window.top)
                    (function () {
                        if (_self._isReady)
                            return;
                        try {
                            document.documentElement.doScroll('left');
                        }
                        catch (error) {
                            setTimeout(arguments.callee, 0);
                            return;
                        }
                        _self.initialize();
                    })();
            }
            window.addEventListener('load', function (e) {
                if (_self._isReady)
                    return;
                _self.initialize();
            });
        };
        PowerTable.prototype.initialize = function () {
            this._isReady = true;
            if (!window['__latticeInstances'])
                window['__latticeInstances'] = {};
            window['__latticeInstances'][this._configuration.TableRootId] = this;
            this.Date = new PowerTables.Services.DateService(this._configuration.DatepickerOptions);
            this.Events = new PowerTables.Services.EventsService(this);
            this.InstanceManager = new PowerTables.Services.InstanceManagerService(this._configuration, this, this.Events);
            this.DataHolder = new PowerTables.Services.DataHolderService(this);
            this.Loader = new PowerTables.Services.LoaderService(this._configuration.StaticData, this._configuration.OperationalAjaxUrl, this);
            this.Renderer = new PowerTables.Rendering.Renderer(this._configuration.TableRootId, this._configuration.Prefix, this);
            this.Controller = new PowerTables.Services.Controller(this);
            this.Selection = new PowerTables.Services.SelectionService(this);
            this.Commands = new PowerTables.Services.CommandsService(this);
            this.MessageService = new PowerTables.Services.MessagesService(this._configuration.MessageFunction, this.InstanceManager, this.DataHolder, this.Controller, this.Renderer);
            this.InstanceManager.initPlugins();
            this.Renderer.layout();
            if (this._configuration.CallbackFunction) {
                this._configuration.CallbackFunction(this);
            }
            this.InstanceManager._subscribeConfiguredEvents();
            if (this._configuration.PrefetchedData != null && this._configuration.PrefetchedData.length > 0) {
                this.Loader.prefetchData(this._configuration.PrefetchedData);
                this.Controller.redrawVisibleData();
            }
            else {
                if (this._configuration.LoadImmediately) {
                    this.Controller.reload();
                }
                else {
                    this.MessageService.showMessage({
                        Class: 'initial',
                        Title: 'No filtering specified',
                        Details: 'To retrieve query results please specify several filters',
                        Type: PowerTables.MessageType.Banner
                    });
                }
            }
        };
        /**
         * Reloads table content.
         * This method is left for backward compatibility
         *
         * @returns {}
         */
        PowerTable.prototype.reload = function (force) {
            this.Controller.reload(force);
        };
        /**
         * Fires specified DOM event on specified element
         *
         * @param eventName DOM event id
         * @param element Element is about to dispatch event
         */
        PowerTable.fireDomEvent = function (eventName, element) {
            if ('createEvent' in document) {
                var evt = document.createEvent('HTMLEvents');
                evt.initEvent(eventName, false, true);
                element.dispatchEvent(evt);
            }
            else
                element['fireEvent'](eventName);
        };
        PowerTable.prototype.proceedAdjustments = function (adjustments) {
            var result = this.DataHolder.proceedAdjustments(adjustments);
            if (result != null)
                this.Controller.drawAdjustmentResult(result);
        };
        PowerTable.prototype.getStaticData = function () {
            if (!this._configuration.StaticData)
                return null;
            return JSON.parse(this._configuration.StaticData);
        };
        PowerTable.prototype.setStaticData = function (obj) {
            this._configuration.StaticData = JSON.stringify(obj);
        };
        return PowerTable;
    }());
    PowerTables.PowerTable = PowerTable;
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        /**
         * Internal component that is not supposed to be used directly.
         */
        var BackBinder = (function () {
            /**
       * @internal
       */
            function BackBinder(hb, instances, stack, dateService) {
                this._eventsQueue = [];
                this._markQueue = [];
                this._datepickersQueue = [];
                this._callbacksQueue = [];
                this._destroyCallbacksQueue = [];
                this._cachedVisualStates = {};
                this._hasVisualStates = false;
                this._instances = instances;
                hb.registerHelper('BindEvent', this.bindEventHelper.bind(this));
                hb.registerHelper('Mark', this.markHelper.bind(this));
                hb.registerHelper('Datepicker', this.datepickerHelper.bind(this));
                hb.registerHelper('VState', this.visualStateHelper.bind(this));
                hb.registerHelper('RenderCallback', this.renderCallbackHelper.bind(this));
                hb.registerHelper('DestroyCallback', this.destroyCallbackHelper.bind(this));
                this._stack = stack;
                this._dateService = dateService;
            }
            BackBinder.prototype.traverseBackbind = function (elements, parentElement, backbindCollection, attribute, fn) {
                for (var i = 0; i < elements.length; i++) {
                    var element = elements[i];
                    var attr = null;
                    var attrNamesToRemove = [];
                    for (var j = 0; j < element.attributes.length; j++) {
                        if (element.attributes.item(j).name.substring(0, attribute.length) === attribute) {
                            attr = element.attributes.item(j);
                            var idx = parseInt(attr.value);
                            var backbindDescription = backbindCollection[idx];
                            fn.call(this, backbindDescription, element);
                            attrNamesToRemove.push(attr.name);
                        }
                    }
                    for (var k = 0; k < attrNamesToRemove.length; k++) {
                        element.removeAttribute(attrNamesToRemove[k]);
                    }
                }
            };
            BackBinder.prototype.getMatchingElements = function (parent, attr) {
                var list = parent.querySelectorAll("[" + attr + "]");
                var result = [];
                for (var i = 0; i < list.length; i++) {
                    result.push(list.item(i));
                }
                if (parent.hasAttribute(attr))
                    result.push(parent);
                return result;
            };
            /**
             * Applies binding of events left in events queue
             *
             * @param parentElement Parent element to lookup for event binding attributes
             * @returns {}
             */
            BackBinder.prototype.backBind = function (parentElement) {
                var _this = this;
                var elements = this.getMatchingElements(parentElement, 'data-dp');
                // back binding of datepickers
                this.traverseBackbind(elements, parentElement, this._datepickersQueue, 'data-dp', function (b, e) {
                    _this._dateService.createDatePicker(e, b.IsNullable);
                    _this.Delegator.subscribeDestroy(e, {
                        Callback: _this._dateService.destroyDatePicker,
                        CallbackArguments: [],
                        Target: _this._dateService
                    });
                });
                elements = this.getMatchingElements(parentElement, 'data-mrk');
                // back binding of componens needed HTML elements
                this.traverseBackbind(elements, parentElement, this._markQueue, 'data-mrk', function (b, e) {
                    var target = _this._stealer || b.ElementReceiver;
                    if (Object.prototype.toString.call(b.ElementReceiver[b.FieldName]) === '[object Array]') {
                        target[b.FieldName].push(e);
                    }
                    else if (b.Key != null && b.Key != undefined) {
                        if (typeof b.ElementReceiver[b.FieldName] === 'object') {
                            target[b.FieldName][b.Key] = e;
                        }
                    }
                    else {
                        target[b.FieldName] = e;
                    }
                });
                elements = this.getMatchingElements(parentElement, "data-evb");
                // backbinding of events
                this.traverseBackbind(elements, parentElement, this._eventsQueue, 'data-be', function (subscription, element) {
                    for (var j = 0; j < subscription.Functions.length; j++) {
                        var bindFn = subscription.Functions[j];
                        var handler = null;
                        var target = _this._stealer || subscription.EventReceiver;
                        if (target[bindFn] && (typeof target[bindFn] === 'function'))
                            handler = subscription.EventReceiver[bindFn];
                        else {
                            var traverse = _this.evalCallback(bindFn);
                            target = traverse.target;
                            handler = traverse.fn;
                        }
                        for (var k = 0; k < subscription.Events.length; k++) {
                            if (subscription.Events[k].length > 4 && subscription.Events[k].substring(0, 4) === 'out-') {
                                _this.Delegator.subscribeOutOfElementEvent(element, subscription.Events[k].substring(4), handler, target, subscription.EventArguments);
                            }
                            else {
                                _this.Delegator.subscribeEvent(element, subscription.Events[k], handler, target, subscription.EventArguments);
                            }
                        }
                    }
                });
                if (this._hasVisualStates) {
                    var targetPendingNormal = [];
                    for (var vsk in this._cachedVisualStates) {
                        if (this._cachedVisualStates.hasOwnProperty(vsk)) {
                            var state = this._cachedVisualStates[vsk];
                            elements = this.getMatchingElements(parentElement, "data-state-" + vsk);
                            for (var i = 0; i < elements.length; i++) {
                                var element = elements[i];
                                state[i].Element = element;
                                element.removeAttribute("data-state-" + vsk);
                                var target = this._stealer || state[i].Receiver;
                                if (targetPendingNormal.indexOf(target) < 0) {
                                    targetPendingNormal.push(target);
                                    target.VisualStates = new Rendering.VisualState();
                                }
                                if (!target.VisualStates)
                                    target.VisualStates = new Rendering.VisualState();
                                if (!target.VisualStates.States.hasOwnProperty(vsk))
                                    target.VisualStates.States[vsk] = [];
                                target.VisualStates.States[vsk].push(state[i]);
                            }
                        }
                    }
                    this._hasVisualStates = false;
                    this.resolveNormalStates(targetPendingNormal);
                    this._cachedVisualStates = {};
                }
                elements = this.getMatchingElements(parentElement, "data-cb");
                this.traverseBackbind(elements, parentElement, this._callbacksQueue, 'data-cb', function (b, e) {
                    var t = _this.evalCallback(b.Callback);
                    (t.fn).apply(t.target, [e].concat(b.CallbackArguments));
                });
                elements = this.getMatchingElements(parentElement, "data-dcb");
                this.traverseBackbind(elements, parentElement, this._destroyCallbacksQueue, 'data-dcb', function (b, e) {
                    var tp = _this.evalCallback(b.Callback);
                    _this.Delegator.subscribeDestroy(e, {
                        CallbackArguments: b.CallbackArguments,
                        Target: tp.target,
                        Callback: tp.fn
                    });
                });
                this._markQueue = [];
                this._eventsQueue = [];
                this._datepickersQueue = [];
            };
            BackBinder.prototype.evalCallback = function (calbackString) {
                if (typeof calbackString === "function")
                    return { fn: calbackString, target: window };
                if (calbackString.trim().substr(0, 'function'.length) === 'function') {
                    var cb = null;
                    eval("cb = (" + calbackString + ");");
                    return { fn: cb, target: window };
                }
                var tp = this.traverseWindowPath(calbackString);
                if (typeof tp.target !== "function")
                    throw new Error(calbackString + " supplied for rendering callback is not a function");
                return { fn: tp.target, target: tp.parent };
            };
            BackBinder.prototype.traverseWindowPath = function (path) {
                if (path.indexOf('.') > -1) {
                    var pth = path.split('.');
                    var parent = window;
                    var target = window;
                    for (var i = 0; i < pth.length; i++) {
                        parent = target;
                        target = parent[pth[i]];
                    }
                    return { target: target, parent: parent };
                }
                else {
                    return { target: window[path], parent: window };
                }
            };
            BackBinder.prototype.resolveNormalStates = function (targets) {
                for (var i = 0; i < targets.length; i++) {
                    this.addNormalState(targets[i].VisualStates.States, targets[i]);
                }
            };
            BackBinder.prototype.addNormalState = function (states, target) {
                var normalState = [];
                var trackedElements = [];
                for (var sk in states) {
                    if (states.hasOwnProperty(sk)) {
                        for (var i = 0; i < states[sk].length; i++) {
                            var stateIdx = trackedElements.indexOf(states[sk][i].Element);
                            if (stateIdx < 0) {
                                stateIdx = normalState.length;
                                trackedElements.push(states[sk][i].Element);
                                var newEntry = {
                                    Element: states[sk][i].Element,
                                    attrs: {},
                                    classes: [],
                                    styles: {},
                                    id: 'normal',
                                    Receiver: target,
                                    content: (states[sk][i].content != null && states[sk][i].content.length > 0) ? states[sk][i].Element.innerHTML : null
                                };
                                normalState.push(newEntry);
                                for (var j = 0; j < newEntry.Element.classList.length; j++) {
                                    newEntry.classes.push(newEntry.Element.classList.item(j));
                                }
                            }
                            this.mixinToNormal(normalState[stateIdx], states[sk][i]);
                        }
                    }
                }
                states['_normal'] = normalState;
            };
            BackBinder.prototype.mixinToNormal = function (normal, custom) {
                if (custom.attrs) {
                    for (var attrKey in custom.attrs) {
                        if (custom.attrs.hasOwnProperty(attrKey)) {
                            if (!normal.attrs.hasOwnProperty(attrKey)) {
                                normal.attrs[attrKey] = (!normal.Element.hasAttribute(attrKey)) ?
                                    null : normal.Element.getAttribute(attrKey);
                            }
                        }
                    }
                }
                if (custom.styles) {
                    for (var styleKey in custom.styles) {
                        if (custom.styles.hasOwnProperty(styleKey)) {
                            if (!normal.styles.hasOwnProperty(styleKey)) {
                                normal.styles[styleKey] = normal.Element.style.getPropertyValue(styleKey);
                            }
                        }
                    }
                }
            };
            BackBinder.prototype.bindEventHelper = function () {
                var commaSeparatedFunctions = arguments[0];
                var commaSeparatedEvents = arguments[1];
                var eventArgs = [];
                if (arguments.length > 3) {
                    for (var i = 2; i <= arguments.length - 2; i++) {
                        eventArgs.push(arguments[i]);
                    }
                }
                var ed = {
                    EventReceiver: this._stack.Current.Object,
                    Functions: commaSeparatedFunctions.split(','),
                    Events: commaSeparatedEvents.split(','),
                    EventArguments: eventArgs
                };
                var index = this._eventsQueue.length;
                this._eventsQueue.push(ed);
                return "data-be-" + index + "=\"" + index + "\" data-evb=\"true\"";
            };
            BackBinder.prototype.renderCallbackHelper = function () {
                var fn = arguments[0];
                var args = [];
                for (var i = 1; i < arguments.length; i++) {
                    args.push(arguments[i]);
                }
                var index = this._callbacksQueue.length;
                this._callbacksQueue.push({
                    Callback: fn,
                    CallbackArguments: args,
                    Target: window
                });
                return "data-cb=\"" + index + "\"";
            };
            BackBinder.prototype.destroyCallbackHelper = function () {
                var fn = arguments[0];
                var args = [];
                for (var i = 1; i < arguments.length; i++) {
                    args.push(arguments[i]);
                }
                var index = this._destroyCallbacksQueue.length;
                this._destroyCallbacksQueue.push({
                    Callback: fn,
                    CallbackArguments: args,
                    Target: window
                });
                return "data-dcb=\"" + index + "\"";
            };
            BackBinder.prototype.markHelper = function (fieldName, key, receiverPath) {
                var index = this._markQueue.length;
                var receiver = this._stack.Current.Object;
                if (receiverPath != null) {
                    var tp = this.traverseWindowPath(receiverPath);
                    receiver = tp.target || tp.parent;
                }
                var md = {
                    ElementReceiver: receiver,
                    FieldName: fieldName,
                    Key: key
                };
                this._markQueue.push(md);
                return "data-mrk=\"" + index + "\"";
            };
            BackBinder.prototype.datepickerHelper = function (condition, nullable) {
                var index = this._datepickersQueue.length;
                if (condition) {
                    var md = {
                        ElementReceiver: this._stack.Current.Object,
                        IsNullable: nullable
                    };
                    this._datepickersQueue.push(md);
                    return "data-dp=\"" + index + "\"";
                }
                return '';
            };
            BackBinder.prototype.visualStateHelper = function (stateName, stateJson) {
                var state = JSON.parse(stateJson);
                state.Receiver = this._stack.Current.Object;
                if (!this._cachedVisualStates[stateName])
                    this._cachedVisualStates[stateName] = [];
                var index = this._cachedVisualStates[stateName].length;
                this._cachedVisualStates[stateName].push(state);
                this._hasVisualStates = true;
                return "data-state-" + stateName + "=\"" + index + "\"";
            };
            return BackBinder;
        }());
        Rendering.BackBinder = BackBinder;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        /**
         * Part of renderer that is responsible for rendering of dynamically loaded content
         */
        var ContentRenderer = (function () {
            function ContentRenderer(templatesProvider, stack, instances, coreTemplates) {
                this._columnsRenderFunctions = {};
                this._hb = templatesProvider.HandlebarsInstance;
                this._templatesProvider = templatesProvider;
                this._stack = stack;
                this._instances = instances;
                this.cacheColumnRenderers(this._instances.Columns);
                this._templateIds = coreTemplates;
            }
            /**
             * Renders supplied table rows to string
             *
             * @param rows Table rows
             */
            ContentRenderer.prototype.renderBody = function (rows) {
                var result = '';
                var wrapper = this._templatesProvider.getCachedTemplate(this._templateIds.RowWrapper);
                for (var i = 0; i < rows.length; i++) {
                    var rw = rows[i];
                    result += this.renderRow(rw, wrapper);
                }
                return result;
            };
            ContentRenderer.prototype.renderRow = function (rw, wrapper) {
                this._stack.push(Rendering.RenderingContextType.Row, rw);
                if (!wrapper) {
                    wrapper = this._templatesProvider.getCachedTemplate(this._templateIds.RowWrapper);
                }
                var result = '';
                if (rw.renderElement) {
                    result += rw.renderElement(this._templatesProvider);
                }
                else {
                    if (this._instances.Configuration.TemplateSelector) {
                        rw.TemplateIdOverride = this._instances.Configuration.TemplateSelector(rw);
                    }
                    if (rw.TemplateIdOverride) {
                        result += this._templatesProvider.getCachedTemplate(rw.TemplateIdOverride)(rw);
                    }
                    else {
                        result += wrapper(rw);
                    }
                }
                this._stack.popContext();
                return result;
            };
            /*
            * @internal
            */
            ContentRenderer.prototype.renderCell = function (cell) {
                return this._columnsRenderFunctions[cell.Column.RawName](cell);
            };
            /*
            * @internal
            */
            ContentRenderer.prototype.renderContent = function (columnName) {
                var result = '';
                switch (this._stack.Current.Type) {
                    case Rendering.RenderingContextType.Row:
                        var row = this._stack.Current.Object;
                        var columns = this._instances.getUiColumns();
                        var cellWrapper = this._templatesProvider.getCachedTemplate(this._templateIds.CellWrapper);
                        for (var i = 0; i < columns.length; i++) {
                            var cell = row.Cells[columns[i].RawName];
                            if (columnName != null && columnName != undefined && typeof columnName == 'string') {
                                if (cell.Column.RawName === columnName) {
                                    result += this.renderCellAsPartOfRow(cell, cellWrapper);
                                }
                            }
                            else {
                                result += this.renderCellAsPartOfRow(cell, cellWrapper);
                            }
                        }
                        break;
                    case Rendering.RenderingContextType.Cell:
                        var tmpl = this._columnsRenderFunctions[this._stack.Current.Object.Column.RawName];
                        result += tmpl(this._stack.Current.Object);
                        break;
                }
                return result;
            };
            ContentRenderer.prototype.renderCellAsPartOfRow = function (cell, cellWrapper) {
                this._stack.push(Rendering.RenderingContextType.Cell, cell, cell.Column.RawName);
                var result = '';
                if (cell.renderElement)
                    result = cell.renderElement(this._templatesProvider);
                else {
                    if (cell.Column.Configuration.TemplateSelector) {
                        cell.TemplateIdOverride = cell.Column.Configuration.TemplateSelector(cell);
                    }
                    if (cell.TemplateIdOverride) {
                        result = this._templatesProvider.getCachedTemplate(cell.TemplateIdOverride)(cell);
                    }
                    else {
                        result = cellWrapper(cell);
                    }
                }
                this._stack.popContext();
                return result;
            };
            ContentRenderer.prototype.cacheColumnRenderers = function (columns) {
                for (var key in columns) {
                    if (columns.hasOwnProperty(key)) {
                        var columnConfig = columns[key].Configuration;
                        if (columnConfig.CellRenderingValueFunction) {
                            this._columnsRenderFunctions[columnConfig.RawColumnName] = columnConfig.CellRenderingValueFunction;
                            continue;
                        }
                        if (columnConfig.CellRenderingTemplateId) {
                            var compiled = this._templatesProvider.getCachedTemplate(columnConfig.CellRenderingTemplateId);
                            this._columnsRenderFunctions[columnConfig.RawColumnName] = compiled;
                            continue;
                        }
                        this._columnsRenderFunctions[columnConfig.RawColumnName] =
                            function (x) { return ((x.Data !== null && x.Data != undefined) ? x.Data : ''); };
                    }
                }
                ;
            };
            /**
             * Adds/replaces column rendering function for specified column
             *
             * @param column Column to cache renderer for
             * @param fn Rendering function
             */
            ContentRenderer.prototype.cacheColumnRenderingFunction = function (column, fn) {
                this._columnsRenderFunctions[column.Configuration.RawColumnName] = fn;
            };
            return ContentRenderer;
        }());
        Rendering.ContentRenderer = ContentRenderer;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        /**
         * This module allows you to locate particular elements in table's DOM
         */
        var DOMLocator = (function () {
            /*
            * @internal
            */
            function DOMLocator(bodyElement, rootElement, rootId) {
                this._bodyElement = bodyElement;
                this._rootElement = rootElement;
                this._rootIdPrefix = "#" + rootId;
            }
            /**
             * Retrieves cell element by cell object
             *
             * @param cell Cell element
             * @returns {HTMLElement} Element containing cell (with wrapper)
             */
            DOMLocator.prototype.getCellElement = function (cell) {
                var track = PowerTables.TrackHelper.getCellTrack(cell);
                return this._bodyElement.querySelector("[data-track=\"" + track + "\"]");
            };
            /**
             * Retrieves cell element using supplied coordinates
             *
             * @param cell Cell element
             * @returns {HTMLElement} Element containing cell (with wrapper)
             */
            DOMLocator.prototype.getCellElementByIndex = function (rowDisplayIndex, columnIndex) {
                var track = PowerTables.TrackHelper.getCellTrackByIndexes(rowDisplayIndex, columnIndex);
                return this._bodyElement.querySelector("[data-track=\"" + track + "\"]");
            };
            /**
             * Retrieves row element (including wrapper)
             *
             * @param row Row
             * @returns HTML element
             */
            DOMLocator.prototype.getRowElement = function (row) {
                var track = PowerTables.TrackHelper.getRowTrack(row);
                return this._bodyElement.querySelector("[data-track=\"" + track + "\"]");
            };
            /**
            * Retrieves row element (including wrapper) by specified row index
            *
            * @param row Row
            * @returns HTML element
            */
            DOMLocator.prototype.getRowElementByIndex = function (rowDisplayingIndex) {
                var track = PowerTables.TrackHelper.getRowTrackByIndex(rowDisplayingIndex);
                return this._bodyElement.querySelector("[data-track=\"" + track + "\"]");
            };
            /**
             * Retrieves data cells for specified column (including wrappers)
             *
             * @param column Column desired data cells belongs to
             * @returns HTML NodeList containing results
             */
            DOMLocator.prototype.getColumnCellsElements = function (column) {
                var colIdx = column.Order;
                return this._bodyElement.querySelectorAll("[data-track$=\"-c" + colIdx + "\"]");
            };
            /**
             * Retrieves data cells for specified column (including wrappers) by column index
             *
             * @param column Column desired data cells belongs to
             * @returns HTML NodeList containing results
             */
            DOMLocator.prototype.getColumnCellsElementsByColumnIndex = function (columnIndex) {
                return this._bodyElement.querySelectorAll("[data-track$=\"-c" + columnIndex + "\"]");
            };
            /**
             * Retrieves data cells for whole row (including wrapper)
             *
             * @param row Row with data cells
             * @returns NodeList containing results
             */
            DOMLocator.prototype.getRowCellsElements = function (row) {
                return this.getRowCellsElementsByIndex(row.Index);
            };
            /**
             * Retrieves data cells for whole row (including wrapper)
             *
             * @param row Row with data cells
             * @returns NodeList containing results
             */
            DOMLocator.prototype.getRowCellsElementsByIndex = function (rowDisplayingIndex) {
                return this._bodyElement.querySelectorAll("[data-track^=\"c-r" + rowDisplayingIndex + "-\"]");
            };
            /**
             * Retrieves HTML element for column header (including wrapper)
             *
             * @param header Column header
             * @returns HTML element
             */
            DOMLocator.prototype.getHeaderElement = function (header) {
                var track = PowerTables.TrackHelper.getHeaderTrack(header);
                return this._rootElement.querySelector("[data-track=\"" + track + "\"]");
            };
            /**
             * Retrieves HTML element for plugin (including wrapper)
             *
             * @param plugin Plugin
             * @returns HTML element
             */
            DOMLocator.prototype.getPluginElement = function (plugin) {
                var track = PowerTables.TrackHelper.getPluginTrack(plugin);
                return this._rootElement.querySelector("[data-track=\"" + track + "\"]");
            };
            /**
             * Retrieves HTML element for plugin (including wrapper)
             *
             * @param plugin Plugin
             * @returns HTML element
             */
            DOMLocator.prototype.getPluginElementsByPositionPart = function (placement) {
                var track = PowerTables.TrackHelper.getPluginTrackByLocation(placement);
                return this._rootElement.querySelectorAll("[data-track^=\"" + track + "\"]");
            };
            /**
             * Determines if supplied element is table row
             *
             * @param e Testing element
             * @returns {boolean} True when supplied element is row, false otherwise
             */
            DOMLocator.prototype.isRow = function (e) {
                if (!e)
                    return false;
                if (!e.getAttribute)
                    return false;
                var trk = e.getAttribute('data-track');
                if (!trk)
                    return false;
                return (trk.charAt(0) === 'r') && (trk.charAt(1) === '-');
            };
            /**
             * Determines if supplied element is table cell
             *
             * @param e Testing element
             * @returns {boolean} True when supplied element is cell, false otherwise
             */
            DOMLocator.prototype.isCell = function (e) {
                if (!e)
                    return false;
                if (!e.getAttribute)
                    return false;
                var trk = e.getAttribute('data-track');
                if (!trk)
                    return false;
                return (trk.charAt(0) === 'c')
                    && (trk.charAt(1) === '-')
                    && (trk.charAt(2) === 'r');
            };
            return DOMLocator;
        }());
        Rendering.DOMLocator = DOMLocator;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        /**
         * Class that is responsible for particular HTML elements redrawing/addition/removal
         */
        var DOMModifier = (function () {
            /*
            * @internal
            */
            function DOMModifier(stack, locator, backBinder, templatesProvider, layoutRenderer, instances, ed) {
                this.displayCache = {};
                this._stack = stack;
                this._locator = locator;
                this._backBinder = backBinder;
                this._templatesProvider = templatesProvider;
                this._layoutRenderer = layoutRenderer;
                this._instances = instances;
                this._ed = ed;
            }
            //#region Show/hide infrastructure
            DOMModifier.prototype.getRealDisplay = function (elem) {
                if (elem.currentStyle)
                    return elem.currentStyle.display;
                else if (window.getComputedStyle) {
                    var computedStyle = window.getComputedStyle(elem, null);
                    return computedStyle.getPropertyValue('display');
                }
                return '';
            };
            DOMModifier.prototype.hideElement = function (el) {
                if (!el)
                    return;
                if (!el.getAttribute('displayOld'))
                    el.setAttribute("displayOld", el.style.display);
                el.style.display = "none";
            };
            DOMModifier.prototype.showElement = function (el) {
                if (!el)
                    return;
                if (this.getRealDisplay(el) !== 'none')
                    return;
                var old = el.getAttribute("displayOld");
                el.style.display = old || "";
                if (this.getRealDisplay(el) === "none") {
                    var nodeName = el.nodeName, body = document.body, display;
                    if (this.displayCache[nodeName])
                        display = this.displayCache[nodeName];
                    else {
                        var testElem = document.createElement(nodeName);
                        body.appendChild(testElem);
                        display = this.getRealDisplay(testElem);
                        if (display === "none")
                            display = "block";
                        body.removeChild(testElem);
                        this.displayCache[nodeName] = display;
                    }
                    el.setAttribute('displayOld', display);
                    el.style.display = display;
                }
            };
            DOMModifier.prototype.destroyElement = function (element) {
                element.parentElement.removeChild(element);
                this._ed.handleElementDestroy(element);
            };
            DOMModifier.prototype.destroyElements = function (elements) {
                for (var i = 0; i < elements.length; i++) {
                    this.destroyElement(elements.item(i));
                }
            };
            DOMModifier.prototype.hideElements = function (element) {
                if (!element)
                    return;
                for (var i = 0; i < element.length; i++) {
                    this.hideElement(element.item(i));
                }
            };
            DOMModifier.prototype.showElements = function (element) {
                if (!element)
                    return;
                for (var i = 0; i < element.length; i++) {
                    this.showElement(element.item(i));
                }
            };
            //#endregion
            //#region Plugins
            /**
             * Redraws specified plugin refreshing all its graphical state
             *
             * @param plugin Plugin to redraw
             * @returns {}
             */
            DOMModifier.prototype.redrawPlugin = function (plugin) {
                this._stack.clear();
                var oldPluginElement = this._locator.getPluginElement(plugin);
                var html = this._layoutRenderer.renderPlugin(plugin);
                var newPluginElement = this.replaceElement(oldPluginElement, html);
                ;
                this._backBinder.backBind(newPluginElement);
                return newPluginElement;
            };
            DOMModifier.prototype.renderPlugin = function (plugin) {
                this._stack.clear();
                var html = this._layoutRenderer.renderPlugin(plugin);
                return this.createElement(html);
            };
            /**
             * Redraws specified plugins refreshing all them graphical state (by position)
             *
             * @param position Plugin position
             * @returns {}
             */
            DOMModifier.prototype.redrawPluginsByPosition = function (position) {
                var plugins = this._instances.getPlugins(position);
                for (var i = 0; i < plugins.length; i++) {
                    this.redrawPlugin(plugins[i]);
                }
            };
            DOMModifier.prototype.hidePlugin = function (plugin) {
                var pluginElement = this._locator.getPluginElement(plugin);
                this.hideElement(pluginElement);
            };
            DOMModifier.prototype.showPlugin = function (plugin) {
                var pluginElement = this._locator.getPluginElement(plugin);
                this.showElement(pluginElement);
            };
            DOMModifier.prototype.destroyPlugin = function (plugin) {
                var pluginElement = this._locator.getPluginElement(plugin);
                this.destroyElement(pluginElement);
            };
            DOMModifier.prototype.hidePluginsByPosition = function (position) {
                var plugins = this._instances.getPlugins(position);
                for (var i = 0; i < plugins.length; i++) {
                    this.hidePlugin(plugins[i]);
                }
            };
            DOMModifier.prototype.showPluginsByPosition = function (position) {
                var plugins = this._instances.getPlugins(position);
                for (var i = 0; i < plugins.length; i++) {
                    this.showPlugin(plugins[i]);
                }
            };
            DOMModifier.prototype.destroyPluginsByPosition = function (position) {
                var plugins = this._instances.getPlugins(position);
                for (var i = 0; i < plugins.length; i++) {
                    this.destroyPlugin(plugins[i]);
                }
            };
            //#endregion
            //#region Rows
            /**
             * Redraws specified row refreshing all its graphical state
             *
             * @param row
             * @returns {}
             */
            DOMModifier.prototype.redrawRow = function (row) {
                this._stack.clear();
                this._stack.push(Rendering.RenderingContextType.Row, row);
                var wrapper = this._templatesProvider.getCachedTemplate('rowWrapper');
                var html;
                if (row.renderElement) {
                    html = row.renderElement(this._templatesProvider);
                }
                else {
                    html = wrapper(row);
                }
                this._stack.popContext();
                var oldElement = this._locator.getRowElement(row);
                var newElem = this.replaceElement(oldElement, html);
                this._backBinder.backBind(newElem);
                return newElem;
            };
            DOMModifier.prototype.destroyRow = function (row) {
                var rowElement = this._locator.getRowElement(row);
                this.destroyElement(rowElement);
            };
            DOMModifier.prototype.hideRow = function (row) {
                var rowElement = this._locator.getRowElement(row);
                this.hideElement(rowElement);
            };
            DOMModifier.prototype.showRow = function (row) {
                var rowElement = this._locator.getRowElement(row);
                this.showElement(rowElement);
            };
            /**
             * Redraws specified row refreshing all its graphical state
             *
             * @param row
             * @returns {}
             */
            DOMModifier.prototype.appendRow = function (row, beforeRowAtIndex) {
                this._stack.clear();
                this._stack.push(Rendering.RenderingContextType.Row, row);
                var wrapper = this._templatesProvider.getCachedTemplate('rowWrapper');
                var html;
                if (row.renderElement) {
                    html = row.renderElement(this._templatesProvider);
                }
                else {
                    html = wrapper(row);
                }
                var referenceNode = this._locator.getRowElementByIndex(beforeRowAtIndex);
                var newRowElement = this.createElement(html);
                referenceNode.parentNode.insertBefore(newRowElement, referenceNode);
                this._backBinder.backBind(newRowElement);
                this._stack.popContext();
                this._stack.clear();
                return newRowElement;
            };
            /**
             * Removes referenced row by its index
             *
             * @param rowDisplayIndex
             * @returns {}
             */
            DOMModifier.prototype.destroyRowByIndex = function (rowDisplayIndex) {
                var referenceNode = this._locator.getRowElementByIndex(rowDisplayIndex);
                referenceNode.parentElement.removeChild(referenceNode);
            };
            DOMModifier.prototype.hideRowByIndex = function (rowDisplayIndex) {
                var rowElement = this._locator.getRowElementByIndex(rowDisplayIndex);
                this.hideElement(rowElement);
            };
            DOMModifier.prototype.showRowByIndex = function (rowDisplayIndex) {
                var rowElement = this._locator.getRowElementByIndex(rowDisplayIndex);
                this.showElement(rowElement);
            };
            //#endregion
            //#region Cells
            DOMModifier.prototype.redrawCell = function (cell) {
                this._stack.clear();
                this._stack.push(Rendering.RenderingContextType.Cell, cell);
                var wrapper = this._templatesProvider.getCachedTemplate('cellWrapper');
                var html;
                if (cell.renderElement) {
                    html = cell.renderElement(this._templatesProvider);
                }
                else {
                    html = wrapper(cell);
                }
                this._stack.popContext();
                var oldElement = this._locator.getCellElement(cell);
                var newElem = this.replaceElement(oldElement, html);
                this._backBinder.backBind(newElem);
                return newElem;
            };
            DOMModifier.prototype.destroyCell = function (cell) {
                var e = this._locator.getCellElement(cell);
                e.parentElement.removeChild(e);
            };
            DOMModifier.prototype.hideCell = function (cell) {
                var e = this._locator.getCellElement(cell);
                this.hideElement(e);
            };
            DOMModifier.prototype.showCell = function (cell) {
                var e = this._locator.getCellElement(cell);
                this.hideElement(e);
            };
            DOMModifier.prototype.destroyCellsByColumn = function (column) {
                var e = this._locator.getColumnCellsElements(column);
                this.destroyElements(e);
            };
            DOMModifier.prototype.hideCellsByColumn = function (column) {
                var e = this._locator.getColumnCellsElements(column);
                this.hideElements(e);
            };
            DOMModifier.prototype.showCellsByColumn = function (column) {
                var e = this._locator.getColumnCellsElements(column);
                this.showElements(e);
            };
            DOMModifier.prototype.destroyColumnCellsElementsByColumnIndex = function (columnIndex) {
                var e = this._locator.getColumnCellsElementsByColumnIndex(columnIndex);
                this.destroyElements(e);
            };
            DOMModifier.prototype.hideColumnCellsElementsByColumnIndex = function (columnIndex) {
                var e = this._locator.getColumnCellsElementsByColumnIndex(columnIndex);
                this.hideElements(e);
            };
            DOMModifier.prototype.showColumnCellsElementsByColumnIndex = function (columnIndex) {
                var e = this._locator.getColumnCellsElementsByColumnIndex(columnIndex);
                this.showElements(e);
            };
            //#endregion
            /**
             * Redraws header for specified column
             *
             * @param column Column which header is to be redrawn
             */
            DOMModifier.prototype.redrawHeader = function (column) {
                this._stack.clear();
                var html = this._layoutRenderer.renderHeader(column);
                var oldHeaderElement = this._locator.getHeaderElement(column.Header);
                var newElement = this.replaceElement(oldHeaderElement, html);
                this._backBinder.backBind(newElement);
                return newElement;
            };
            DOMModifier.prototype.destroyHeader = function (column) {
                var e = this._locator.getHeaderElement(column.Header);
                this.destroyElement(e);
            };
            DOMModifier.prototype.hideHeader = function (column) {
                var e = this._locator.getHeaderElement(column.Header);
                this.hideElement(e);
            };
            DOMModifier.prototype.showHeader = function (column) {
                var e = this._locator.getHeaderElement(column.Header);
                this.showElement(e);
            };
            DOMModifier.prototype.createElement = function (html) {
                var parser = new Rendering.Html2Dom.HtmlParser();
                return parser.html2Dom(html);
            };
            DOMModifier.prototype.replaceElement = function (element, html) {
                var node = this.createElement(html);
                element.parentElement.replaceChild(node, element);
                this._ed.handleElementDestroy(element);
                return node;
            };
            return DOMModifier;
        }());
        Rendering.DOMModifier = DOMModifier;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        var Html2Dom;
        (function (Html2Dom) {
            var HtmlParserDefinitions = (function () {
                function HtmlParserDefinitions() {
                }
                HtmlParserDefinitions.makeMap = function (str) {
                    var obj = {}, items = str.split(',');
                    for (var i = 0; i < items.length; i++)
                        obj[items[i]] = true;
                    return obj;
                };
                // Regular Expressions for parsing tags and attributes
                HtmlParserDefinitions.startTag = /^<([-A-Za-z0-9_]+)((?:[\s\w\-]+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)>/;
                HtmlParserDefinitions.endTag = /^<\/([-A-Za-z0-9_]+)[^>]*>/;
                HtmlParserDefinitions.attr = /([-A-Za-z0-9_]+)(?:\s*=\s*(?:(?:"((?:\\.|[^"])*)")|(?:'((?:\\.|[^'])*)')|([^>\s]+)))?/g;
                // Empty Elements - HTML 4.01
                HtmlParserDefinitions.empty = HtmlParserDefinitions.makeMap('area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed');
                // Block Elements - HTML 4.01
                HtmlParserDefinitions.block = HtmlParserDefinitions.makeMap('address,applet,blockquote,button,center,dd,del,dir,div,dl,dt,fieldset,form,frameset,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,p,pre,script,table,tbody,td,tfoot,th,thead,tr,ul,span');
                // Inline Elements - HTML 4.01
                HtmlParserDefinitions.inline = HtmlParserDefinitions.makeMap('a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,strike,strong,sub,sup,textarea,tt,u,var');
                // Elements that you can, intentionally, leave open
                // (and which close themselves)
                HtmlParserDefinitions.closeSelf = HtmlParserDefinitions.makeMap('colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr');
                // Attributes that have their values filled in disabled="disabled"
                HtmlParserDefinitions.fillAttrs = HtmlParserDefinitions.makeMap('checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected');
                // Special Elements (can contain anything)
                HtmlParserDefinitions.special = HtmlParserDefinitions.makeMap('script,style');
                return HtmlParserDefinitions;
            }());
            Html2Dom.HtmlParserDefinitions = HtmlParserDefinitions;
            /**
             * Small HTML parser to turn user's HTMl to DOM
             * Thanks to John Resig, co-author of jQuery
             * http://ejohn.org/blog/pure-javascript-html-parser/
             */
            var HtmlParser = (function () {
                function HtmlParser() {
                    this._elems = [];
                    this._topNodes = [];
                    this._stack = [];
                    this._stack.last = function () {
                        if (this.length === 0)
                            return null;
                        return this[this.length - 1];
                    };
                }
                //#region parsering
                HtmlParser.prototype.parse = function (html) {
                    var _this = this;
                    var index, chars, match, last = html;
                    while (html) {
                        chars = true;
                        var stackCurrent = this._stack.last();
                        // Make sure we're not in a script or style element
                        if (!stackCurrent || !HtmlParserDefinitions.special[stackCurrent]) {
                            // Comment
                            if (html.indexOf('<!--') === 0) {
                                index = html.indexOf('-->');
                                if (index >= 0) {
                                    html = html.substring(index + 3);
                                    chars = false;
                                }
                            }
                            else if (html.indexOf('</') === 0) {
                                match = html.match(HtmlParserDefinitions.endTag);
                                if (match) {
                                    html = html.substring(match[0].length);
                                    match[0].replace(HtmlParserDefinitions.endTag, this.parseEndTag.bind(this));
                                    chars = false;
                                }
                            }
                            else if (html.indexOf('<') === 0) {
                                match = html.match(HtmlParserDefinitions.startTag);
                                if (match) {
                                    html = html.substring(match[0].length);
                                    match[0].replace(HtmlParserDefinitions.startTag, this.parseStartTag.bind(this));
                                    chars = false;
                                }
                            }
                            if (chars) {
                                index = html.indexOf('<');
                                var text = index < 0 ? html : html.substring(0, index);
                                html = index < 0 ? '' : html.substring(index);
                                this.chars(text);
                            }
                        }
                        else {
                            if (stackCurrent === 'script') {
                            }
                            html = html.replace(new RegExp("([\\s\\S]*)</" + this._stack.last() + "[^>]*>", 'gm'), function (all, text) {
                                text = text.replace(/<!--(.*?)-->/g, '$1')
                                    .replace(/<!\[CDATA\[(.*?)]]>/g, '$1');
                                _this.chars(text);
                                return '';
                            });
                            this.parseEndTag('', this._stack.last());
                        }
                        if (html === last)
                            throw new Error("HTML Parse Error: " + html);
                        last = html;
                    }
                    // Clean up any remaining tags
                    this.parseEndTag();
                };
                HtmlParser.prototype.parseStartTag = function (tag, tagName, rest, unary) {
                    tagName = tagName.toLowerCase();
                    //if (HtmlParserDefinitions.block[tagName]) {
                    //    while (this._stack.last() && HtmlParserDefinitions.inline[this._stack.last()]) {
                    //        this.parseEndTag("", this._stack.last());
                    //    }
                    //}
                    if (HtmlParserDefinitions.closeSelf[tagName] && this._stack.last() === tagName) {
                        this.parseEndTag('', tagName);
                    }
                    unary = HtmlParserDefinitions.empty[tagName] || !!unary;
                    if (!unary)
                        this._stack.push(tagName);
                    var attrs = [];
                    rest.replace(HtmlParserDefinitions.attr, function (match, name) {
                        var value = arguments[2] ? arguments[2] :
                            arguments[3] ? arguments[3] :
                                arguments[4] ? arguments[4] :
                                    HtmlParserDefinitions.fillAttrs[name] ? name : '';
                        attrs.push({
                            name: name,
                            value: value,
                            escaped: value.replace(/(^|[^\\])"/g, '$1\\\"') //"
                        });
                    });
                    this.start(tagName, attrs, unary);
                    return '';
                };
                HtmlParser.prototype.parseEndTag = function (tag, tagName) {
                    var pos;
                    // If no tag name is provided, clean shop
                    if (!tagName)
                        pos = 0;
                    else {
                        for (pos = this._stack.length - 1; pos >= 0; pos--)
                            if (this._stack[pos] === tagName)
                                break;
                    }
                    if (pos >= 0) {
                        // Close all the open elements, up the stack
                        for (var i = this._stack.length - 1; i >= pos; i--)
                            this.end(this._stack[i]);
                        // Remove the open elements from the stack
                        this._stack.length = pos;
                    }
                    return '';
                };
                HtmlParser.prototype.start = function (tagName, attrs, unary) {
                    var elem = document.createElement(tagName);
                    for (var i = 0; i < attrs.length; i++) {
                        elem.setAttribute(attrs[i].name, attrs[i].value);
                    }
                    if (this._curParentNode && this._curParentNode.appendChild) {
                        this._curParentNode.appendChild(elem);
                    }
                    if (!unary) {
                        this._elems.push(elem);
                        this._curParentNode = elem;
                    }
                };
                HtmlParser.prototype.end = function (tag) {
                    this._elems.length -= 1;
                    if (this._elems.length === 0) {
                        this._topNodes.push(this._curParentNode);
                    }
                    this._curParentNode = this._elems[this._elems.length - 1];
                };
                HtmlParser.prototype.chars = function (text) {
                    if (text.length === 0)
                        return;
                    if (!this._curParentNode) {
                        throw new Error('Html2Dom error');
                    }
                    if (text.indexOf('&') > -1) {
                        var node = document.createElement('div');
                        node.innerHTML = text;
                        text = node.textContent;
                        node.textContent = '';
                    }
                    this._curParentNode.appendChild(document.createTextNode(text));
                };
                //#endregion
                /**
                 * Parses supplied HTML string and promotes it to HTML element.
                 * This implementation also supports <script/> tags inside of supplied HTML. Scripts will be executed
                 * immediately after HTML element creation.
                 *
                 * @param html HTML string to convert to HTML element
                 */
                HtmlParser.prototype.html2Dom = function (html) {
                    this.parse(html.trim());
                    if (this._topNodes.length > 1) {
                        throw new Error('Wrapper must have root element. Templates with multiple root elements are not supported yet');
                    }
                    return this._topNodes.length ? this._topNodes[0] : null;
                };
                /**
                * Parses supplied HTML string and promotes it to set of HTML elements.
                * This implementation also supports <script/> tags inside of supplied HTML. Scripts will be executed
                * immediately after all of HTML elements creation.
                *
                * @param html HTML string to convert to HTML element
                */
                HtmlParser.prototype.html2DomElements = function (html) {
                    this.parse(html.trim());
                    return this._topNodes;
                };
                return HtmlParser;
            }());
            Html2Dom.HtmlParser = HtmlParser;
        })(Html2Dom = Rendering.Html2Dom || (Rendering.Html2Dom = {}));
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        /**
         * Rendering stack class. Provives common helper
         * infrastructure for context-oriented rendering
         * @internal
         */
        var RenderingStack = (function () {
            function RenderingStack() {
                this._contextStack = [];
                /**
                 * Current rendering context
                 */
                this.Current = null;
            }
            /**
             * Clears rendering stack
             * @returns {}
             */
            RenderingStack.prototype.clear = function () {
                this.Current = null;
                if (this._contextStack.length === 0)
                    return;
                this._contextStack = [];
            };
            /**
             * Pushes rendering context into stack
             * @param ctx
             * @returns {}
             */
            RenderingStack.prototype.pushContext = function (ctx) {
                this._contextStack.push(ctx);
                this.Current = ctx;
            };
            /**
             * Pushes rendering context into stack
             * @param elementType What is being rendered
             * @param element Reference to object is being rendered
             * @param columnName Optional column name - for column-contexted rendering objects
             * @returns {}
             */
            RenderingStack.prototype.push = function (elementType, element, columnName) {
                if (columnName === void 0) { columnName = ''; }
                var ctx = {
                    Type: elementType,
                    Object: element,
                    ColumnName: columnName,
                    CurrentTrack: this.getTrack(elementType, element)
                };
                this._contextStack.push(ctx);
                this.Current = ctx;
            };
            RenderingStack.prototype.getTrack = function (elementType, element) {
                var trk;
                switch (elementType) {
                    case RenderingContextType.Plugin:
                        trk = PowerTables.TrackHelper.getPluginTrack(element);
                        break;
                    case RenderingContextType.Header:
                        trk = PowerTables.TrackHelper.getHeaderTrack(element);
                        break;
                    case RenderingContextType.Cell:
                        trk = PowerTables.TrackHelper.getCellTrack(element);
                        break;
                    case RenderingContextType.Row:
                        trk = PowerTables.TrackHelper.getRowTrack(element);
                        break;
                    case RenderingContextType.Custom:
                        trk = 'custom';
                        break;
                    default:
                        throw new Error('Invalid context element type');
                }
                return trk;
            };
            /**
             * Pops rendering context from stack
             * @returns {}
             */
            RenderingStack.prototype.popContext = function () {
                this._contextStack.pop();
                if (this._contextStack.length === 0)
                    this.Current = null;
                else
                    this.Current = this._contextStack[this._contextStack.length - 1];
            };
            return RenderingStack;
        }());
        Rendering.RenderingStack = RenderingStack;
        /**
         * What renders in current helper method
         */
        (function (RenderingContextType) {
            /**
             * Plugin (0)
             */
            RenderingContextType[RenderingContextType["Plugin"] = 0] = "Plugin";
            /**
             * Column header (1)
             */
            RenderingContextType[RenderingContextType["Header"] = 1] = "Header";
            /**
             * Row (containing cells) (2)
             */
            RenderingContextType[RenderingContextType["Row"] = 2] = "Row";
            /**
             * Cell (belonging to row and column) (3)
             */
            RenderingContextType[RenderingContextType["Cell"] = 3] = "Cell";
            /**
             * Custom rendering object.
             * Needed for rendering of random templates bound to random objects
             */
            RenderingContextType[RenderingContextType["Custom"] = 4] = "Custom";
        })(Rendering.RenderingContextType || (Rendering.RenderingContextType = {}));
        var RenderingContextType = Rendering.RenderingContextType;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
/// <reference path="../ExternalTypings.d.ts"/>
/// <reference path="RenderingStack.ts"/>
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        /**
         * Layout renderer
         * Is responsive for common layout rendering (with plugins, columns, etc)
         */
        var LayoutRenderer = (function () {
            /**
            * @internal
            */
            function LayoutRenderer(templates, stack, instances, coreTemplates) {
                this._hb = templates.HandlebarsInstance;
                this._templatesProvider = templates;
                this._stack = stack;
                this._instances = instances;
                this._templateIds = coreTemplates;
                this._hb.registerHelper('Body', this.bodyHelper);
                this._hb.registerHelper('Plugin', this.pluginHelper.bind(this));
                this._hb.registerHelper('Plugins', this.pluginsHelper.bind(this));
                this._hb.registerHelper('Header', this.headerHelper.bind(this));
                this._hb.registerHelper('Headers', this.headersHelper.bind(this));
            }
            //#region Handlebars helpers
            LayoutRenderer.prototype.bodyHelper = function () {
                return '<input type="hidden" data-track="tableBodyHere" style="display:none;"/>';
            };
            //#region Plugin helpers
            LayoutRenderer.prototype.pluginHelper = function (pluginPosition, pluginId) {
                var plugin = this._instances.getPlugin(pluginId, pluginPosition);
                return this.renderPlugin(plugin);
            };
            LayoutRenderer.prototype.pluginsHelper = function (pluginPosition) {
                var plugins = this._instances.getPlugins(pluginPosition);
                if (!plugins)
                    return '';
                var result = '';
                for (var a in plugins) {
                    if (plugins.hasOwnProperty(a)) {
                        var v = plugins[a];
                        result += this.renderPlugin(v);
                    }
                }
                return result;
            };
            /**
            * Renders specified plugin into string including its wrapper
            *
            * @param plugin Plugin interface
            * @returns {}
            */
            LayoutRenderer.prototype.renderPlugin = function (plugin) {
                if (plugin.renderElement)
                    return plugin.renderElement(this._templatesProvider);
                if (!plugin.renderContent)
                    return '';
                this._stack.push(Rendering.RenderingContextType.Plugin, plugin);
                var result = this._templatesProvider.getCachedTemplate(this._templateIds.PluginWrapper)(plugin);
                this._stack.popContext();
                return result;
            };
            //#endregion
            // #region headers helper
            LayoutRenderer.prototype.headerHelper = function (columnName) {
                try {
                    return this.renderHeader(this._instances.getColumn(columnName));
                }
                catch (a) {
                    return '';
                }
            };
            /**
             * Renders specified column's header into string including its wrapper
             *
             * @param column Column which header is about to be rendered
             * @returns {}
             */
            LayoutRenderer.prototype.renderHeader = function (column) {
                this._stack.push(Rendering.RenderingContextType.Header, column.Header, column.RawName);
                var result;
                if (column.Header.renderElement)
                    result = column.Header.renderElement(this._templatesProvider);
                else {
                    result = this._templatesProvider.getCachedTemplate(column.Header.TemplateIdOverride || this._templateIds.HeaderWrapper)(column.Header);
                }
                this._stack.popContext();
                return result;
            };
            LayoutRenderer.prototype.headersHelper = function () {
                var columns = this._instances.getUiColumns();
                var result = '';
                for (var a in columns) {
                    if (columns.hasOwnProperty(a)) {
                        var v = columns[a];
                        result += this.renderHeader(v);
                    }
                }
                return result;
            };
            //#endregion
            //#endregion
            LayoutRenderer.prototype.renderContent = function (columnName) {
                switch (this._stack.Current.Type) {
                    case Rendering.RenderingContextType.Header:
                        return this._stack.Current.Object.Column.Configuration.Title
                            || this._stack.Current.Object.Column.RawName;
                    case Rendering.RenderingContextType.Plugin:
                        // if we are here then plugin's renderContent is not 
                        // overriden
                        throw new Error('It is required to override renderContent for plugin');
                }
                return '';
            };
            return LayoutRenderer;
        }());
        Rendering.LayoutRenderer = LayoutRenderer;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        /**
         * Enity responsible for displaying table
         */
        var Renderer = (function () {
            function Renderer(rootId, prefix, masterTable) {
                this._templatesCache = {};
                this._masterTable = masterTable;
                this._instances = masterTable.InstanceManager;
                this._stack = new Rendering.RenderingStack();
                this.RootElement = document.getElementById(rootId);
                this._rootId = rootId;
                this._events = masterTable.Events;
                this._templateIds = this._instances.Configuration.CoreTemplates;
                this.HandlebarsInstance = Handlebars.create();
                this.HandlebarsInstance.registerHelper('ifq', this.ifqHelper);
                this.HandlebarsInstance.registerHelper('ifcmp', this.ifcompHelper);
                this.HandlebarsInstance.registerHelper('ifloc', this.iflocHelper.bind(this));
                this.HandlebarsInstance.registerHelper('Content', this.contentHelper.bind(this));
                this.HandlebarsInstance.registerHelper('Track', this.trackHelper.bind(this));
                this._prefix = prefix;
                this.cacheTemplates(this._prefix);
                this.LayoutRenderer = new Rendering.LayoutRenderer(this, this._stack, this._instances, this._templateIds);
                this.ContentRenderer = new Rendering.ContentRenderer(this, this._stack, this._instances, this._templateIds);
                this.BackBinder = new Rendering.BackBinder(this.HandlebarsInstance, this._instances, this._stack, this._masterTable.Date);
            }
            //#region Templates caching
            Renderer.prototype.cacheTemplates = function (templatesPrefix) {
                var selector = "script[type=\"text/x-handlebars-template\"][id^=\"" + templatesPrefix + "-\"]";
                var templates = document.querySelectorAll(selector);
                for (var i = 0; i < templates.length; i++) {
                    var item = templates.item(i);
                    var key = item.id.substring(templatesPrefix.length + 1);
                    this._templatesCache[key] = this.HandlebarsInstance.compile(item.innerHTML.substring('<!--'.length, item.innerHTML.length - ('-->'.length)), { noEscape: true });
                }
            };
            /**
             * Retrieves cached template handlebars function
             * @param Template Id
             * @returns Handlebars function
             */
            Renderer.prototype.getCachedTemplate = function (templateId) {
                if (!this._templatesCache.hasOwnProperty(templateId))
                    throw new Error("Cannot find template " + templateId);
                return this._templatesCache[templateId];
            };
            //#endregion
            //#region Public methods
            /**
             * Perform table layout inside specified root element
             */
            Renderer.prototype.layout = function () {
                this._events.LayoutRendered.invokeBefore(this, null);
                var rendered = this.getCachedTemplate(this._templateIds.Layout)(null);
                this.RootElement.innerHTML = rendered;
                var bodyMarker = this.RootElement.querySelector('[data-track="tableBodyHere"]');
                if (!bodyMarker)
                    throw new Error('{{Body}} placeholder is missing in table layout template');
                this.BodyElement = bodyMarker.parentElement;
                this.BodyElement.removeChild(bodyMarker);
                this.Locator = new Rendering.DOMLocator(this.BodyElement, this.RootElement, this._rootId);
                this.Delegator = new PowerTables.Services.EventsDelegatorService(this.Locator, this.BodyElement, this.RootElement, this._rootId, this._masterTable);
                this.BackBinder.Delegator = this.Delegator;
                this.Modifier = new Rendering.DOMModifier(this._stack, this.Locator, this.BackBinder, this, this.LayoutRenderer, this._instances, this.Delegator);
                this.BackBinder.backBind(this.RootElement);
                this._events.LayoutRendered.invokeAfter(this, null);
            };
            /**
             * Clear dynamically loaded table content and replace it with new one
             *
             * @param rows Set of table rows
             */
            Renderer.prototype.body = function (rows) {
                this._events.ClientRowsRendering.invokeBefore(this, rows);
                //this.clearBody();
                var html = this.ContentRenderer.renderBody(rows);
                this.Delegator.handleElementDestroy(this.BodyElement);
                this.BodyElement.innerHTML = html;
                this.BackBinder.backBind(this.BodyElement);
                this._events.DataRendered.invokeAfter(this, null);
            };
            Renderer.prototype.renderObjectContent = function (renderable) {
                this._stack.push(Rendering.RenderingContextType.Custom, renderable);
                var html = renderable.renderContent(this);
                this._stack.popContext();
                return html;
            };
            Renderer.prototype.renderObject = function (templateId, viewModelBehind, targetSelector) {
                var parent = document.querySelector(targetSelector);
                return this.renderObjectTo(templateId, viewModelBehind, parent);
            };
            Renderer.prototype.renderObjectTo = function (templateId, viewModelBehind, target) {
                this._stack.clear();
                this._stack.push(Rendering.RenderingContextType.Custom, viewModelBehind);
                var html = this.getCachedTemplate(templateId)(viewModelBehind);
                var parser = new Rendering.Html2Dom.HtmlParser();
                var element = parser.html2DomElements(html);
                target.innerHTML = '';
                for (var i = 0; i < element.length; i++) {
                    target.appendChild(element[i]);
                }
                this.BackBinder.backBind(target);
                return target;
            };
            Renderer.prototype.destroyAtElement = function (parent) {
                this.Delegator.handleElementDestroy(parent);
                parent.innerHTML = '';
            };
            Renderer.prototype.destroyObject = function (targetSelector) {
                var parent = document.querySelector(targetSelector);
                this.destroyAtElement(parent);
            };
            /**
             * Removes all dynamically loaded content in table
             *
             * @returns {}
             */
            Renderer.prototype.clearBody = function () {
                if (this.Delegator) {
                    this.Delegator.handleElementDestroy(this.BodyElement);
                }
                this.BodyElement.innerHTML = '';
            };
            //#endregion
            //#region Helpers
            Renderer.prototype.contentHelper = function (columnName) {
                if (this._stack.Current.Object.renderContent) {
                    return this._stack.Current.Object.renderContent(this);
                }
                else {
                    switch (this._stack.Current.Type) {
                        case Rendering.RenderingContextType.Header:
                        case Rendering.RenderingContextType.Plugin:
                            return this.LayoutRenderer.renderContent(columnName);
                        case Rendering.RenderingContextType.Row:
                        case Rendering.RenderingContextType.Cell:
                            return this.ContentRenderer.renderContent(columnName);
                        default:
                            throw new Error('Unknown rendering context type');
                    }
                }
            };
            Renderer.prototype.trackHelper = function () {
                var trk = this._stack.Current.CurrentTrack;
                if (trk.length === 0)
                    return '';
                return "data-track=\"" + trk + "\"";
            };
            Renderer.prototype.ifqHelper = function (a, b, opts) {
                if (a == b)
                    return opts.fn(this);
                else
                    return opts.inverse(this);
            };
            Renderer.prototype.ifcompHelper = function (a, b, comparison, opts) {
                var comp = eval(comparison);
                if (comp)
                    return opts.fn(this);
                else
                    return opts.inverse(this);
            };
            Renderer.prototype.iflocHelper = function (location, opts) {
                if (this._stack.Current.Type === Rendering.RenderingContextType.Plugin) {
                    var loc = this._stack.Current.Object.PluginLocation;
                    if (loc.length < location.length)
                        return opts.inverse(this);
                    if (loc.length === location.length && loc === location)
                        return opts.fn(this);
                    if (loc.substring(0, location.length) === location)
                        return opts.fn(this);
                }
                return opts.inverse(this);
            };
            //#endregion
            Renderer.prototype.hasCachedTemplate = function (templateId) { return this._templatesCache.hasOwnProperty(templateId); };
            return Renderer;
        }());
        Rendering.Renderer = Renderer;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Rendering;
    (function (Rendering) {
        /**
         * Component for managing components visual states
         */
        var VisualState = (function () {
            /**
            * @internal
            */
            function VisualState() {
                this.States = {};
                this._subscribers = [];
                this._stopEvents = false;
                this.Current = '';
            }
            /**
             * Subscribes specified function to state change events
             *
             * @param fn Function that will be called when state changes
             */
            VisualState.prototype.subscribeStateChange = function (fn) {
                this._subscribers.push(fn);
            };
            VisualState.prototype.fireHandlers = function (e) {
                if (this._stopEvents)
                    return;
                for (var i = 0; i < this._subscribers.length; i++) {
                    this._subscribers[i](e);
                }
            };
            /**
             * Applies settings for specified state
             *
             * @param state State id
             * @param states VisualStates collection
             */
            VisualState.prototype.changeState = function (state) {
                this.setNormal();
                if (!this.States[state])
                    return;
                this.applyState(this.States[state]);
                this.fireHandlers({ State: state, CurrentState: this.Current, StateWasMixedIn: false });
            };
            /**
             * Mixins settings for specified state
             *
             * @param state State id
             * @param states VisualStates collection
             */
            VisualState.prototype.mixinState = function (state) {
                if (!this.States[state])
                    return;
                this.Current += '+' + state;
                this.applyState(this.States[state]);
                this.fireHandlers({ State: state, CurrentState: this.Current, StateWasMixedIn: true });
            };
            /**
             * Unmixins state of current state
             *
             * @param state State to unmixin
             * @returns {}
             */
            VisualState.prototype.unmixinState = function (state) {
                if (!this.States[state])
                    return;
                var statesHistory = this.Current.split('+');
                this._stopEvents = true;
                this.normalState();
                for (var i = 0; i < statesHistory.length; i++) {
                    if (statesHistory[i] !== null && statesHistory[i].length > 0 && statesHistory[i] !== state) {
                        this.mixinState(statesHistory[i]);
                    }
                }
                this._stopEvents = false;
            };
            /**
             * Reverts elements back to normal state
             *
             * @param states VisualStates collection
             */
            VisualState.prototype.normalState = function () {
                this.setNormal();
            };
            VisualState.prototype.applyState = function (desired) {
                for (var i = 0; i < desired.length; i++) {
                    var ns = desired[i];
                    for (var k = 0; k < ns.classes.length; k++) {
                        var cls = ns.classes[k].substring(1);
                        if (ns.classes[k].charAt(0) === '+') {
                            if (!ns.Element.classList.contains(cls)) {
                                ns.Element.classList.add(cls);
                            }
                        }
                        else {
                            if (ns.Element.classList.contains(cls)) {
                                ns.Element.classList.remove(cls);
                            }
                        }
                    }
                    for (var ak in ns.attrs) {
                        if (ns.attrs.hasOwnProperty(ak)) {
                            if (ns.attrs[ak] == null) {
                                if (ns.Element.hasAttribute(ak))
                                    ns.Element.removeAttribute(ak);
                            }
                            else {
                                if ((!ns.Element.hasAttribute(ak)) || (ns.Element.getAttribute(ak) !== ns.attrs[ak])) {
                                    ns.Element.setAttribute(ak, ns.attrs[ak]);
                                }
                            }
                        }
                    }
                    for (var sk in ns.styles) {
                        if (ns.styles.hasOwnProperty(sk)) {
                            if (ns.Element.style.getPropertyValue(sk) !== ns.styles[sk]) {
                                ns.Element.style.setProperty(sk, ns.styles[sk]);
                            }
                        }
                    }
                    if (ns.content) {
                        var html = this.getContent(ns.Receiver, ns.content);
                        if (html.length > 0) {
                            ns.Element.innerHTML = html;
                        }
                        else {
                            ns.Element.innerHTML = html;
                        }
                    }
                }
            };
            VisualState.prototype.getContent = function (receiver, contentLocation) {
                var path = contentLocation.split('.');
                var co = receiver;
                for (var i = 0; i < path.length; i++) {
                    co = co[path[i]];
                }
                if (co == undefined) {
                    throw new Error("Visual state owner does not contain property or function " + contentLocation);
                }
                var html = '';
                if (typeof co === 'function') {
                    html = co.call(receiver);
                }
                else {
                    html = co;
                }
                return html;
            };
            VisualState.prototype.setNormal = function () {
                this.Current = 'normal';
                this.fireHandlers({ State: 'normal', CurrentState: this.Current, StateWasMixedIn: false });
                var normal = this.States['_normal'];
                for (var i = 0; i < normal.length; i++) {
                    var ns = normal[i];
                    var classes = ns.classes.join(' ');
                    if ((!ns.Element.hasAttribute('class') && classes.length > 0) || (ns.Element.getAttribute('class') !== classes)) {
                        ns.Element.setAttribute('class', classes);
                    }
                    if (ns.Element.innerHTML !== ns.content && ns.content != null)
                        ns.Element.innerHTML = ns.content;
                    for (var ak in ns.attrs) {
                        if (ns.attrs.hasOwnProperty(ak)) {
                            if (ns.attrs[ak] == null) {
                                if (ns.Element.hasAttribute(ak))
                                    ns.Element.removeAttribute(ak);
                            }
                            else {
                                if ((!ns.Element.hasAttribute(ak)) || (ns.Element.getAttribute(ak) !== ns.attrs[ak])) {
                                    ns.Element.setAttribute(ak, ns.attrs[ak]);
                                }
                            }
                        }
                    }
                    for (var sk in ns.styles) {
                        if (ns.styles.hasOwnProperty(sk)) {
                            if (ns.Element.style.getPropertyValue(sk) !== ns.styles[sk]) {
                                ns.Element.style.setProperty(sk, ns.styles[sk]);
                            }
                        }
                    }
                }
            };
            return VisualState;
        }());
        Rendering.VisualState = VisualState;
    })(Rendering = PowerTables.Rendering || (PowerTables.Rendering = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Services;
    (function (Services) {
        var CommandsService = (function () {
            function CommandsService(masterTable) {
                this._masterTable = masterTable;
                this._commandsCache = this._masterTable.InstanceManager.Configuration.Commands;
            }
            CommandsService.prototype.triggerCommand = function (commandName, subject, callback) {
                if (callback === void 0) { callback = null; }
                var command = this._commandsCache[commandName];
                if (command == null || command == undefined) {
                    throw Error("Command " + commandName + " was not found");
                }
                if (command.CanExecute) {
                    if (!command.CanExecute({ Subject: subject, Master: this._masterTable }))
                        return;
                }
                if (command.Confirmation != null && command.Confirmation != undefined) {
                    var tc = new ConfirmationWindowViewModel(this._masterTable, command, subject, callback);
                    var r = this._masterTable.Renderer
                        .renderObject(command.Confirmation.TemplateId, tc, command.Confirmation.TargetSelector);
                    tc.RootElement = r;
                    tc.rendered();
                }
                else {
                    this.triggerCommandWithConfirmation(commandName, subject, null, callback);
                }
            };
            CommandsService.prototype.triggerCommandWithConfirmation = function (commandName, subject, confirmation, callback) {
                if (callback === void 0) { callback = null; }
                var cmd = this._commandsCache[commandName];
                if (cmd.CanExecute) {
                    if (!cmd.CanExecute({ Subject: subject, Master: this._masterTable }))
                        return;
                }
                var params = {
                    CommandDescription: this._commandsCache[commandName],
                    Master: this._masterTable,
                    Selection: this._masterTable.Selection.getSelectedObjects(),
                    Subject: subject,
                    Result: null,
                    Confirmation: confirmation
                };
                if (cmd.Type === PowerTables.Commands.CommandType.Server) {
                    this._masterTable.Loader.requestServer(commandName, function (r) {
                        params.Result = r;
                        if (callback)
                            callback(params);
                        if (cmd.OnSuccess)
                            cmd.OnSuccess(params);
                    }, function (q) {
                        q.AdditionalData['CommandData'] = JSON.stringify({
                            Confirmation: confirmation,
                            Subject: subject
                        });
                        return q;
                    }, function (r) {
                        params.Result = r;
                        if (callback)
                            callback(params);
                        if (cmd.OnFailure)
                            cmd.OnFailure(params);
                    });
                }
                else {
                    cmd.ClientFunction({
                        CommandDescription: this._commandsCache[commandName],
                        Master: this._masterTable,
                        Selection: this._masterTable.Selection.getSelectedObjects(),
                        Subject: subject,
                        Result: null,
                        Confirmation: confirmation
                    });
                }
            };
            return CommandsService;
        }());
        Services.CommandsService = CommandsService;
        var ConfirmationWindowViewModel = (function () {
            function ConfirmationWindowViewModel(masterTable, commandDescription, subject, originalCallback) {
                this.RootElement = null;
                this.ContentPlaceholder = null;
                this.DetailsPlaceholder = null;
                this.RecentDetails = { Data: null };
                this._editorColumn = {};
                this._originalCallback = null;
                //#endregion
                //#region Details loading
                this._loadDetailsTimeout = null;
                //#region Autoform
                this.EditorsSet = {};
                this.ActiveEditors = [];
                this.ValidationMessages = [];
                this._masterTable = masterTable;
                this._commandDescription = commandDescription;
                this._config = commandDescription.Confirmation;
                this._originalCallback = originalCallback;
                this.DataObject = {};
                this._editorObjectModified = {};
                this.Subject = subject;
                this._embedBound = this.embedConfirmation.bind(this);
                if (commandDescription.Confirmation.Autoform != null) {
                    this.produceAutoformColumns(commandDescription.Confirmation.Autoform);
                }
                if (commandDescription.Confirmation.InitConfirmationObject) {
                    commandDescription.Confirmation.InitConfirmationObject(this.DataObject);
                    var confirmationObject = this.DataObject;
                    for (var eo in confirmationObject) {
                        if (confirmationObject.hasOwnProperty(eo)) {
                            this._editorObjectModified[eo] = confirmationObject[eo];
                        }
                    }
                }
                if (commandDescription.Confirmation.Autoform != null) {
                    this.initAutoform(commandDescription.Confirmation.Autoform);
                }
            }
            ConfirmationWindowViewModel.prototype.rendered = function () {
                this.initFormWatchDatepickers(this.RootElement);
                this.loadContent();
                if (this._config.Details != null && this._config.Details != undefined) {
                    if (this._config.Details.LoadImmediately)
                        this.loadDetailsInternal();
                }
            };
            //#region Content loading
            ConfirmationWindowViewModel.prototype.loadContent = function () {
                var _this = this;
                if (this.ContentPlaceholder == null)
                    return;
                if ((!this._config.ContentLoadingUrl) && (!this._config.ContentLoadingCommand))
                    return;
                if (this.VisualStates != null)
                    this.VisualStates.mixinState('contentLoading');
                if (this._config.Autoform != null && this._config.Autoform.DisableWhenContentLoading) {
                    for (var i = 0; i < this.ActiveEditors.length; i++) {
                        if (this.ActiveEditors[i].VisualStates != null)
                            this.ActiveEditors[i].VisualStates.mixinState('loading');
                    }
                }
                if (this._config.ContentLoadingUrl != null && this._config.ContentLoadingUrl != undefined) {
                    var url = this._config.ContentLoadingUrl(this.Subject);
                    this.loadContentByUrl(url, this._config.ContentLoadingMethod);
                }
                else {
                    this._masterTable.Loader.requestServer(this._config.ContentLoadingCommand, function (r) {
                        _this.ContentPlaceholder.innerHTML = r;
                        _this.initFormWatchDatepickers(_this.ContentPlaceholder);
                        _this.contentLoaded();
                    }, this._embedBound, function (r) {
                        _this.ContentPlaceholder.innerHTML = r;
                        _this.contentLoaded();
                    });
                }
            };
            ConfirmationWindowViewModel.prototype.contentLoaded = function () {
                if (this.VisualStates != null)
                    this.VisualStates.unmixinState('contentLoading');
                if (this._config.Autoform != null && this._config.Autoform.DisableWhenContentLoading) {
                    for (var i = 0; i < this.ActiveEditors.length; i++) {
                        if (this.ActiveEditors[i].VisualStates != null)
                            this.ActiveEditors[i].VisualStates.unmixinState('loading');
                    }
                }
            };
            ConfirmationWindowViewModel.prototype.loadContentByUrl = function (url, method) {
                var _this = this;
                var req = this._masterTable.Loader.createXmlHttp();
                req.open(method, url, true);
                req.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                var reqEvent = req.onload ? 'onload' : 'onreadystatechange';
                req[reqEvent] = (function () {
                    if (req.readyState !== 4)
                        return false;
                    _this.ContentPlaceholder.innerHTML = req.responseText;
                    _this.contentLoaded();
                });
                if (method === 'GET' || this.Subject === null)
                    req.send();
                else
                    req.send(JSON.stringify(this.Subject));
            };
            ConfirmationWindowViewModel.prototype.loadDetails = function () {
                var _this = this;
                if (this.DetailsPlaceholder == null)
                    return;
                if (this._config.Details == null || this._config.Details == undefined)
                    return;
                if (this._config.Details.LoadDelay <= 0) {
                    this.loadDetailsInternal();
                }
                else {
                    clearTimeout(this._loadDetailsTimeout);
                    this._loadDetailsTimeout = setTimeout(function () {
                        _this.loadDetailsInternal();
                    }, this._config.Details.LoadDelay);
                }
            };
            ConfirmationWindowViewModel.prototype.loadDetailsInternal = function () {
                var _this = this;
                var parameters = this.collectCommandParameters();
                if (this._config.Details.ValidateToLoad != null) {
                    if (!this._config.Details.ValidateToLoad(parameters))
                        return;
                }
                if (this.VisualStates != null)
                    this.VisualStates.mixinState('detailsLoading');
                if (this._config.Autoform != null && this._config.Autoform.DisableWhileDetailsLoading) {
                    for (var i = 0; i < this.ActiveEditors.length; i++) {
                        if (this.ActiveEditors[i].VisualStates != null)
                            this.ActiveEditors[i].VisualStates.mixinState('loading');
                    }
                }
                if (this._config.Details.CommandName != null && this._config.Details.CommandName != undefined) {
                    this._masterTable.Loader.requestServer(this._config.Details.CommandName, function (r) {
                        _this.detailsLoaded(r);
                    }, this._embedBound, function (r) {
                        _this.detailsLoaded(r);
                    });
                }
                else if (this._config.Details.DetailsFunction != null && this._config.Details.DetailsFunction != undefined) {
                    this.detailsLoaded(this._config.Details.DetailsFunction(parameters));
                }
                else {
                    this.detailsLoaded(this.getConfirmation());
                }
            };
            ConfirmationWindowViewModel.prototype.detailsLoaded = function (detailsResult) {
                if (detailsResult != null && detailsResult != undefined) {
                    if (typeof detailsResult == 'string') {
                        this.DetailsPlaceholder.innerHTML = detailsResult;
                        this.initFormWatchDatepickers(this.DetailsPlaceholder);
                    }
                    else {
                        if (this._config.Details.TempalteId != null && this._config.Details.TempalteId != undefined) {
                            var param = {
                                Subject: this.Subject,
                                Details: detailsResult,
                                Confirmation: this.getConfirmation()
                            };
                            this._masterTable.Renderer
                                .renderObjectTo(this._config.Details.TempalteId, param, this.DetailsPlaceholder);
                            this.initFormWatchDatepickers(this.DetailsPlaceholder);
                        }
                        else {
                            this.DetailsPlaceholder.innerHTML = detailsResult.toString();
                            this.initFormWatchDatepickers(this.DetailsPlaceholder);
                        }
                    }
                }
                this.RecentDetails.Data = detailsResult;
                if (this.VisualStates != null)
                    this.VisualStates.unmixinState('detailsLoading');
                if (this._config.Autoform != null && this._config.Autoform.DisableWhileDetailsLoading) {
                    for (var i = 0; i < this.ActiveEditors.length; i++) {
                        if (this.ActiveEditors[i].VisualStates != null)
                            this.ActiveEditors[i].VisualStates.unmixinState('loading');
                    }
                }
            };
            //#endregion
            ConfirmationWindowViewModel.prototype.embedConfirmation = function (q) {
                q.AdditionalData['CommandData'] = JSON.stringify({
                    Confirmation: this.getConfirmation(),
                    Subject: this.Subject
                });
                return q;
            };
            ConfirmationWindowViewModel.prototype.collectCommandParameters = function () {
                var result = {
                    CommandDescription: this._commandDescription,
                    Master: this._masterTable,
                    Selection: this._masterTable.Selection.getSelectedObjects(),
                    Subject: this.Subject,
                    Result: null,
                    Confirmation: this.getConfirmation()
                };
                return result;
            };
            ConfirmationWindowViewModel.prototype.getConfirmation = function () {
                var confirmation = null;
                if (this._config.Formwatch != null) {
                    confirmation = PowerTables.Plugins.Formwatch.FormwatchPlugin.extractFormData(this._config.Formwatch, this.RootElement, this._masterTable.Date);
                }
                if (this._config.Autoform != null) {
                    this.collectAutoForm();
                    if (confirmation == null)
                        confirmation = {};
                    var confirmationObject = this._editorObjectModified;
                    for (var eo in confirmationObject) {
                        if (confirmationObject.hasOwnProperty(eo)) {
                            confirmation[eo] = confirmationObject[eo];
                        }
                    }
                }
                return confirmation;
            };
            ConfirmationWindowViewModel.prototype.initFormWatchDatepickers = function (parent) {
                var formWatch = this._commandDescription.Confirmation.Formwatch;
                if (formWatch != null) {
                    for (var i = 0; i < formWatch.length; i++) {
                        var conf = formWatch[i];
                        if (conf.TriggerSearchOnEvents && conf.TriggerSearchOnEvents.length > 0) {
                            var element = parent.querySelector(conf.FieldSelector);
                            if (conf.AutomaticallyAttachDatepicker) {
                                this._masterTable.Date.createDatePicker(element);
                            }
                        }
                    }
                }
            };
            ConfirmationWindowViewModel.prototype.confirm = function () {
                var _this = this;
                if (this.VisualStates != null)
                    this.VisualStates.mixinState('saving');
                if (this._config.Autoform != null && this._config.Autoform.DisableWhenContentLoading) {
                    for (var i = 0; i < this.ActiveEditors.length; i++) {
                        if (this.ActiveEditors[i].VisualStates != null)
                            this.ActiveEditors[i].VisualStates.mixinState('saving');
                    }
                }
                if (this._config.OnCommit)
                    this._config.OnCommit(this.collectCommandParameters());
                this._masterTable.Commands.triggerCommandWithConfirmation(this._commandDescription.Name, this.Subject, this.getConfirmation(), function (r) {
                    var params = _this.collectCommandParameters();
                    params.Result = r;
                    _this.RootElement = null;
                    _this.ContentPlaceholder = null;
                    _this.DetailsPlaceholder = null;
                    _this.MasterTable.Renderer.destroyObject(_this._commandDescription.Confirmation.TargetSelector);
                    if (_this._originalCallback)
                        _this._originalCallback(params);
                });
            };
            ConfirmationWindowViewModel.prototype.dismiss = function () {
                this.RootElement = null;
                this.ContentPlaceholder = null;
                this.DetailsPlaceholder = null;
                this.MasterTable.Renderer.destroyObject(this._commandDescription.Confirmation.TargetSelector);
                if (this._config.OnDismiss)
                    this._config.OnDismiss(this.collectCommandParameters());
            };
            ConfirmationWindowViewModel.prototype.Editors = function () {
                var s = '';
                for (var i = 0; i < this.ActiveEditors.length; i++) {
                    s += this.editor(this.ActiveEditors[i]);
                }
                return s;
            };
            ConfirmationWindowViewModel.prototype.editor = function (editor) {
                return this._masterTable.Renderer.renderObjectContent(editor);
            };
            ConfirmationWindowViewModel.prototype.Editor = function (fieldName) {
                var editor = this.EditorsSet[fieldName];
                if (editor == null || editor == undefined)
                    return '';
                return this.editor(editor);
            };
            ConfirmationWindowViewModel.prototype.createEditor = function (fieldName, column) {
                var editorConf = this._commandDescription.Confirmation.Autoform.Autoform.Fields[fieldName];
                var editor = PowerTables.ComponentsContainer.resolveComponent(editorConf.PluginId);
                editor.DataObject = this.DataObject;
                editor.ModifiedDataObject = this._editorObjectModified;
                editor.Data = this.DataObject[fieldName];
                editor.FieldName = fieldName;
                editor.Column = column;
                editor.CanComplete = false;
                editor.IsFormEdit = true;
                editor.IsRowEdit = false;
                editor.IsCellEdit = !(editor.IsFormEdit || editor.IsRowEdit);
                editor.Row = this;
                editor.RawConfig = { Configuration: editorConf, Order: 0, PluginId: editorConf.PluginId, Placement: '', TemplateId: editorConf.TemplateId };
                editor.init(this._masterTable);
                return editor;
            };
            ConfirmationWindowViewModel.prototype.defaultValue = function (col) {
                if (col.IsInteger || col.IsFloat)
                    return 0;
                if (col.IsBoolean)
                    return false;
                if (col.IsDateTime)
                    return new Date();
                if (col.IsString)
                    return '';
                if (col.IsEnum)
                    return 0;
                if (col.Configuration.IsNullable)
                    return null;
                return null;
            };
            ConfirmationWindowViewModel.prototype.produceAutoformColumns = function (autoform) {
                var fields = autoform.Autoform;
                for (var j = 0; j < fields.Fields.length; j++) {
                    this._editorColumn[fields.Fields[j].FieldName] = PowerTables.Services.InstanceManagerService.createColumn(fields.Fields[j].FakeColumn, this._masterTable);
                    this.DataObject[fields.Fields[j].FieldName] = this
                        .defaultValue(this._editorColumn[fields.Fields[j].FieldName]);
                    this._editorObjectModified[fields.Fields[j].FieldName] = this.DataObject[fields.Fields[j].FieldName];
                }
            };
            ConfirmationWindowViewModel.prototype.initAutoform = function (autoform) {
                var fields = autoform.Autoform;
                for (var i = 0; i < fields.Fields.length; i++) {
                    var editorConf = fields.Fields[i];
                    var column = this._editorColumn[editorConf.FieldName];
                    var editor = this.createEditor(editorConf.FieldName, column);
                    this.EditorsSet[editorConf.FieldName] = editor;
                    this.ActiveEditors.push(editor);
                }
            };
            ConfirmationWindowViewModel.prototype.notifyChanged = function (editor) {
                this.retrieveEditorData(editor);
                for (var i = 0; i < this.ActiveEditors.length; i++) {
                    this.ActiveEditors[i].notifyObjectChanged();
                }
            };
            ConfirmationWindowViewModel.prototype.reject = function (editor) {
                this._editorObjectModified[editor.FieldName] = this.DataObject[editor.FieldName];
                this.setEditorValue(editor);
            };
            ConfirmationWindowViewModel.prototype.commit = function (editor) {
                var idx = this.ActiveEditors.indexOf(editor);
                if (this.ActiveEditors.length > idx + 1) {
                    idx = -1;
                    for (var i = 0; i < this.ActiveEditors.length; i++) {
                        if (!this.ActiveEditors[i].IsValid) {
                            idx = i;
                            break;
                        }
                    }
                    if (idx !== -1)
                        this.ActiveEditors[idx].focus();
                }
            };
            ConfirmationWindowViewModel.prototype.retrieveEditorData = function (editor, errors) {
                var errorsArrayPresent = (!(!errors));
                errors = errors || [];
                var thisErrors = [];
                this._editorObjectModified[editor.FieldName] = editor.getValue(thisErrors);
                for (var j = 0; j < thisErrors.length; j++) {
                    thisErrors[j].Message = editor.getErrorMessage(thisErrors[j].Code);
                }
                editor.Data = this._editorObjectModified[editor.FieldName];
                editor.ValidationMessages = thisErrors;
                for (var i = 0; i < thisErrors.length; i++) {
                    errors.push(thisErrors[i]);
                }
                if (thisErrors.length > 0) {
                    editor.IsValid = false;
                    if (editor.VisualStates != null)
                        editor.VisualStates.changeState('invalid');
                }
                else {
                    editor.IsValid = true;
                    if (editor.VisualStates != null)
                        editor.VisualStates.normalState();
                }
                if (!errorsArrayPresent) {
                    this.ValidationMessages.concat(errors);
                }
            };
            ConfirmationWindowViewModel.prototype.setEditorValue = function (editor) {
                editor.IsInitialValueSetting = true;
                editor.setValue(this._editorObjectModified[editor.FieldName]);
                editor.IsInitialValueSetting = false;
            };
            ConfirmationWindowViewModel.prototype.collectAutoForm = function () {
                this.ValidationMessages = [];
                var errors = [];
                for (var i = 0; i < this.ActiveEditors.length; i++) {
                    this.retrieveEditorData(this.ActiveEditors[i], errors);
                }
                this.ValidationMessages = errors; //todo draw validation errors
                if (this.ValidationMessages.length > 0) {
                    this.MasterTable.Events.EditValidationFailed.invokeAfter(this, {
                        OriginalDataObject: this.DataObject,
                        ModifiedDataObject: this._editorObjectModified,
                        Messages: this.ValidationMessages
                    });
                    return false;
                }
                return true;
            };
            return ConfirmationWindowViewModel;
        }());
        Services.ConfirmationWindowViewModel = ConfirmationWindowViewModel;
    })(Services = PowerTables.Services || (PowerTables.Services = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Services;
    (function (Services) {
        /**
         * This entity is responsible for integration of data between storage and rendere.
         * Also it provides functionality for table events subscription and
         * elements location
         */
        var Controller = (function () {
            /**
             * @internal
             */
            function Controller(masterTable) {
                this._masterTable = masterTable;
            }
            /**
             * Initializes full reloading cycle
             * @returns {}
             */
            Controller.prototype.reload = function (forceServer) {
                var _this = this;
                this._masterTable.Loader.requestServer('query', function (e) {
                    if (e == null) {
                        _this.redrawVisibleData();
                        return;
                    }
                    if (e['Success'] === false && e['Message'] && e['Message']['__Go7XIV13OA'] === true) {
                        return;
                    }
                    _this.redrawVisibleData();
                }, null, null, forceServer);
            };
            /**
             * Redraws row containing currently visible data object
             *
             * @param dataObject Data object
             * @param idx
             * @returns {}
             */
            Controller.prototype.redrawVisibleDataObject = function (dataObject, idx) {
                if (idx == null || idx == undefined) {
                    var dispIndex = this._masterTable.DataHolder.localLookupDisplayedDataObject(dataObject);
                    if (dispIndex == null)
                        return null;
                    idx = dispIndex.DisplayedIndex;
                }
                var row = this.produceRow(dataObject, idx);
                return this._masterTable.Renderer.Modifier.redrawRow(row);
            };
            /**
             * Redraws locally visible data
             */
            Controller.prototype.redrawVisibleData = function () {
                var rows = this.produceRows();
                if (rows.length === 0) {
                    this._masterTable.MessageService.showMessage({
                        Class: 'noresults',
                        Title: 'No data found',
                        Details: 'Try specifying different filter settings',
                        Type: PowerTables.MessageType.Banner
                    });
                }
                else {
                    this._masterTable.Renderer.body(rows);
                }
            };
            /**
             * Redraws locally visible data
             */
            Controller.prototype.replaceVisibleData = function (rows) {
                this._masterTable.Renderer.body(rows);
            };
            Controller.prototype.redrawVisibleCells = function (dataObject, columns) {
                var dispIndex = this._masterTable.DataHolder.localLookupDisplayedDataObject(dataObject);
                if (dispIndex == null)
                    throw new Error('Cannot redraw cells because proposed object it is not displaying currently');
                var row = this.produceRow(dataObject, dispIndex.DisplayedIndex);
                for (var i = 0; i < columns.length; i++) {
                    if (row.Cells.hasOwnProperty(columns[i].RawName)) {
                        this._masterTable.Renderer.Modifier.redrawCell(row.Cells[columns[i].RawName]);
                    }
                }
            };
            Controller.prototype.redrawColumns = function (columns) {
                var rows = this.produceRows();
                for (var i = 0; i < rows.length; i++) {
                    for (var j = 0; j < columns.length; j++) {
                        this._masterTable.Renderer.Modifier.redrawCell(rows[i].Cells[columns[j].RawName]);
                    }
                }
            };
            /**
             * @internal
             */
            Controller.prototype.drawAdjustmentResult = function (adjustmentResult) {
                this._masterTable.Events.AdjustmentResult.invoke(this, adjustmentResult);
                var rows = this.produceRows();
                for (var i = 0; i < rows.length; i++) {
                    var needRedrawRow = false;
                    var cellsToRedraw = [];
                    if (adjustmentResult.AddedData.indexOf(rows[i]) > -1) {
                        rows[i].IsAdded = true;
                        needRedrawRow = true;
                    }
                    else {
                        var adjIdx = adjustmentResult.TouchedData.indexOf(rows[i].DataObject);
                        if (adjIdx > -1) {
                            rows[i].IsUpdated = true;
                            needRedrawRow = true;
                            var cols = adjustmentResult.TouchedColumns[adjIdx];
                            for (var j = 0; j < cols.length; j++) {
                                if (!rows[i].Cells.hasOwnProperty(cols[j]))
                                    continue;
                                var cell = rows[i].Cells[cols[j]];
                                cell.IsUpdated = true;
                                cellsToRedraw.push(cell);
                            }
                        }
                    }
                    if (needRedrawRow && !adjustmentResult.NeedRedrawAllVisible) {
                        this._masterTable.Renderer.Modifier.redrawRow(rows[i]);
                    }
                    else {
                        if (cellsToRedraw.length > 0) {
                            for (var k = 0; k < cellsToRedraw.length; k++) {
                                this._masterTable.Renderer.Modifier.redrawCell(cellsToRedraw[k]);
                            }
                        }
                    }
                }
                if (adjustmentResult.NeedRedrawAllVisible) {
                    if (rows.length == 0)
                        this.redrawVisibleData();
                    else
                        this._masterTable.Renderer.body(rows);
                }
                this._masterTable.Events.Adjustment.invokeAfter(this, adjustmentResult);
            };
            /**
             * Converts data object,row and column to cell
             *
             * @param dataObject Data object
             * @param idx Object's displaying index
             * @param column Column that this cell belongs to
             * @param row Row that this cell belongs to
             * @returns {ICell} Cell representing data
             */
            Controller.prototype.produceCell = function (dataObject, column, row) {
                return {
                    Column: column,
                    Data: dataObject[column.RawName],
                    DataObject: dataObject,
                    Row: row,
                    renderContent: null,
                    renderElement: null,
                    IsSelected: this._masterTable.Selection.isCellSelected(dataObject, column)
                };
            };
            /**
             * Converts data object to display row
             *
             * @param dataObject Data object
             * @param idx Object's displaying index
             * @param columns Optional displaying columns set
             * @returns {IRow} Row representing displayed object
             */
            Controller.prototype.produceRow = function (dataObject, idx, columns) {
                if (!dataObject)
                    return null;
                if (!columns)
                    columns = this._masterTable.InstanceManager.getUiColumns();
                var rw = {
                    DataObject: dataObject,
                    Index: idx,
                    MasterTable: this._masterTable,
                    IsSelected: this._masterTable.Selection.isSelected(dataObject),
                    CanBeSelected: this._masterTable.Selection.canSelect(dataObject),
                    Cells: null
                };
                if (dataObject.IsMessageObject) {
                    dataObject.UiColumnsCount = columns.length;
                    rw.renderElement = function (hb) { return hb.getCachedTemplate('messages')(dataObject); };
                    rw.IsSpecial = true;
                    return rw;
                }
                var cells = {};
                for (var j = 0; j < columns.length; j++) {
                    var col = columns[j];
                    var cell = this.produceCell(dataObject, col, rw);
                    cells[col.RawName] = cell;
                }
                rw.Cells = cells;
                return rw;
            };
            Controller.prototype.produceRows = function () {
                this._masterTable.Events.DataRendered.invokeBefore(this, null);
                var result = [];
                var columns = this._masterTable.InstanceManager.getUiColumns();
                for (var i = 0; i < this._masterTable.DataHolder.DisplayedData.length; i++) {
                    var row = this.produceRow(this._masterTable.DataHolder.DisplayedData[i], i, columns);
                    if (!row)
                        continue;
                    result.push(row);
                }
                return result;
            };
            return Controller;
        }());
        Services.Controller = Controller;
    })(Services = PowerTables.Services || (PowerTables.Services = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Services;
    (function (Services) {
        /**
         * Class that is responsible for holding and managing data loaded from server
         */
        var DataHolderService = (function () {
            function DataHolderService(masterTable) {
                this._comparators = {};
                this._filters = [];
                this._anyClientFiltration = false;
                this._clientValueFunction = {};
                /**
                 * Data that actually is currently displayed in table
                 */
                this.DisplayedData = [];
                /**
                 * Data that was recently loaded from server
                 */
                this.StoredData = [];
                this._manadatoryOrderings = [];
                //#endregion
                this.Stats = {
                    CurrentPage: 0,
                    TotalPages: 0,
                    CurrentPageSize: 0,
                    TotalItems: 0,
                    CurrentlyDisplayingItems: 0,
                    TotalLoadedItems: 0
                };
                this._rawColumnNames = masterTable.InstanceManager.getColumnNames();
                this._events = masterTable.Events;
                this._instances = masterTable.InstanceManager;
                this._masterTable = masterTable;
                for (var ck in masterTable.InstanceManager.Columns) {
                    var col = masterTable.InstanceManager.Columns[ck];
                    if (col.Configuration.ClientValueFunction != null && col.Configuration.ClientValueFunction != undefined) {
                        this._clientValueFunction[col.RawName] = col.Configuration.ClientValueFunction;
                    }
                }
                this._configuration = masterTable.InstanceManager.Configuration;
                this.compileComparisonFunction();
            }
            /**
             * Registers client filter
             *
             * @param filter Client filter
             */
            DataHolderService.prototype.registerClientFilter = function (filter) {
                this._anyClientFiltration = true;
                this._filters.push(filter);
            };
            DataHolderService.prototype.getClientFilters = function () {
                return this._filters;
            };
            DataHolderService.prototype.clearClientFilters = function () {
                this._anyClientFiltration = false;
                this._filters = [];
            };
            DataHolderService.prototype.compileComparisonFunction = function () {
                if ((!this._configuration.KeyFields) || (this._configuration.KeyFields.length === 0)) {
                    this.DataObjectComparisonFunction = (function () {
                        throw Error('You must specify key fields for table row to use current setup. Please call .PrimaryKey on configuration object and specify set of columns exposing primary key.');
                    });
                    this.PrimaryKeyFunction = (function () {
                        throw Error('You must specify key fields for table row to use current setup. Please call .PrimaryKey on configuration object and specify set of columns exposing primary key.');
                    });
                    this._hasPrimaryKey = false;
                    return;
                }
                if (this._configuration.KeyFields.length === 0)
                    return;
                if (!window['___ltcstrh']) {
                    window['___ltcstrh'] = function (x) {
                        if (x == null)
                            return '';
                        var r = '';
                        for (var i = 0; i < x.length; i++) {
                            if (x[i] === '\\')
                                r += '\\\\';
                            else if (x[i] === ':')
                                r += '\\:';
                            else
                                r += x[i];
                        }
                        return r;
                    };
                }
                var fields = [];
                for (var i = 0; i < this._configuration.KeyFields.length; i++) {
                    var field = this._configuration.KeyFields[i];
                    if (this._instances.Columns[this._configuration.KeyFields[i]].IsDateTime) {
                        fields.push("((x." + field + ")==null?'':((x." + field + ").getTime()))");
                    }
                    else {
                        if (this._instances.Columns[this._configuration.KeyFields[i]].IsBoolean) {
                            fields.push("((x." + field + ")==null?'':(x." + field + "?'1':'0'))");
                        }
                        else if (this._instances.Columns[this._configuration.KeyFields[i]].IsString) {
                            fields.push("(window.___ltcstrh(x." + field + "))");
                        }
                        else {
                            fields.push("((x." + field + ")==null?'':(x." + field + ".toString()))");
                        }
                    }
                }
                var keyStr = fields.join('+":"+');
                this.DataObjectComparisonFunction = function (x, y) { return x['__key'] === y['__key']; };
                this.PrimaryKeyFunction = eval("(function(x) { return (" + keyStr + ") + ':'; })");
                this._hasPrimaryKey = true;
            };
            /**
             * Registers new client ordering comparer function
             *
             * @param dataField Field for which this comparator is applicable
             * @param comparator Comparator fn that should return 0 if entries are equal, -1 if a<b, +1 if a>b
             * @returns {}
             */
            DataHolderService.prototype.registerClientOrdering = function (dataField, comparator, mandatory) {
                if (mandatory === void 0) { mandatory = false; }
                this._anyClientFiltration = true;
                this._comparators[dataField] = comparator;
                if (mandatory)
                    this._manadatoryOrderings.push(dataField);
            };
            DataHolderService.prototype.isClientFiltrationPending = function () {
                return (this.EnableClientSkip || this.EnableClientTake || this._anyClientFiltration);
            };
            DataHolderService.prototype.deserializeData = function (source) {
                var data = [];
                var obj = {};
                var currentColIndex = this.getNextNonSpecialColumn(-1);
                var currentCol = this._rawColumnNames[currentColIndex];
                for (var i = 0; i < source.length; i++) {
                    if (this._instances.Columns[currentCol].IsDateTime) {
                        if (source[i]) {
                            obj[currentCol] = this._masterTable.Date.parse(source[i]);
                        }
                        else {
                            obj[currentCol] = null;
                        }
                    }
                    else {
                        obj[currentCol] = source[i];
                    }
                    currentColIndex = this.getNextNonSpecialColumn(currentColIndex);
                    if (currentColIndex === -1) {
                        currentColIndex = this.getNextNonSpecialColumn(currentColIndex);
                        for (var ck in this._clientValueFunction) {
                            obj[ck] = this._clientValueFunction[ck](obj);
                        }
                        data.push(obj);
                        if (this._hasPrimaryKey) {
                            obj['__key'] = this.PrimaryKeyFunction(obj);
                        }
                        obj = {};
                    }
                    currentCol = this._rawColumnNames[currentColIndex];
                }
                return data;
            };
            DataHolderService.prototype.getNextNonSpecialColumn = function (currentColIndex) {
                do {
                    currentColIndex++;
                    if (currentColIndex >= this._rawColumnNames.length) {
                        return -1;
                    }
                } while (this._instances.Columns[this._rawColumnNames[currentColIndex]].Configuration.IsSpecial);
                return currentColIndex;
            };
            /**
            * Parses response from server and turns it to objects array
            */
            DataHolderService.prototype.storeResponse = function (response, clientQuery) {
                var data = [];
                var obj = {};
                var currentColIndex = this.getNextNonSpecialColumn(-1);
                var currentCol = this._rawColumnNames[currentColIndex];
                this._storedDataCache = {};
                for (var i = 0; i < response.Data.length; i++) {
                    if (this._instances.Columns[currentCol].IsDateTime) {
                        if (response.Data[i]) {
                            obj[currentCol] = this._masterTable.Date.parse(response.Data[i]);
                        }
                        else {
                            obj[currentCol] = null;
                        }
                    }
                    else {
                        obj[currentCol] = response.Data[i];
                    }
                    currentColIndex = this.getNextNonSpecialColumn(currentColIndex);
                    if (currentColIndex === -1) {
                        currentColIndex = this.getNextNonSpecialColumn(currentColIndex);
                        for (var ck in this._clientValueFunction) {
                            obj[ck] = this._clientValueFunction[ck](obj);
                        }
                        data.push(obj);
                        if (this._hasPrimaryKey) {
                            obj['__key'] = this.PrimaryKeyFunction(obj);
                            this._storedDataCache[obj['__key']] = obj; // line that makes difference
                        }
                        obj = {};
                    }
                    currentCol = this._rawColumnNames[currentColIndex];
                }
                this.StoredData = data;
                this.filterStoredData(clientQuery);
                this.updateStats(response.ResultsCount);
            };
            /**
             * Filters supplied data set using client query
             *
             * @param objects Data set
             * @param query Client query
             * @returns {Array} Array of filtered items
             */
            DataHolderService.prototype.filterSet = function (objects, query) {
                var result = [];
                if (this._filters.length !== 0) {
                    for (var i = 0; i < objects.length; i++) {
                        var obj = objects[i];
                        var acceptable = true;
                        for (var j = 0; j < this._filters.length; j++) {
                            var filter = this._filters[j];
                            acceptable = filter.filterPredicate(obj, query);
                            if (!acceptable)
                                break;
                        }
                        if (!acceptable)
                            continue;
                        result.push(obj);
                    }
                    return result;
                }
                return objects;
            };
            /**
            * Orders supplied data set using client query
            *
            * @param objects Data set
            * @param query Client query
            * @returns {Array} Array of ordered items
            */
            DataHolderService.prototype.orderSet = function (objects, query) {
                if (query.Orderings) {
                    var sortFn = '';
                    var comparersArg = '';
                    var orderFns = [];
                    for (var i = 0; i < this._rawColumnNames.length; i++) {
                        var orderingKey = this._rawColumnNames[i];
                        if (query.Orderings.hasOwnProperty(orderingKey) || (this._manadatoryOrderings.indexOf(orderingKey) >= 0)) {
                            var orderingDirection = query.Orderings[orderingKey];
                            if (orderingDirection === PowerTables.Ordering.Neutral)
                                continue;
                            if (!this._comparators[orderingKey])
                                continue;
                            var negate = orderingDirection === PowerTables.Ordering.Descending;
                            sortFn += "cc=f" + orderFns.length + "(a,b); ";
                            comparersArg += "f" + orderFns.length + ",";
                            orderFns.push(this._comparators[orderingKey]);
                            sortFn += "if (cc!==0) return " + (negate ? '-cc' : 'cc') + "; ";
                        }
                    }
                    if (sortFn.length === 0)
                        return objects;
                    comparersArg = comparersArg.substr(0, comparersArg.length - 1);
                    sortFn = "(function(" + comparersArg + "){ return (function (a,b) { var cc = 0; " + sortFn + " return 0; }); })";
                    var sortFunction = eval(sortFn).apply(null, orderFns);
                    var ordered = objects.sort(sortFunction);
                    return ordered;
                }
                return objects;
            };
            DataHolderService.prototype.skipTakeSet = function (ordered, query) {
                var selected = ordered;
                var startingIndex = query.Paging.PageIndex * query.Paging.PageSize;
                if (startingIndex > ordered.length)
                    startingIndex = 0;
                var take = query.Paging.PageSize;
                if (this.EnableClientSkip && this.EnableClientTake) {
                    if (take === 0)
                        selected = ordered.slice(startingIndex);
                    else
                        selected = ordered.slice(startingIndex, startingIndex + take);
                }
                else {
                    if (this.EnableClientSkip) {
                        selected = ordered.slice(startingIndex);
                    }
                    else if (this.EnableClientTake) {
                        if (take !== 0) {
                            selected = ordered.slice(0, query.Paging.PageSize);
                        }
                    }
                }
                return selected;
            };
            /**
             * Filter recent data and store it to currently displaying data
             *
             * @param query Table query
             * @returns {}
             */
            DataHolderService.prototype.filterStoredData = function (query) {
                this._events.ClientDataProcessing.invokeBefore(this, query);
                this.DisplayedData = this.StoredData;
                this.Filtered = this.StoredData;
                this.Ordered = this.StoredData;
                this.RecentClientQuery = query;
                if (this.isClientFiltrationPending() && (!(!query))) {
                    var copy = this.StoredData.slice();
                    var filtered = this.filterSet(copy, query);
                    var ordered = this.orderSet(filtered, query);
                    var selected = this.skipTakeSet(ordered, query);
                    this.Filtered = filtered;
                    this.Ordered = ordered;
                    this.DisplayedData = selected;
                }
                this.updateStats();
                this._events.ClientDataProcessing.invokeAfter(this, {
                    Displaying: this.DisplayedData,
                    Filtered: this.Filtered,
                    Ordered: this.Ordered,
                    Source: this.StoredData
                });
            };
            /**
             * Filter recent data and store it to currently displaying data
             * using query that was previously applied to local data
             */
            DataHolderService.prototype.filterStoredDataWithPreviousQuery = function () {
                this.filterStoredData(this.RecentClientQuery);
            };
            //#endregion
            //#region Lookups
            /**
             * Finds data matching predicate among locally stored data
             *
             * @param predicate Filtering predicate returning true for required objects
             * @returns Array of ILocalLookupResults
             */
            DataHolderService.prototype.localLookup = function (predicate, setToLookup) {
                if (setToLookup === void 0) { setToLookup = this.StoredData; }
                var result = [];
                for (var i = 0; i < setToLookup.length; i++) {
                    if (predicate(setToLookup[i])) {
                        result.push({
                            DataObject: setToLookup[i],
                            IsCurrentlyDisplaying: false,
                            LoadedIndex: i,
                            DisplayedIndex: -1
                        });
                    }
                }
                for (var j = 0; j < result.length; j++) {
                    var idx = this.DisplayedData.indexOf(result[j].DataObject);
                    if (idx >= 0) {
                        result[j].IsCurrentlyDisplaying = true;
                        result[j].DisplayedIndex = idx;
                    }
                }
                return result;
            };
            /**
             * Finds data object among currently displayed and returns ILocalLookupResult
             * containing also Loaded-set index of this data object
             *
             * @param index Index of desired data object among locally displaying data
             * @returns ILocalLookupResult
             */
            DataHolderService.prototype.localLookupDisplayedDataObject = function (dataObject) {
                var index = this.DisplayedData.indexOf(dataObject);
                if (index < 0)
                    return null;
                var result = {
                    DataObject: dataObject,
                    IsCurrentlyDisplaying: true,
                    DisplayedIndex: index,
                    LoadedIndex: this.StoredData.indexOf(dataObject)
                };
                return result;
            };
            /**
             * Finds data object among currently displayed and returns ILocalLookupResult
             * containing also Loaded-set index of this data object
             *
             * @param index Index of desired data object among locally displaying data
             * @returns ILocalLookupResult
             */
            DataHolderService.prototype.localLookupStoredDataObject = function (dataObject) {
                var index = this.StoredData.indexOf(dataObject);
                if (index < 0)
                    return null;
                var result = {
                    DataObject: dataObject,
                    IsCurrentlyDisplaying: true,
                    DisplayedIndex: this.DisplayedData.indexOf(dataObject),
                    LoadedIndex: index
                };
                return result;
            };
            /**
             * Finds data object among currently displayed and returns ILocalLookupResult
             * containing also Loaded-set index of this data object
             *
             * @param index Index of desired data object among locally displaying data
             * @returns ILocalLookupResult
             */
            DataHolderService.prototype.localLookupDisplayedData = function (index) {
                if (index < 0)
                    return null;
                if (index > this.DisplayedData.length)
                    return null;
                var result = {
                    DataObject: this.DisplayedData[index],
                    IsCurrentlyDisplaying: true,
                    DisplayedIndex: index,
                    LoadedIndex: this.StoredData.indexOf(this.DisplayedData[index])
                };
                return result;
            };
            /**
             * Finds data object among recently loaded and returns ILocalLookupResult
             * containing also Loaded-set index of this data object
             *
             * @param index Index of desired data object among locally displaying data
             * @returns ILocalLookupResult
             */
            DataHolderService.prototype.localLookupStoredData = function (index) {
                if (index < 0)
                    return null;
                if (index > this.StoredData.length)
                    return null;
                var result = {
                    DataObject: this.StoredData[index],
                    IsCurrentlyDisplaying: true,
                    DisplayedIndex: this.DisplayedData.indexOf(this.StoredData[index]),
                    LoadedIndex: index
                };
                return result;
            };
            DataHolderService.prototype.getByPrimaryKeyObject = function (primaryKeyPart) {
                return this._storedDataCache[this.PrimaryKeyFunction(primaryKeyPart)];
            };
            DataHolderService.prototype.getByPrimaryKey = function (primaryKey) {
                return this._storedDataCache[primaryKey];
            };
            /**
             * Finds data object among recently loaded by primary key and returns ILocalLookupResult
             * containing also Loaded-set index of this data object
             *
             * @param dataObject Object to match
             * @returns ILocalLookupResult
             */
            DataHolderService.prototype.localLookupPrimaryKey = function (dataObject, setToLookup) {
                if (setToLookup === void 0) { setToLookup = this.StoredData; }
                var found = null;
                var foundIdx = 0;
                for (var i = 0; i < setToLookup.length; i++) {
                    if (this.DataObjectComparisonFunction(dataObject, setToLookup[i])) {
                        found = setToLookup[i];
                        foundIdx = i;
                        break;
                    }
                }
                var result;
                if (found == null) {
                    result = {
                        DataObject: null,
                        IsCurrentlyDisplaying: false,
                        DisplayedIndex: -1,
                        LoadedIndex: -1
                    };
                }
                else {
                    var cdisp = this.DisplayedData.indexOf(found);
                    result = {
                        DataObject: found,
                        IsCurrentlyDisplaying: cdisp > -1,
                        DisplayedIndex: cdisp,
                        LoadedIndex: foundIdx
                    };
                }
                return result;
            };
            //#endregion
            //#region Adjustments
            DataHolderService.prototype.copyData = function (source, target) {
                var modColumns = [];
                for (var cd in this._instances.Columns) {
                    if (this._instances.Columns[cd].Configuration.IsSpecial)
                        continue;
                    if (source.hasOwnProperty(cd)) {
                        var src = source[cd];
                        var trg = target[cd];
                        if (this._instances.Columns[cd].IsDateTime) {
                            src = (src == null) ? null : src.getTime();
                            trg = (trg == null) ? null : trg.getTime();
                        }
                        if (src !== trg) {
                            modColumns.push(cd);
                            target[cd] = source[cd];
                        }
                    }
                }
                return modColumns;
            };
            DataHolderService.prototype.defaultObject = function () {
                var def = {};
                for (var i = 0; i < this._rawColumnNames.length; i++) {
                    var col = this._masterTable.InstanceManager.Columns[this._rawColumnNames[i]];
                    if (col.IsInteger || col.IsFloat)
                        def[col.RawName] = 0;
                    if (col.IsBoolean)
                        def[col.RawName] = false;
                    if (col.IsDateTime)
                        def[col.RawName] = new Date();
                    if (col.IsString)
                        def[col.RawName] = '';
                    if (col.IsEnum)
                        def[col.RawName] = 0;
                    if (col.Configuration.IsNullable)
                        def[col.RawName] = null;
                }
                for (var ck in this._clientValueFunction) {
                    def[ck] = this._clientValueFunction[ck](def);
                }
                if (this._hasPrimaryKey) {
                    def['__key'] = this.PrimaryKeyFunction(def);
                }
                return def;
            };
            DataHolderService.prototype.proceedAdjustments = function (adjustments) {
                this._masterTable.Events.Adjustment.invokeBefore(this, adjustments);
                if (this.RecentClientQuery == null || this.RecentClientQuery == undefined)
                    return null;
                var needRefilter = false;
                var redrawVisibles = [];
                var touchedData = [];
                var touchedColumns = [];
                var added = [];
                var adjustedObjects = this.deserializeData(adjustments.UpdatedData);
                for (var i = 0; i < adjustedObjects.length; i++) {
                    var update = this.getByPrimaryKey(adjustedObjects[i]['__key']);
                    if (!update) {
                        //if (this.StoredData.length > 0) { whoai?!
                        this.StoredData.push(adjustedObjects[i]);
                        added.push(adjustedObjects[i]);
                        this._storedDataCache[adjustedObjects[i]['__key']] = adjustedObjects[i];
                        needRefilter = true;
                    }
                    else {
                        touchedColumns.push(this.copyData(adjustedObjects[i], update));
                        touchedData.push(update);
                        if (update.DisplayedIndex > 0) {
                            redrawVisibles.push(update);
                        }
                        needRefilter = true;
                    }
                }
                for (var j = 0; j < adjustments.RemoveKeys.length; j++) {
                    var dataObject = this.getByPrimaryKey(adjustments.RemoveKeys[j]);
                    if (dataObject == null || dataObject == undefined)
                        continue;
                    if (this.StoredData.indexOf(dataObject) > -1) {
                        this.StoredData.splice(this.StoredData.indexOf(dataObject), 1);
                        needRefilter = true;
                        delete this._storedDataCache[adjustments.RemoveKeys[j]];
                    }
                    if (this.Filtered.indexOf(dataObject) > -1) {
                        this.Filtered.splice(this.Filtered.indexOf(dataObject), 1);
                        needRefilter = true;
                    }
                    if (this.Ordered.indexOf(dataObject) > -1) {
                        this.Ordered.splice(this.Ordered.indexOf(dataObject), 1);
                        needRefilter = true;
                    }
                }
                this._masterTable.Selection.handleAdjustments(added, adjustments.RemoveKeys);
                if (needRefilter) {
                    this.filterStoredDataWithPreviousQuery();
                    redrawVisibles = [];
                    for (var k = 0; k < added.length; k++) {
                        if (this.DisplayedData.indexOf(added[k]) > -1)
                            redrawVisibles.push(added[k]);
                    }
                    for (var l = 0; l < touchedData.length; l++) {
                        if (this.DisplayedData.indexOf(touchedData[l]) > -1)
                            redrawVisibles.push(touchedData[l]);
                    }
                }
                return {
                    NeedRedrawAllVisible: needRefilter,
                    VisiblesToRedraw: redrawVisibles,
                    AddedData: added,
                    TouchedData: touchedData,
                    TouchedColumns: touchedColumns
                };
            };
            DataHolderService.prototype.updateStats = function (totalItems) {
                this.Stats.CurrentPage = this.RecentClientQuery.Paging.PageIndex;
                this.Stats.CurrentPageSize = this.RecentClientQuery.Paging.PageSize;
                this.Stats.TotalLoadedItems = this.StoredData.length;
                this.Stats.CurrentlyDisplayingItems = this.DisplayedData.length;
                if (totalItems != null) {
                    this.Stats.TotalItems = totalItems;
                }
                if (this.Stats.CurrentPageSize != 0) {
                    this.Stats.TotalPages = this.Stats.TotalItems / this.Stats.CurrentPageSize;
                }
            };
            return DataHolderService;
        }());
        Services.DataHolderService = DataHolderService;
    })(Services = PowerTables.Services || (PowerTables.Services = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Services;
    (function (Services) {
        /**
         * API responsible for dates operations
         */
        var DateService = (function () {
            /*
             * @internal
             */
            function DateService(datepickerOptions) {
                this._datepickerOptions = datepickerOptions;
            }
            DateService.prototype.ensureDpo = function () {
                if (this._datepickerOptions == null || this._datepickerOptions == undefined) {
                    throw new Error('For this functionality you need 3rd-party datepicker. Please connect one using .Datepicker method');
                }
            };
            /**
             * Determines is passed object valid Date object
             * @param date
             * @returns {}
             */
            DateService.prototype.isValidDate = function (date) {
                if (date === null)
                    return true;
                if (date == undefined)
                    return false;
                if (Object.prototype.toString.call(date) === "[object Date]") {
                    if (isNaN(date.getTime()))
                        return false;
                    else
                        return true;
                }
                return false;
            };
            /**
             * Converts jsDate object to server's understandable format
             *
             * @param date Date object
             * @returns {string} Date in ISO 8601 format
             */
            DateService.prototype.serialize = function (date) {
                if (date === null || date == undefined)
                    return '';
                if (Object.prototype.toString.call(date) === "[object Date]") {
                    if (isNaN(date.getTime()))
                        return '';
                    else
                        return Date.prototype.toISOString.call(date);
                }
                else
                    throw new Error(date + " is not a date at all");
            };
            /**
             * Parses ISO date string to regular Date object
             *
             * @param dateString Date string containing date in ISO 8601
             * @returns {}
             */
            DateService.prototype.parse = function (dateString) {
                var date = new Date(dateString);
                if (Object.prototype.toString.call(date) === "[object Date]") {
                    if (isNaN(date.getTime()))
                        return null;
                    else
                        return date;
                }
                throw new Error(dateString + " is not a date at all");
            };
            /**
             * Retrieves Date object from 3rd party datepicker exposed by HTML element
             *
             * @param element HTML element containing datepicker componen
             * @returns {Date} Date object or null
             */
            DateService.prototype.getDateFromDatePicker = function (element) {
                this.ensureDpo();
                if (element == null || element == undefined)
                    return null;
                var date = this._datepickerOptions.GetFromDatePicker(element);
                if (date == null)
                    return null;
                if (Object.prototype.toString.call(date) === "[object Date]") {
                    if (isNaN(date.getTime()))
                        return null;
                    else
                        return date;
                }
                throw new Error(date + " from datepicker is not a date at all");
            };
            /**
             * Creates datepicker object of HTML element using configured function
             *
             * @param element HTML element that should be converted to datepicker
             */
            DateService.prototype.createDatePicker = function (element, isNullableDate) {
                this.ensureDpo();
                if (element == null || element == undefined)
                    return;
                if (!isNullableDate)
                    isNullableDate = false;
                this._datepickerOptions.CreateDatePicker(element, isNullableDate);
            };
            /**
             * Creates datepicker object of HTML element using configured function
             *
             * @param element HTML element that should be converted to datepicker
             */
            DateService.prototype.destroyDatePicker = function (element) {
                this.ensureDpo();
                if (element == null || element == undefined)
                    return;
                this._datepickerOptions.DestroyDatepicker(element);
            };
            /**
             * Passes Date object to datepicker element
             *
             * @param element HTML element containing datepicker componen
             * @param date Date object to supply to datepicker or null
             */
            DateService.prototype.putDateToDatePicker = function (element, date) {
                this.ensureDpo();
                if (element == null || element == undefined)
                    return;
                this._datepickerOptions.PutToDatePicker(element, date);
            };
            return DateService;
        }());
        Services.DateService = DateService;
    })(Services = PowerTables.Services || (PowerTables.Services = {}));
})(PowerTables || (PowerTables = {}));
if (!Date.prototype.toISOString) {
    (function () {
        function pad(number) {
            if (number < 10) {
                return '0' + number;
            }
            return number;
        }
        Date.prototype.toISOString = function () {
            return this.getUTCFullYear() +
                '-' + pad(this.getUTCMonth() + 1) +
                '-' + pad(this.getUTCDate()) +
                'T' + pad(this.getUTCHours()) +
                ':' + pad(this.getUTCMinutes()) +
                ':' + pad(this.getUTCSeconds()) +
                '.' + (this.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) +
                'Z';
        };
    }());
}
var PowerTables;
(function (PowerTables) {
    var Services;
    (function (Services) {
        /**
         * API for managing in-table elements' events
         */
        var EventsDelegatorService = (function () {
            /**
             * @internal
             */
            function EventsDelegatorService(locator, bodyElement, layoutElement, rootId, masterTable) {
                this._outSubscriptions = {};
                this._cellDomSubscriptions = {};
                this._rowDomSubscriptions = {};
                this._domEvents = {};
                this._outEvents = {};
                this._destroyCallbacks = [];
                this._previousMousePos = { row: 0, column: 0 };
                this._directSubscriptions = [];
                this._locator = locator;
                this._bodyElement = bodyElement;
                this._layoutElement = layoutElement;
                this._rootId = rootId;
                this._masterTable = masterTable;
                this._matches = (function (el) {
                    if (!el)
                        return null;
                    var p = el.prototype;
                    return (p.matches || p.matchesSelector || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || p.oMatchesSelector);
                }(Element));
            }
            EventsDelegatorService.addHandler = function (element, type, handler) {
                if (element.addEventListener) {
                    element.addEventListener(type, handler, false);
                }
                else if (element['attachEvent']) {
                    element['attachEvent'].call(element, "on" + type, handler);
                }
                else {
                    element["on" + type] = handler;
                }
            };
            EventsDelegatorService.removeHandler = function (element, type, handler) {
                if (element.removeEventListener) {
                    element.removeEventListener(type, handler, false);
                }
                else if (element['detachEvent']) {
                    element['detachEvent'].call(element, "on" + type, handler);
                }
                else {
                    element["on" + type] = null;
                }
            };
            EventsDelegatorService.prototype.ensureMouseOpSubscriptions = function () {
                if (this._domEvents.hasOwnProperty('mousemove'))
                    return;
                var fn = this.onMouseMoveEvent.bind(this);
                EventsDelegatorService.addHandler(this._bodyElement, 'mousemove', fn);
                this._domEvents["mousemove"] = fn;
            };
            EventsDelegatorService.prototype.checkMouseEvent = function (eventId) {
                if (eventId === 'mouseover' || eventId === 'mouseout') {
                    throw Error('Mouseover and mouseout events are not supported. Please use mouseenter and mouseleave events instead');
                }
                if (eventId === 'mouseenter' || eventId === 'mouseleave' || eventId === 'mousemove') {
                    this.ensureMouseOpSubscriptions();
                    return true;
                }
                return false;
            };
            EventsDelegatorService.prototype.ensureEventSubscription = function (eventId) {
                if (this.checkMouseEvent(eventId))
                    return;
                if (this._domEvents.hasOwnProperty(eventId))
                    return;
                var fn = this.onTableEvent.bind(this);
                EventsDelegatorService.addHandler(this._bodyElement, eventId, fn);
                this._domEvents[eventId] = fn;
            };
            EventsDelegatorService.prototype.ensureOutSubscription = function (eventId) {
                if (this.checkMouseEvent(eventId))
                    return;
                if (this._outEvents.hasOwnProperty(eventId))
                    return;
                var fn = this.onOutTableEvent.bind(this);
                EventsDelegatorService.addHandler(this._layoutElement, eventId, fn);
                this._outEvents[eventId] = fn;
            };
            EventsDelegatorService.prototype.traverseAndFire = function (subscriptions, path, args) {
                if (!subscriptions)
                    return;
                for (var i = 0; i < subscriptions.length; i++) {
                    if (subscriptions[i].Selector) {
                        for (var j = 0; j < path.length; j++) {
                            if (this._matches.call(path[j], "#" + this._rootId + " " + subscriptions[i].Selector)) {
                                if (this.filterEvent(args['OriginalEvent'], subscriptions[i].filter)) {
                                    subscriptions[i].Handler(args);
                                    break;
                                }
                            }
                            if (args.Stop)
                                break;
                        }
                    }
                    else {
                        subscriptions[i].Handler(args);
                    }
                    if (args.Stop)
                        break;
                }
            };
            EventsDelegatorService.prototype.onMouseMoveEvent = function (e) {
                var t = (e.target || e.srcElement), eventType = e.type;
                var rowEvents = {
                    'mouseenter': this._rowDomSubscriptions['mouseenter'],
                    'mouseleave': this._rowDomSubscriptions['mouseleave'],
                    'mousemove': this._rowDomSubscriptions['mousemove']
                };
                var cellEvents = {
                    'mouseenter': this._cellDomSubscriptions['mouseenter'],
                    'mouseleave': this._cellDomSubscriptions['mouseleave'],
                    'mousemove': this._cellDomSubscriptions['mousemove']
                };
                if ((!rowEvents["mouseenter"]) &&
                    (!rowEvents["mouseleave"]) &&
                    (!rowEvents["mousemove"]) &&
                    (!cellEvents["mouseenter"]) &&
                    (!cellEvents["mousemove"]) &&
                    (!cellEvents["mouseleave"]))
                    return;
                var pathToCell = [];
                var pathToRow = [];
                var cellLocation = null, rowIndex = null;
                while (t !== this._bodyElement) {
                    if (this._locator.isCell(t))
                        cellLocation = PowerTables.TrackHelper.getCellLocation(t);
                    if (this._locator.isRow(t))
                        rowIndex = PowerTables.TrackHelper.getRowIndex(t);
                    if (cellLocation == null)
                        pathToCell.push(t);
                    if (rowIndex == null)
                        pathToRow.push(t);
                    t = t.parentElement;
                    if (t.parentElement == null) {
                        // we encountered event on detached element
                        // just return
                        return;
                    }
                }
                if (cellLocation != null) {
                    var cellInArgs = {
                        Master: this._masterTable,
                        OriginalEvent: e,
                        DisplayingRowIndex: cellLocation.RowIndex,
                        ColumnIndex: cellLocation.ColumnIndex,
                        Stop: false
                    };
                    if (this._previousMousePos.row !== cellLocation.RowIndex ||
                        this._previousMousePos.column !== cellLocation.ColumnIndex) {
                        var cellOutArgs = {
                            Master: this._masterTable,
                            OriginalEvent: e,
                            DisplayingRowIndex: this._previousMousePos.row,
                            ColumnIndex: this._previousMousePos.column,
                            Stop: false
                        };
                        this.traverseAndFire(cellEvents["mouseleave"], pathToCell, cellOutArgs);
                        this.traverseAndFire(cellEvents["mouseenter"], pathToCell, cellInArgs);
                        if (this._previousMousePos.row !== cellLocation.RowIndex) {
                            this.traverseAndFire(rowEvents["mouseleave"], pathToCell, cellOutArgs);
                            this.traverseAndFire(rowEvents["mouseenter"], pathToCell, cellInArgs);
                        }
                        this._previousMousePos.row = cellLocation.RowIndex;
                        this._previousMousePos.column = cellLocation.ColumnIndex;
                    }
                    this.traverseAndFire(cellEvents["mousemove"], pathToCell, cellInArgs);
                    this.traverseAndFire(rowEvents["mousemove"], pathToCell, cellInArgs);
                }
                else {
                    if (rowIndex != null) {
                        var rowInArgs = {
                            Master: this._masterTable,
                            OriginalEvent: e,
                            DisplayingRowIndex: rowIndex,
                            Stop: false
                        };
                        if (this._previousMousePos.row !== rowIndex) {
                            var rowOutArgs = {
                                Master: this._masterTable,
                                OriginalEvent: e,
                                DisplayingRowIndex: this._previousMousePos.row,
                                Stop: false
                            };
                            this.traverseAndFire(rowEvents["mouseleave"], pathToCell, rowOutArgs);
                            this.traverseAndFire(rowEvents["mouseenter"], pathToCell, rowInArgs);
                            this._previousMousePos.row = rowIndex;
                        }
                        this.traverseAndFire(rowEvents["mousemove"], pathToCell, rowInArgs);
                    }
                }
            };
            EventsDelegatorService.prototype.onTableEvent = function (e) {
                var t = (e.target || e.srcElement), eventType = e.type;
                var forRow = this._rowDomSubscriptions[eventType];
                var forCell = this._cellDomSubscriptions[eventType];
                if (!forRow)
                    forRow = [];
                if (!forCell)
                    forCell = [];
                if (forRow.length === 0 && forCell.length === 0)
                    return;
                var pathToCell = [];
                var pathToRow = [];
                var cellLocation = null, rowIndex = null;
                while (t !== this._bodyElement) {
                    if (this._locator.isCell(t))
                        cellLocation = PowerTables.TrackHelper.getCellLocation(t);
                    if (this._locator.isRow(t))
                        rowIndex = PowerTables.TrackHelper.getRowIndex(t);
                    if (cellLocation == null)
                        pathToCell.push(t);
                    if (rowIndex == null)
                        pathToRow.push(t);
                    t = t.parentElement;
                    if (t.parentElement == null) {
                        // we encountered event on detached element
                        // just return
                        return;
                    }
                }
                if (cellLocation != null) {
                    var cellArgs = {
                        Master: this._masterTable,
                        OriginalEvent: e,
                        DisplayingRowIndex: cellLocation.RowIndex,
                        ColumnIndex: cellLocation.ColumnIndex,
                        Stop: false
                    };
                    this.traverseAndFire(forCell, pathToCell, cellArgs);
                    this.traverseAndFire(forRow, pathToCell, cellArgs);
                }
                else {
                    if (rowIndex != null) {
                        var rowArgs = {
                            Master: this._masterTable,
                            OriginalEvent: e,
                            DisplayingRowIndex: rowIndex,
                            Stop: false
                        };
                        this.traverseAndFire(forRow, pathToRow, rowArgs);
                    }
                }
            };
            /**
             * Subscribe handler to any DOM event happening on particular table cell
             *
             * @param subscription Event subscription
             */
            EventsDelegatorService.prototype.subscribeCellEvent = function (subscription) {
                var eo = this.parseEventId(subscription.EventId);
                subscription.EventId = eo['__event'];
                subscription.filter = eo;
                if (!this._cellDomSubscriptions[subscription.EventId]) {
                    this._cellDomSubscriptions[subscription.EventId] = [];
                }
                this._cellDomSubscriptions[subscription.EventId].push(subscription);
                this.ensureEventSubscription(subscription.EventId);
            };
            /**
             * Subscribe handler to any DOM event happening on particular table row.
             * Note that handler will fire even if particular table cell event happened
             *
             * @param subscription Event subscription
             */
            EventsDelegatorService.prototype.subscribeRowEvent = function (subscription) {
                var eo = this.parseEventId(subscription.EventId);
                subscription.EventId = eo['__event'];
                subscription.filter = eo;
                if (!this._rowDomSubscriptions[subscription.EventId]) {
                    this._rowDomSubscriptions[subscription.EventId] = [];
                }
                this._rowDomSubscriptions[subscription.EventId].push(subscription);
                this.ensureEventSubscription(subscription.EventId);
            };
            // custom events like |key=b`value`|keyup
            // b is type bool
            // b,s,i,f available
            EventsDelegatorService.prototype.parseEventId = function (eventId) {
                if (eventId.indexOf('|') < 0)
                    return { __event: eventId, __no: true };
                var eo = {};
                if (eventId.substr(0, '|'.length) === '|') {
                    var evtSplit = eventId.split('|');
                    eo['__event'] = evtSplit[evtSplit.length - 1];
                    eo['__altern'] = {};
                    for (var i = 0; i < evtSplit.length - 1; i++) {
                        if (evtSplit[i].length === 0)
                            continue;
                        var eqidx = evtSplit[i].indexOf('=');
                        var key = evtSplit[i].substring(0, eqidx);
                        var right = evtSplit[i].substring(eqidx + 1);
                        var rightRaw = right.substring(2, right.length - 1);
                        var val;
                        switch (right.charAt(0)) {
                            case 'b':
                                val = (rightRaw.toUpperCase() === 'TRUE');
                                break;
                            case 'i':
                                val = parseInt(rightRaw);
                                break;
                            case 'f':
                                val = parseFloat(rightRaw);
                                break;
                            default:
                                val = rightRaw;
                        }
                        var keyalterns = key.split('+');
                        if (keyalterns.length > 1) {
                            eo[keyalterns[0]] = val;
                            eo['__altern'][keyalterns[0]] = keyalterns.slice(1);
                        }
                        else {
                            eo[key] = val;
                        }
                    }
                }
                return eo;
            };
            EventsDelegatorService.prototype.filterEvent = function (e, propsObject) {
                if (propsObject['__no'])
                    return true;
                for (var p in propsObject) {
                    if (p === '__event' || p === '__altern')
                        continue;
                    if (e[p] !== propsObject[p]) {
                        if (propsObject["__altern"][p]) {
                            var altern = false;
                            for (var i = 0; i < propsObject["__altern"][p].length; i++) {
                                if (e[propsObject["__altern"][p][i]] === propsObject[p]) {
                                    altern = true;
                                    break;
                                }
                            }
                            return altern;
                        }
                        else {
                            return false;
                        }
                    }
                }
                return true;
            };
            /**
             * @internal
             */
            EventsDelegatorService.prototype.subscribeEvent = function (el, eventId, handler, receiver, eventArguments) {
                var eo = this.parseEventId(eventId);
                var fn;
                if (!eo['__no']) {
                    eventId = eo['__event'];
                    var mef = this.filterEvent;
                    fn = function (e) {
                        if (!mef(e, eo))
                            return;
                        handler.call(receiver, {
                            Element: el,
                            EventObject: e,
                            Receiver: receiver,
                            EventArguments: eventArguments
                        });
                    };
                    EventsDelegatorService.addHandler(el, eventId, fn);
                }
                else {
                    fn = function (e) {
                        handler.call(receiver, {
                            Element: el,
                            EventObject: e,
                            Receiver: receiver,
                            EventArguments: eventArguments
                        });
                    };
                    EventsDelegatorService.addHandler(el, eventId, fn);
                }
                el.setAttribute('data-dsub', 'true');
                this._directSubscriptions.push({ Element: el, Handler: fn, EventId: eventId });
            };
            EventsDelegatorService.prototype.onOutTableEvent = function (e) {
                var subscriptions = this._outSubscriptions[e.type];
                var target = (e.target || e.srcElement);
                for (var i = 0; i < subscriptions.length; i++) {
                    var sub = subscriptions[i];
                    var ct = target;
                    var found = false;
                    while (ct !== this._layoutElement) {
                        if (ct === sub.Element) {
                            found = true;
                            break;
                        }
                        ct = ct.parentElement;
                        if (ct.parentElement == null) {
                            return;
                        }
                    }
                    if (!found) {
                        if (this.filterEvent(e, sub.filter)) {
                            sub.EventObject = e;
                            sub.handler.apply(sub.Receiver, sub);
                        }
                    }
                }
            };
            /**
             * @internal
             */
            EventsDelegatorService.prototype.subscribeOutOfElementEvent = function (el, eventId, handler, receiver, eventArguments) {
                var eo = this.parseEventId(eventId);
                eventId = eo['__event'];
                this.ensureOutSubscription(eventId);
                if (!this._outSubscriptions.hasOwnProperty(eventId))
                    this._outSubscriptions[eventId] = [];
                this._outSubscriptions[eventId].push({
                    Element: el,
                    EventArguments: eventArguments,
                    EventObject: null,
                    Receiver: receiver,
                    handler: handler,
                    filter: eo
                });
                el.setAttribute('data-outsub', 'true');
            };
            /**
             * Subscribes event that will be fired when supplied element will be destroyed
             *
             * @param e HTML element destroying of which will fire event
             * @param callback Callback being called when element is destroyed
             */
            EventsDelegatorService.prototype.subscribeDestroy = function (e, callback) {
                callback.Element = e;
                e.setAttribute("data-dstrycb", "true");
                this._destroyCallbacks.push(callback);
            };
            /**
             * @internal
             */
            EventsDelegatorService.prototype.handleElementDestroy = function (e) {
                var arr = this.collectElementsHavingAttribute(e, 'data-outsub');
                if (arr.length !== 0) {
                    for (var os in this._outSubscriptions) {
                        var sub = this._outSubscriptions[os];
                        for (var j = 0; j < sub.length; j++) {
                            if (arr.indexOf(sub[j].Element) > -1) {
                                sub.splice(j, 1);
                                break;
                            }
                        }
                        if (this._outSubscriptions[os].length === 0) {
                            EventsDelegatorService.removeHandler(this._layoutElement, os, this._outEvents[os]);
                            delete this._outEvents[os];
                        }
                    }
                }
                arr = this.collectElementsHavingAttribute(e, 'data-dsub');
                if (arr.length !== 0) {
                    for (var i = 0; i < this._directSubscriptions.length; i++) {
                        if (arr.indexOf(this._directSubscriptions[i].Element) > -1) {
                            EventsDelegatorService.removeHandler(this._directSubscriptions[i].Element, this._directSubscriptions[i].EventId, this._directSubscriptions[i].Handler);
                        }
                    }
                }
                arr = this.collectElementsHavingAttribute(e, 'data-dstrycb');
                if (arr.length) {
                    var indexesToSplice = [];
                    for (var k = 0; k < this._destroyCallbacks.length; k++) {
                        if (arr.indexOf(this._destroyCallbacks[k].Element) > -1) {
                            var cb = this._destroyCallbacks[k];
                            if (typeof cb.Callback === 'function') {
                                cb.Callback.apply(cb.Target, [this._destroyCallbacks[k].Element].concat(cb.CallbackArguments));
                            }
                            else {
                                window[cb.Callback].apply(cb.Target, [this._destroyCallbacks[k].Element].concat(cb.CallbackArguments));
                            }
                        }
                        indexesToSplice.push(k);
                    }
                    for (var l = 0; l < indexesToSplice.length; l++) {
                        this._destroyCallbacks.splice(l, 1);
                    }
                }
            };
            EventsDelegatorService.prototype.collectElementsHavingAttribute = function (parent, attribute) {
                var matching = parent.querySelectorAll("[" + attribute + "]");
                var arr = [];
                for (var i = 0; i < matching.length; i++) {
                    arr.push(matching[i]);
                }
                if (parent.hasAttribute(attribute))
                    arr.push(parent);
                return arr;
            };
            return EventsDelegatorService;
        }());
        Services.EventsDelegatorService = EventsDelegatorService;
    })(Services = PowerTables.Services || (PowerTables.Services = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Services;
    (function (Services) {
        /**
         * Events manager for table.
         * Contains all available events
         */
        var EventsService = (function () {
            function EventsService(masterTable) {
                this._masterTable = masterTable;
                this.QueryGathering = new PowerTables.TableEvent(masterTable);
                this.ClientQueryGathering = new PowerTables.TableEvent(masterTable);
                this.Loading = new PowerTables.TableEvent(masterTable);
                this.LoadingError = new PowerTables.TableEvent(masterTable);
                this.ColumnsCreation = new PowerTables.TableEvent(masterTable);
                this.DataReceived = new PowerTables.TableEvent(masterTable);
                this.LayoutRendered = new PowerTables.TableEvent(masterTable);
                this.ClientDataProcessing = new PowerTables.TableEvent(masterTable);
                this.DataRendered = new PowerTables.TableEvent(masterTable);
                this.ClientRowsRendering = new PowerTables.TableEvent(masterTable);
                this.DeferredDataReceived = new PowerTables.TableEvent(masterTable);
                this.Adjustment = new PowerTables.TableEvent(masterTable);
                this.AdjustmentResult = new PowerTables.TableEvent(masterTable);
                this.Edit = new PowerTables.TableEvent(masterTable);
                this.EditValidationFailed = new PowerTables.TableEvent(masterTable);
                this.SelectionChanged = new PowerTables.TableEvent(masterTable);
            }
            /**
             * Registers new event for events manager.
             * This method is to be used by plugins to provide their
             * own events.
             *
             * Events being added should be described in plugin's .d.ts file
             * as extensions to Events manager
             * @param eventName Event name
             * @returns {}
             */
            EventsService.prototype.registerEvent = function (eventName) {
                this[eventName] = new PowerTables.TableEvent(this._masterTable);
            };
            return EventsService;
        }());
        Services.EventsService = EventsService;
    })(Services = PowerTables.Services || (PowerTables.Services = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Services;
    (function (Services) {
        /**
        * This thing is used to manage instances of columns, plugins etc.
        * It consumes PT configuration as source and provides caller with
        * plugins instances, variable ways to query them and accessing their properties
        */
        var InstanceManagerService = (function () {
            /*
             * @internal
             */
            function InstanceManagerService(configuration, masterTable, events) {
                /**
                 * Dictionary containing current table columns configurations.
                 * Key - raw column name. Value - IColumn instance
                 */
                this.Columns = {};
                /**
                 * Dictionary containing all instances of table plugins.
                 * Key - full plugin ID (incl. placement). Value - plugin itself
                 */
                this.Plugins = {};
                this._rawColumnNames = [];
                this.Configuration = configuration;
                this._masterTable = masterTable;
                this._events = events;
                this._isHandlingSpecialPlacementCase = !(!this.Configuration.EmptyFiltersPlaceholder);
                this._specialCasePlaceholder = this.Configuration.EmptyFiltersPlaceholder;
                this.initColumns();
            }
            /*
             * @internal
             */
            InstanceManagerService.classifyType = function (fieldType) {
                return {
                    IsDateTime: InstanceManagerService._datetimeTypes.indexOf(fieldType) > -1,
                    IsString: InstanceManagerService._stringTypes.indexOf(fieldType) > -1,
                    IsFloat: InstanceManagerService._floatTypes.indexOf(fieldType) > -1,
                    IsInteger: InstanceManagerService._integerTypes.indexOf(fieldType) > -1,
                    IsBoolean: InstanceManagerService._booleanTypes.indexOf(fieldType) > -1,
                    IsNullable: InstanceManagerService.endsWith(fieldType, '?')
                };
            };
            InstanceManagerService.prototype.initColumns = function () {
                var columns = [];
                for (var i = 0; i < this.Configuration.Columns.length; i++) {
                    var cnf = this.Configuration.Columns[i];
                    var c = InstanceManagerService.createColumn(cnf, this._masterTable, i);
                    this.Columns[c.RawName] = c;
                    columns.push(c);
                }
                columns = columns.sort(function (a, b) { return a.Order - b.Order; });
                for (var j = 0; j < columns.length; j++) {
                    this._rawColumnNames.push(columns[j].RawName);
                }
            };
            InstanceManagerService.createColumn = function (cnf, masterTable, order) {
                var c = {
                    Configuration: cnf,
                    RawName: cnf.RawColumnName,
                    MasterTable: masterTable,
                    Header: null,
                    Order: order == null ? 0 : order,
                    IsDateTime: InstanceManagerService._datetimeTypes.indexOf(cnf.ColumnType) > -1,
                    IsString: InstanceManagerService._stringTypes.indexOf(cnf.ColumnType) > -1,
                    IsFloat: InstanceManagerService._floatTypes.indexOf(cnf.ColumnType) > -1,
                    IsInteger: InstanceManagerService._integerTypes.indexOf(cnf.ColumnType) > -1,
                    IsBoolean: InstanceManagerService._booleanTypes.indexOf(cnf.ColumnType) > -1,
                    IsEnum: cnf.IsEnum,
                    UiOrder: 0
                };
                c.Header = {
                    Column: c,
                    renderContent: null,
                    renderElement: null
                };
                return c;
            };
            /*
             * @internal
             */
            InstanceManagerService.prototype.initPlugins = function () {
                var pluginsConfiguration = this.Configuration.PluginsConfiguration;
                var specialCases = {};
                var anySpecialCases = false;
                // registering additional events
                PowerTables.ComponentsContainer.registerAllEvents(this._events, this._masterTable);
                // instantiating and initializing plugins
                for (var l = 0; l < pluginsConfiguration.length; l++) {
                    var conf = pluginsConfiguration[l];
                    var plugin = PowerTables.ComponentsContainer.resolveComponent(conf.PluginId);
                    plugin.PluginLocation = (!conf.Placement) ? conf.PluginId : conf.Placement + "-" + conf.PluginId;
                    plugin.RawConfig = conf;
                    plugin.Order = conf.Order || 0;
                    plugin.init(this._masterTable);
                    if (this._isHandlingSpecialPlacementCase && InstanceManagerService.startsWith(conf.Placement, this._specialCasePlaceholder)) {
                        specialCases[conf.Placement + '-'] = plugin;
                        anySpecialCases = true;
                    }
                    else {
                        this.Plugins[plugin.PluginLocation] = plugin;
                    }
                }
                // handling special filters case
                if (this._isHandlingSpecialPlacementCase) {
                    if (anySpecialCases) {
                        var columns = this.getUiColumnNames();
                        for (var i = 0; i < columns.length; i++) {
                            var c = columns[i];
                            var id = this._specialCasePlaceholder + "-" + c + "-";
                            var specialPlugin = null;
                            for (var k in specialCases) {
                                if (InstanceManagerService.startsWith(k, id)) {
                                    specialPlugin = specialCases[k];
                                }
                            }
                            if (specialPlugin == null) {
                                specialPlugin = {
                                    PluginLocation: id + "-empty",
                                    renderContent: function () { return ''; },
                                    Order: 0,
                                    RawConfig: null,
                                    renderElement: null,
                                    init: null
                                };
                            }
                            specialPlugin.Order = i;
                            this.Plugins[specialPlugin.PluginLocation] = specialPlugin;
                        }
                    }
                }
                this._events.ColumnsCreation.invoke(this, this.Columns);
            };
            InstanceManagerService.startsWith = function (s1, prefix) {
                if (s1 == undefined || s1 === null)
                    return false;
                if (prefix.length > s1.length)
                    return false;
                if (s1 === prefix)
                    return true;
                var part = s1.substring(0, prefix.length);
                return part === prefix;
            };
            InstanceManagerService.endsWith = function (s1, postfix) {
                if (s1 == undefined || s1 === null)
                    return false;
                if (postfix.length > s1.length)
                    return false;
                if (s1 === postfix)
                    return true;
                var part = s1.substring(s1.length - postfix.length - 1, postfix.length);
                return part === postfix;
            };
            /*
             * @internal
             */
            InstanceManagerService.prototype._subscribeConfiguredEvents = function () {
                var delegator = this._masterTable.Renderer.Delegator;
                for (var i = 0; i < this.Configuration.Subscriptions.length; i++) {
                    var sub = this.Configuration.Subscriptions[i];
                    if (sub.IsRowSubscription) {
                        var h = (function (hndlr) {
                            return function (e) {
                                hndlr(e);
                            };
                        })(sub.Handler);
                        delegator.subscribeRowEvent({
                            EventId: sub.DomEvent,
                            Selector: sub.Selector,
                            Handler: h,
                            SubscriptionId: 'configured-row-' + i
                        });
                    }
                    else {
                        var h2 = (sub.ColumnName == null) ? sub.Handler :
                            (function (hndlr, im, colName) {
                                return function (e) {
                                    if (im.getColumnNames().indexOf(colName) !== e.ColumnIndex)
                                        return;
                                    hndlr(e);
                                };
                            })(sub.Handler, this._masterTable.InstanceManager, sub.ColumnName);
                        delegator.subscribeCellEvent({
                            EventId: sub.DomEvent,
                            Selector: sub.Selector,
                            Handler: h2,
                            SubscriptionId: 'configured-cell-' + i
                        });
                    }
                }
            };
            /**
            * Reteives plugin at specified placement
            * @param pluginId Plugin ID
            * @param placement Pluign placement
            */
            InstanceManagerService.prototype.getPlugin = function (pluginId, placement) {
                if (!placement)
                    placement = '';
                var key = placement.length === 0 ? pluginId : placement + "-" + pluginId;
                if (this.Plugins[key])
                    return (this.Plugins[key]);
                else {
                    for (var k in this.Plugins) {
                        if (this.Plugins.hasOwnProperty(k)) {
                            var plg = this.Plugins[k];
                            if (InstanceManagerService.startsWith(plg.RawConfig.PluginId, pluginId))
                                return plg;
                        }
                    }
                }
                throw new Error("There is no plugin " + pluginId + " on place " + placement);
            };
            /**
             * Retrieves plugins list at specific placement
             *
             * @param placement Plugins placement
             * @returns {}
             */
            InstanceManagerService.prototype.getPlugins = function (placement) {
                var result = [];
                if (!InstanceManagerService.endsWith(placement, "-"))
                    placement += "-";
                for (var k in this.Plugins) {
                    if (this.Plugins.hasOwnProperty(k)) {
                        var kp = (k + "-").substring(0, placement.length);
                        if (kp === placement) {
                            result.push(this.Plugins[k]);
                        }
                    }
                }
                result = result.sort(function (a, b) {
                    return a.Order - b.Order;
                });
                return result;
            };
            /**
             * Reteives plugin at specified placement
             * @param pluginId Plugin ID
             * @param placement Pluign placement
             * @returns {}
             */
            InstanceManagerService.prototype.getColumnFilter = function (columnName) {
                var filterId = "filter-" + columnName;
                for (var k in this.Plugins) {
                    if (this.Plugins.hasOwnProperty(k)) {
                        var kp = k.substring(0, filterId.length);
                        if (kp === filterId)
                            return this.Plugins[k];
                    }
                }
                throw new Error("There is no filter for " + columnName);
            };
            /**
             * Retrieves sequential columns names in corresponding order
             * @returns {}
             */
            InstanceManagerService.prototype.getColumnNames = function () {
                return this._rawColumnNames;
            };
            /**
             * Retrieves sequential columns names in corresponding order
             * @returns {}
             */
            InstanceManagerService.prototype.getUiColumnNames = function () {
                var result = [];
                var uiCol = this.getUiColumns();
                for (var i = 0; i < uiCol.length; i++) {
                    result.push(uiCol[i].RawName);
                }
                return result;
            };
            /**
             * Retreives columns suitable for UI rendering in corresponding order
             *
             * @returns {}
             */
            InstanceManagerService.prototype.getUiColumns = function () {
                var result = [];
                for (var ck in this.Columns) {
                    if (this.Columns.hasOwnProperty(ck)) {
                        var col = this.Columns[ck];
                        if (col.Configuration.IsDataOnly)
                            continue;
                        result.push(col);
                    }
                }
                result = result.sort(function (a, b) { return a.Configuration.DisplayOrder - b.Configuration.DisplayOrder; });
                for (var i = 0; i < result.length; i++) {
                    result[i].UiOrder = i;
                }
                return result;
            };
            /**
             * Retrieves column by its raw name
             *
             * @param columnName Raw column name
             * @returns {}
             */
            InstanceManagerService.prototype.getColumn = function (columnName) {
                if (!this.Columns.hasOwnProperty(columnName))
                    throw new Error("Column " + columnName + " not found for rendering");
                return this.Columns[columnName];
            };
            InstanceManagerService.prototype.getColumnByOrder = function (columnOrder) {
                return this.Columns[this._rawColumnNames[columnOrder]];
            };
            InstanceManagerService._datetimeTypes = ['DateTime', 'DateTime?'];
            InstanceManagerService._stringTypes = ['String'];
            InstanceManagerService._floatTypes = ['Single', 'Double', 'Decimal', 'Single?', 'Double?', 'Decimal?'];
            InstanceManagerService._integerTypes = ['Int32', 'Int64', 'Int16', 'SByte', 'Byte', 'UInt32', 'UInt64', 'UInt16', 'Int32?', 'Int64?', 'Int16?', 'SByte?', 'Byte?', 'UInt32?', 'UInt64?', 'UInt16?'];
            InstanceManagerService._booleanTypes = ['Boolean', 'Boolean?'];
            return InstanceManagerService;
        }());
        Services.InstanceManagerService = InstanceManagerService;
    })(Services = PowerTables.Services || (PowerTables.Services = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Services;
    (function (Services) {
        /**
         * Component that is responsible for querying server
         */
        var LoaderService = (function () {
            /*
             * @internal
             */
            function LoaderService(staticData, operationalAjaxUrl, masterTable) {
                this._queryPartProviders = [];
                this._additionalDataReceivers = {};
                this._isFirstTimeLoading = false;
                this._isLoading = false;
                this._staticData = staticData;
                this._operationalAjaxUrl = operationalAjaxUrl;
                this._masterTable = masterTable;
                this._events = this._masterTable.Events;
                this._dataHolder = this._masterTable.DataHolder;
            }
            /**
             * Registers new query part provider to be used while collecting
             * query data before sending it to server.
             *
             * @param provider instance implementing IQueryPartProvider interface
             * @returns {}
             */
            LoaderService.prototype.registerQueryPartProvider = function (provider) {
                this._queryPartProviders.push(provider);
            };
            /**
             * Registers new object that can handle additional data object from server (if any)
             *
             * @param dataKey Key of additional data object appearing in additional data dictionary
             * @param receiver Receiver object
             * @returns {}
             */
            LoaderService.prototype.registerAdditionalDataReceiver = function (dataKey, receiver) {
                if (!this._additionalDataReceivers[dataKey]) {
                    this._additionalDataReceivers[dataKey] = [];
                }
                this._additionalDataReceivers[dataKey].push(receiver);
            };
            LoaderService.prototype.prefetchData = function (data) {
                var query = this.gatherQuery(PowerTables.QueryScope.Server);
                this._dataHolder.storeResponse({
                    Data: data
                }, query);
                this._previousQueryString = JSON.stringify(query);
            };
            LoaderService.prototype.gatherQuery = function (queryScope) {
                var a = {
                    Paging: {
                        PageSize: 0,
                        PageIndex: 0
                    },
                    Orderings: {},
                    Filterings: {},
                    AdditionalData: {},
                    StaticDataJson: this._masterTable.InstanceManager.Configuration.StaticData,
                    Selection: null
                };
                if (queryScope === PowerTables.QueryScope.Client) {
                    this._events.ClientQueryGathering.invokeBefore(this, { Query: a, Scope: queryScope });
                }
                else {
                    this._events.QueryGathering.invokeBefore(this, { Query: a, Scope: queryScope });
                }
                for (var i = 0; i < this._queryPartProviders.length; i++) {
                    this._queryPartProviders[i].modifyQuery(a, queryScope);
                }
                if (queryScope === PowerTables.QueryScope.Client) {
                    this._events.ClientQueryGathering.invokeAfter(this, { Query: a, Scope: queryScope });
                }
                else {
                    this._events.QueryGathering.invokeAfter(this, { Query: a, Scope: queryScope });
                }
                return a;
            };
            LoaderService.prototype.createXmlHttp = function () {
                var xmlhttp;
                try {
                    xmlhttp = new ActiveXObject('Msxml2.XMLHTTP');
                }
                catch (e) {
                    try {
                        xmlhttp = new ActiveXObject('Microsoft.XMLHTTP');
                    }
                    catch (E) {
                        xmlhttp = false;
                    }
                }
                if (!xmlhttp && typeof XMLHttpRequest != 'undefined') {
                    xmlhttp = new XMLHttpRequest();
                }
                return xmlhttp;
            };
            LoaderService.prototype.getXmlHttp = function () {
                if (this._previousRequest) {
                    this._previousRequest.abort();
                    this._previousRequest = null;
                }
                var req = this.createXmlHttp();
                this._previousRequest = req;
                return req;
            };
            LoaderService.prototype.checkError = function (json, data, req) {
                if (json['__ZBnpwvibZm'] && json['Success'] != undefined && !json.Success) {
                    this._masterTable.MessageService.showMessage(json['Message']);
                    this._events.LoadingError.invoke(this, {
                        Request: data,
                        XMLHttp: req,
                        Reason: json.Message
                    });
                    return true;
                }
                return false;
            };
            LoaderService.prototype.checkMessage = function (json) {
                if (json.Message && json.Message['__Go7XIV13OA']) {
                    var msg = json.Message;
                    this._masterTable.MessageService.showMessage(msg);
                    if (msg.Type === PowerTables.MessageType.Banner)
                        return true;
                    return false;
                }
                return false;
            };
            LoaderService.prototype.checkAdditionalData = function (json) {
                if (json.AdditionalData && json.AdditionalData['__TxQeah2p']) {
                    var data = json.AdditionalData['Data'];
                    for (var adk in data) {
                        if (!this._additionalDataReceivers[adk])
                            continue;
                        var receivers = this._additionalDataReceivers[adk];
                        for (var i = 0; i < receivers.length; i++) {
                            receivers[i].handleAdditionalData(data[adk]);
                        }
                    }
                }
            };
            LoaderService.prototype.checkEditResult = function (json, data, req) {
                if (json['__XqTFFhTxSu']) {
                    this._events.DataReceived.invoke(this, {
                        Request: data,
                        XMLHttp: req,
                        Data: json
                    });
                    this._masterTable.proceedAdjustments(json);
                    for (var otherAdj in json.OtherTablesAdjustments) {
                        if (json.OtherTablesAdjustments.hasOwnProperty(otherAdj)) {
                            if (window['__latticeInstances'][otherAdj]) {
                                window['__latticeInstances'][otherAdj].proceedAdjustments(json.OtherTablesAdjustments[otherAdj]);
                            }
                        }
                    }
                    return true;
                }
                return false;
            };
            LoaderService.prototype.handleRegularJsonResponse = function (req, data, clientQuery, callback, errorCallback) {
                var json = JSON.parse(req.responseText);
                var error = this.checkError(json, data, req);
                var message = this.checkMessage(json);
                if (message) {
                    this.checkAdditionalData(json);
                    callback(json);
                    return;
                }
                var edit = this.checkEditResult(json, data, req);
                if (edit) {
                    this.checkAdditionalData(json);
                    callback(json);
                    return;
                }
                if (!error) {
                    this._events.DataReceived.invoke(this, {
                        Request: data,
                        XMLHttp: req,
                        Data: json
                    });
                    if (data.Command === 'query') {
                        this._dataHolder.storeResponse(json, clientQuery);
                        this.checkAdditionalData(json);
                        callback(json);
                        data.Query.Selection = null; // selection must not affect query results
                        this._previousQueryString = JSON.stringify(data.Query);
                    }
                    else {
                        this.checkAdditionalData(json);
                        callback(json);
                    }
                }
                else {
                    this.checkAdditionalData(json);
                    if (errorCallback)
                        errorCallback(json);
                }
            };
            LoaderService.prototype.handleDeferredResponse = function (req, data, callback) {
                if (req.responseText.indexOf('$Token=') === 0) {
                    var token = req.responseText.substr(7, req.responseText.length - 7);
                    var deferredUrl = this._operationalAjaxUrl + (this._operationalAjaxUrl.indexOf('?') > -1 ? '&' : '?') + 'q=' + token;
                    this._events.DeferredDataReceived.invoke(this, {
                        Request: data,
                        XMLHttp: req,
                        Token: token,
                        DataUrl: deferredUrl
                    });
                    callback({
                        $isDeferred: true,
                        $url: deferredUrl,
                        $token: token
                    });
                }
            };
            LoaderService.prototype.isLoading = function () {
                return this._isLoading;
            };
            LoaderService.prototype.doServerQuery = function (data, clientQuery, callback, errorCallback) {
                var _this = this;
                this._isLoading = true;
                var dataText = JSON.stringify(data);
                var req = this.getXmlHttp();
                this._events.Loading.invokeBefore(this, {
                    Request: data,
                    XMLHttp: req
                });
                req.open('POST', this._operationalAjaxUrl, true);
                req.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                req.setRequestHeader('Content-type', 'application/json');
                var reqEvent = req.onload ? 'onload' : 'onreadystatechange'; // for IE
                req[reqEvent] = (function () {
                    if (req.readyState !== 4)
                        return false;
                    if (req.status === 200) {
                        var ctype = req.getResponseHeader('content-type');
                        if (ctype)
                            ctype = ctype.toLowerCase();
                        if (ctype && ctype.indexOf('application/json') >= 0) {
                            _this.handleRegularJsonResponse(req, data, clientQuery, callback, errorCallback);
                        }
                        else if (ctype && ctype.indexOf('lattice/service') >= 0) {
                            _this.handleDeferredResponse(req, data, callback);
                        }
                        else {
                            if (callback)
                                callback(req.responseText);
                        }
                    }
                    else {
                        if (req.status === 0)
                            return false; // for IE
                        _this._events.LoadingError.invoke(_this, {
                            Request: data,
                            XMLHttp: req,
                            Reason: 'Network error'
                        });
                        if (errorCallback)
                            errorCallback(req.responseText);
                    }
                    _this._isLoading = false;
                    _this._events.Loading.invokeAfter(_this, {
                        Request: data,
                        XMLHttp: req
                    });
                });
                //req.onabort = (e => {
                //    alert('hop!');
                //});
                //failTimeout = setTimeout(() => { req.abort(); this.Renderer.showError('Network error: network unreacheable'); }, 10000);
                req.send(dataText);
            };
            /**
             * Sends specified request to server and lets table handle it.
             * Always use this method to invoke table's server functionality because this method
             * correctly rises all events, handles errors etc
             *
             * @param command Query command
             * @param callback Callback that will be invoked after data received
             * @param queryModifier Inline query modifier for in-place query modification
             * @param errorCallback Will be called if error occures
             */
            LoaderService.prototype.requestServer = function (command, callback, queryModifier, errorCallback, force) {
                var _this = this;
                var scope = PowerTables.QueryScope.Transboundary;
                if (command === 'query')
                    scope = PowerTables.QueryScope.Server;
                var serverQuery = this.gatherQuery(scope);
                var clientQuery = null;
                if (command === 'query')
                    clientQuery = this.gatherQuery(PowerTables.QueryScope.Client);
                if (queryModifier) {
                    queryModifier(serverQuery);
                    if (command === 'query')
                        queryModifier(clientQuery);
                }
                var queriesEqual = (command === 'query') && (JSON.stringify(serverQuery) === this._previousQueryString);
                this._masterTable.Selection.modifyQuery(serverQuery, scope);
                if (force || !queriesEqual) {
                    var data = {
                        Command: command,
                        Query: serverQuery
                    };
                    if (this._masterTable.InstanceManager.Configuration.QueryConfirmation) {
                        this._masterTable.InstanceManager.Configuration.QueryConfirmation(data, scope, function () { return _this.doServerQuery(data, clientQuery, callback, errorCallback); });
                    }
                    else {
                        this.doServerQuery(data, clientQuery, callback, errorCallback);
                    }
                }
                else {
                    if (this._masterTable.InstanceManager.Configuration.QueryConfirmation) {
                        this._masterTable.InstanceManager.Configuration.QueryConfirmation({ Command: 'Query', Query: clientQuery }, PowerTables.QueryScope.Client, function () {
                            _this._isLoading = true;
                            _this._dataHolder.filterStoredData(clientQuery);
                            callback(null);
                            _this._isLoading = false;
                        });
                    }
                    else {
                        this._isLoading = true;
                        this._dataHolder.filterStoredData(clientQuery);
                        callback(null);
                        this._isLoading = false;
                    }
                }
            };
            return LoaderService;
        }());
        Services.LoaderService = LoaderService;
    })(Services = PowerTables.Services || (PowerTables.Services = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Services;
    (function (Services) {
        /**
         * Class responsible for handling of table messages. It handles internally thrown messages as well as
         * user's ones
         */
        var MessagesService = (function () {
            /*
             * @internal
             */
            function MessagesService(usersMessageFn, instances, dataHolder, controller, templatesProvider) {
                this._usersMessageFn = usersMessageFn;
                this._instances = instances;
                this._dataHolder = dataHolder;
                this._controller = controller;
                this._templatesProvider = templatesProvider;
                if (!usersMessageFn) {
                    this._usersMessageFn = function (m) { alert(m.Title + '\r\n' + m.Details); };
                }
            }
            /**
             * Shows table message according to its settings
             * @param message Message of type ITableMessage
             * @returns {}
             */
            MessagesService.prototype.showMessage = function (message) {
                if (message.Type === PowerTables.MessageType.UserMessage) {
                    this._usersMessageFn(message);
                }
                else {
                    this.showTableMessage(message);
                }
            };
            MessagesService.prototype.showTableMessage = function (tableMessage) {
                if (!this._templatesProvider.hasCachedTemplate("ltmsg-" + tableMessage.Class)) {
                    this._controller.replaceVisibleData([]);
                    return;
                }
                var msgRow = {
                    DataObject: tableMessage,
                    IsSpecial: true,
                    TemplateIdOverride: "ltmsg-" + tableMessage.Class,
                    MasterTable: null,
                    Index: 0,
                    Cells: {}
                };
                tableMessage.UiColumnsCount = this._instances.getUiColumns().length;
                tableMessage.IsMessageObject = true;
                this._controller.replaceVisibleData([msgRow]);
            };
            return MessagesService;
        }());
        Services.MessagesService = MessagesService;
    })(Services = PowerTables.Services || (PowerTables.Services = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    var Services;
    (function (Services) {
        var SelectionService = (function () {
            function SelectionService(masterTable) {
                var _this = this;
                this._selectionData = {};
                this._isAllSelected = false;
                this._masterTable = masterTable;
                this._configuration = this._masterTable.InstanceManager.Configuration.SelectionConfiguration;
                if (this._configuration.SelectSingle) {
                    this._configuration.SelectAllBehavior = PowerTables.Configuration.Json.SelectAllBehavior.Disabled;
                }
                if (this._configuration.ResetSelectionBehavior ===
                    PowerTables.Configuration.Json.ResetSelectionBehavior.ClientReload) {
                    masterTable.Events.ClientDataProcessing.subscribeAfter(function (x) { return _this.toggleAll(false); }, 'selection');
                }
                if (this._configuration.ResetSelectionBehavior ===
                    PowerTables.Configuration.Json.ResetSelectionBehavior.ServerReload) {
                    masterTable.Events.DataReceived.subscribe(function (x) { return _this.toggleAll(false); }, 'selection');
                }
                masterTable.Loader.registerAdditionalDataReceiver('Selection', this);
            }
            SelectionService.prototype.isSelected = function (dataObject) {
                return this.isSelectedPrimaryKey(dataObject['__key']);
            };
            SelectionService.prototype.isAllSelected = function () {
                //if (this._configuration.SelectAllBehavior === PowerTables.Configuration.Json.SelectAllBehavior.Disabled) {
                //    return false;
                //}
                //if (this._configuration.SelectAllBehavior === PowerTables.Configuration.Json.SelectAllBehavior.OnlyIfAllDataVisible) {
                //    return this._isAllSelected;
                //}
                // extremely stupid - will be changed later
                for (var i = 0; i < this._masterTable.DataHolder.DisplayedData.length; i++) {
                    if (this.canSelect(this._masterTable.DataHolder.DisplayedData[i])) {
                        if (!this._selectionData.hasOwnProperty(this._masterTable.DataHolder.DisplayedData[i]['__key']))
                            return false;
                    }
                }
                return true;
            };
            SelectionService.prototype.canSelect = function (dataObject) {
                if (this._configuration.CanSelectRowFunction == null)
                    return true;
                return this._configuration.CanSelectRowFunction(dataObject);
            };
            SelectionService.prototype.canSelectAll = function () {
                if (this._configuration.SelectAllBehavior === PowerTables.Configuration.Json.SelectAllBehavior.Disabled) {
                    return false;
                }
                if (this._configuration.SelectAllBehavior === PowerTables.Configuration.Json.SelectAllBehavior.OnlyIfAllDataVisible) {
                    return this._masterTable.DataHolder.StoredData.length === this._masterTable.DataHolder.DisplayedData.length;
                }
                return true;
            };
            SelectionService.prototype.resetSelection = function () {
                this.toggleAll(false);
            };
            SelectionService.prototype.toggleAll = function (selected) {
                if (this._configuration.SelectAllBehavior === PowerTables.Configuration.Json.SelectAllBehavior.Disabled) {
                    return;
                }
                if (this._configuration.SelectAllBehavior === PowerTables.Configuration.Json.SelectAllBehavior.OnlyIfAllDataVisible) {
                    if (this._masterTable.DataHolder.StoredData.length !==
                        this._masterTable.DataHolder.DisplayedData.length)
                        return;
                }
                this._masterTable.Events.SelectionChanged.invokeBefore(this, this._selectionData);
                if (selected == null) {
                    selected = !this.isAllSelected();
                }
                var redrawAll = false;
                var objectsToRedraw = [];
                var objSet = null;
                if (this._configuration.SelectAllBehavior === PowerTables.Configuration.Json.SelectAllBehavior.AllVisible ||
                    this._configuration.SelectAllBehavior ===
                        PowerTables.Configuration.Json.SelectAllBehavior.OnlyIfAllDataVisible) {
                    objSet = this._masterTable.DataHolder.DisplayedData;
                }
                else {
                    objSet = this._masterTable.DataHolder.StoredData;
                }
                if (selected) {
                    for (var i = 0; i < objSet.length; i++) {
                        var sd = objSet[i];
                        if (this.canSelect(sd)) {
                            if (!this._selectionData.hasOwnProperty(sd["__key"])) {
                                objectsToRedraw.push(sd);
                                this._selectionData[sd["__key"]] = [];
                            }
                        }
                    }
                }
                else {
                    for (var i = 0; i < objSet.length; i++) {
                        var sd = objSet[i];
                        if (this.canSelect(sd)) {
                            if (this._selectionData.hasOwnProperty(sd["__key"])) {
                                objectsToRedraw.push(sd);
                                delete this._selectionData[sd["__key"]];
                            }
                        }
                    }
                }
                this._isAllSelected = selected;
                if (objectsToRedraw.length > this._masterTable.DataHolder.DisplayedData.length / 2) {
                    this._masterTable.Controller.redrawVisibleData();
                }
                else {
                    for (var j = 0; j < objectsToRedraw.length; j++) {
                        this._masterTable.Controller.redrawVisibleDataObject(objectsToRedraw[j]); //todo    
                    }
                }
                this._masterTable.Events.SelectionChanged.invokeAfter(this, this._selectionData);
            };
            SelectionService.prototype.isCellSelected = function (dataObject, column) {
                var sd = this._selectionData[dataObject['__key']];
                if (!sd)
                    return false;
                return sd.indexOf(column.Order) >= 0;
            };
            SelectionService.prototype.hasSelectedCells = function (dataObject) {
                var sd = this._selectionData[dataObject['__key']];
                if (!sd)
                    return false;
                return sd.length > 0;
            };
            SelectionService.prototype.getSelectedCells = function (dataObject) {
                var sd = this._selectionData[dataObject['__key']];
                if (!sd)
                    return null;
                return sd;
            };
            SelectionService.prototype.getSelectedCellsByPrimaryKey = function (dataObject) {
                var sd = this._selectionData[dataObject['__key']];
                if (!sd)
                    return false;
                return sd.length > 0;
            };
            SelectionService.prototype.isSelectedPrimaryKey = function (primaryKey) {
                var sd = this._selectionData[primaryKey];
                if (!sd)
                    return false;
                return sd.length === 0;
            };
            SelectionService.prototype.toggleRow = function (primaryKey, selected) {
                this._masterTable.Events.SelectionChanged.invokeBefore(this, this._selectionData);
                if (selected == undefined || selected == null) {
                    selected = !this.isSelectedPrimaryKey(primaryKey);
                }
                if (selected) {
                    if (!this._selectionData.hasOwnProperty(primaryKey)) {
                        if (this._configuration.SelectSingle) {
                            var rk = [];
                            for (var sk in this._selectionData) {
                                rk.push(sk);
                            }
                            for (var i = 0; i < rk.length; i++) {
                                delete this._selectionData[rk[i]];
                                this._masterTable.Controller
                                    .redrawVisibleDataObject(this._masterTable.DataHolder.getByPrimaryKey(rk[i]));
                            }
                        }
                        this._selectionData[primaryKey] = [];
                        this._masterTable.Controller.redrawVisibleDataObject(this._masterTable.DataHolder.getByPrimaryKey(primaryKey));
                        this._masterTable.Events.SelectionChanged.invokeAfter(this, this._selectionData);
                    }
                }
                else {
                    if (this._selectionData.hasOwnProperty(primaryKey)) {
                        if (this._configuration.SelectSingle) {
                            var rk = [];
                            for (var sk in this._selectionData) {
                                rk.push(sk);
                            }
                            for (var i = 0; i < rk.length; i++) {
                                delete this._selectionData[rk[i]];
                                this._masterTable.Controller
                                    .redrawVisibleDataObject(this._masterTable.DataHolder.getByPrimaryKey(rk[i]));
                            }
                        }
                        else {
                            delete this._selectionData[primaryKey];
                            this._masterTable.Controller.redrawVisibleDataObject(this._masterTable.DataHolder.getByPrimaryKey(primaryKey));
                        }
                        this._masterTable.Events.SelectionChanged.invokeAfter(this, this._selectionData);
                    }
                }
            };
            SelectionService.prototype.toggleDisplayingRow = function (displayIndex, selected) {
                if (displayIndex < 0 || displayIndex >= this._masterTable.DataHolder.DisplayedData.length)
                    return;
                this.toggleRow(this._masterTable.DataHolder.DisplayedData[displayIndex]['__key'], selected);
            };
            SelectionService.prototype.toggleObjectSelected = function (dataObject, selected) {
                this.toggleRow(dataObject['__key'], selected);
            };
            SelectionService.prototype.handleAdjustments = function (added, removeKeys) {
                for (var i = 0; i < removeKeys.length; i++) {
                    if (this._selectionData.hasOwnProperty(removeKeys[i])) {
                        delete this._selectionData[removeKeys[i]];
                    }
                }
            };
            SelectionService.prototype.modifyQuery = function (query, scope) {
                query.Selection = this._selectionData;
            };
            SelectionService.prototype.getSelectedKeys = function () {
                var keys = [];
                for (var k in this._selectionData) {
                    keys.push(k);
                }
                return keys;
            };
            SelectionService.prototype.getSelectedObjects = function () {
                var objects = [];
                for (var k in this._selectionData) {
                    objects.push(this._masterTable.DataHolder.getByPrimaryKey(k));
                }
                return objects;
            };
            SelectionService.prototype.getSelectedColumns = function (primaryKey) {
                var cols = this._masterTable.InstanceManager.Columns;
                if (!this.isSelectedPrimaryKey(primaryKey))
                    return [];
                var selObject = this._selectionData[primaryKey];
                var result = [];
                for (var i = 0; i < selObject.length; i++) {
                    for (var k in cols) {
                        if (cols[k].Order === selObject[i]) {
                            result.push(cols[k]);
                        }
                    }
                }
                return result;
            };
            SelectionService.prototype.getSelectedColumnsByObject = function (dataObject) {
                return this.getSelectedColumns(dataObject['__key']);
            };
            //#region Cells selection
            SelectionService.prototype.toggleCellsByDisplayIndex = function (displayIndex, columnNames, select) {
                if (displayIndex < 0 || displayIndex >= this._masterTable.DataHolder.DisplayedData.length)
                    return;
                this.toggleCells(this._masterTable.DataHolder.DisplayedData[displayIndex]['__key'], columnNames, select);
            };
            SelectionService.prototype.toggleCellsByObject = function (dataObject, columnNames, select) {
                this.toggleCells(dataObject['__key'], columnNames, select);
            };
            SelectionService.prototype.toggleCells = function (primaryKey, columnNames, select) {
                this._masterTable.Events.SelectionChanged.invokeBefore(this, this._selectionData);
                var arr = null;
                if (this._selectionData.hasOwnProperty(primaryKey)) {
                    arr = this._selectionData[primaryKey];
                }
                else {
                    arr = [];
                    this._selectionData[primaryKey] = arr;
                }
                var cols = this._masterTable.InstanceManager.Columns;
                var columnsToRedraw = [];
                var data = this._masterTable.DataHolder.getByPrimaryKey(primaryKey);
                for (var i = 0; i < columnNames.length; i++) {
                    var idx = cols[columnNames[i]].Order;
                    var colIdx = arr.indexOf(idx);
                    var srcLen = arr.length;
                    var selectIt = select;
                    if ((this._configuration.NonselectableColumns.indexOf(columnNames[i]) < 0))
                        continue;
                    if (selectIt == null || selectIt == undefined) {
                        if (colIdx > -1)
                            selectIt = false;
                        else
                            selectIt = true;
                    }
                    if (this._configuration.CanSelectCellFunction != null && !this._configuration.CanSelectCellFunction(data, columnNames[i], selectIt))
                        continue;
                    if (selectIt && colIdx < 0)
                        arr.push(idx);
                    if ((!selectIt) && colIdx > -1)
                        arr.splice(colIdx, 1);
                    if (srcLen !== arr.length)
                        columnsToRedraw.push(cols[columnNames[i]]);
                }
                if (arr.length === 0) {
                    delete this._selectionData[primaryKey];
                }
                this._masterTable.Controller.redrawVisibleCells(data, columnsToRedraw);
                this._masterTable.Events.SelectionChanged.invokeAfter(this, this._selectionData);
            };
            SelectionService.prototype.setCellsByDisplayIndex = function (displayIndex, columnNames) {
                if (displayIndex < 0 || displayIndex >= this._masterTable.DataHolder.DisplayedData.length)
                    return;
                this.setCells(this._masterTable.DataHolder.DisplayedData[displayIndex]['__key'], columnNames);
            };
            SelectionService.prototype.setCellsByObject = function (dataObject, columnNames) {
                this.setCells(dataObject['__key'], columnNames);
            };
            SelectionService.prototype.setCells = function (primaryKey, columnNames) {
                this._masterTable.Events.SelectionChanged.invokeBefore(this, this._selectionData);
                var arr = null;
                if (this._selectionData.hasOwnProperty(primaryKey)) {
                    arr = this._selectionData[primaryKey];
                }
                else {
                    arr = [];
                }
                var cols = this._masterTable.InstanceManager.Columns;
                var columnsToRedraw = [];
                var data = this._masterTable.DataHolder.getByPrimaryKey(primaryKey);
                var newArr = [];
                var allColsNames = this._masterTable.InstanceManager.getColumnNames();
                for (var j = 0; j < columnNames.length; j++) {
                    if (this._configuration.NonselectableColumns) {
                        if ((this._configuration.NonselectableColumns.indexOf(columnNames[j]) < 0))
                            continue;
                    }
                    if (this._configuration.CanSelectCellFunction != null && !this._configuration.CanSelectCellFunction(data, columnNames[j], true))
                        continue;
                    newArr.push(cols[columnNames[j]].Order);
                }
                var maxArr = newArr.length > arr.length ? newArr : arr;
                for (var k = 0; k < maxArr.length; k++) {
                    var colNum = maxArr[k];
                    var nw = newArr.indexOf(colNum) > -1;
                    var old = arr.indexOf(colNum) > -1;
                    if (nw && !old)
                        columnsToRedraw.push(cols[allColsNames[colNum]]);
                    if (old && !nw)
                        columnsToRedraw.push(cols[allColsNames[colNum]]);
                }
                if (newArr.length === 0) {
                    delete this._selectionData[primaryKey];
                }
                else {
                    this._selectionData[primaryKey] = newArr;
                }
                this._masterTable.Controller.redrawVisibleCells(data, columnsToRedraw);
                this._masterTable.Events.SelectionChanged.invokeAfter(this, this._selectionData);
            };
            //#endregion
            SelectionService.prototype.handleAdditionalData = function (additionalData) {
                var ad = additionalData;
                if (ad.SelectionToggle === PowerTables.Adjustments.SelectionToggle.All) {
                    this.toggleAll(true);
                }
                else if (ad.SelectionToggle === PowerTables.Adjustments.SelectionToggle.Nothing) {
                    this.toggleAll(false);
                }
                else {
                    for (var ok in ad.Select) {
                        if (ad.Select[ok] == null || ad.Select[ok].length === 0) {
                            this.toggleRow(ok, true);
                        }
                        else {
                            this.setCells(ok, ad.Select[ok]);
                        }
                    }
                    for (var ok2 in ad.Unselect) {
                        if (ad.Unselect[ok2] == null || ad.Unselect[ok2].length === 0) {
                            this.toggleRow(ok2, true);
                        }
                        else {
                            this.toggleCells(ok2, ad.Unselect[ok2], false);
                        }
                    }
                }
            };
            return SelectionService;
        }());
        Services.SelectionService = SelectionService;
    })(Services = PowerTables.Services || (PowerTables.Services = {}));
})(PowerTables || (PowerTables = {}));
var PowerTables;
(function (PowerTables) {
    /**
    * Helper class for producing track ids.
    * You can use this class directly, but it is better to use it via @memberref PowerTables.PowerTable.Renderer.Rendering.Modifier instance
    */
    var TrackHelper = (function () {
        function TrackHelper() {
        }
        /**
         * Returns string track ID for cell
         */
        TrackHelper.getCellTrack = function (cell) {
            var colIdx = cell.Column.Order;
            var rowIdx = cell.Row.Index;
            return TrackHelper.getCellTrackByIndexes(rowIdx, colIdx);
        };
        /**
         * Returns string track ID for cell
         */
        TrackHelper.getCellTrackByIndexes = function (rowIndex, columnIndex) {
            return "c-r" + rowIndex + "-c" + columnIndex;
        };
        /**
         * Returns string track ID for plugin
         */
        TrackHelper.getPluginTrack = function (plugin) {
            return "p-" + plugin.PluginLocation;
        };
        /**
         * Returns string track ID for plugin
         */
        TrackHelper.getPluginTrackByLocation = function (pluginLocation) {
            return "p-" + pluginLocation;
        };
        /**
         * Returns string track ID for header
         */
        TrackHelper.getHeaderTrack = function (header) {
            return "h-" + header.Column.RawName;
        };
        /**
         * Returns string track ID for header
         */
        TrackHelper.getHeaderTrackByColumnName = function (columnName) {
            return "h-" + columnName;
        };
        /**
         * Returns string track ID for row
         */
        TrackHelper.getRowTrack = function (row) {
            return this.getRowTrackByIndex(row.Index);
        };
        /**
         * Returns string track ID for row
         */
        TrackHelper.getRowTrackByIndex = function (index) {
            return "r-" + index;
        };
        /**
         * Parses cell track to retrieve column and row index
         *
         * @param e HTML element containing cell with wrapper
         * @returns {ICellLocation} Cell location
         */
        TrackHelper.getCellLocation = function (e) {
            if (!e)
                return null;
            if (!e.getAttribute)
                return null;
            var trk = e.getAttribute('data-track').substring(3).split('-c');
            return {
                RowIndex: parseInt(trk[0]),
                ColumnIndex: parseInt(trk[1])
            };
        };
        /**
         * Parses row track to retrieve row index
         *
         * @param e HTML element containing row with wrapper
         * @returns {number} Row index
         */
        TrackHelper.getRowIndex = function (e) {
            if (!e)
                return null;
            if (!e.getAttribute)
                return null;
            var trk = e.getAttribute('data-track').substring(2);
            return parseInt(trk);
        };
        return TrackHelper;
    }());
    PowerTables.TrackHelper = TrackHelper;
})(PowerTables || (PowerTables = {}));
//# sourceMappingURL=../../../PowerTables.Mvc/Scripts/powertables.js.map
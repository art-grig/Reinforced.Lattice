@using PowerTables.Editing
@using PowerTables.Editing.Editors.Check
@using PowerTables.Editing.Editors.Memo
@using PowerTables.Editing.Editors.PlainText
@using PowerTables.Editing.Editors.SelectList
@using PowerTables.Filters.Range
@using PowerTables.Filters.Select
@using PowerTables.Filters.Value
@using PowerTables.Plugins.Checkboxify
@using PowerTables.Plugins.Hideout
@using PowerTables.Plugins.Limit
@using PowerTables.Plugins.Loading
@using PowerTables.Plugins.LoadingOverlap
@using PowerTables.Plugins.Ordering
@using PowerTables.Plugins.Paging
@using PowerTables.Plugins.Reload
@using PowerTables.Plugins.ResponseInfo
@using PowerTables.Plugins.Toolbar
@using PowerTables.Templating
@using PowerTables.Templating.BuiltIn
@using PowerTables.Templating.Expressions

@inherits PowerTables.Templating.TemplatesPageBase

@*
    Lattice common layout template
    See available helpers in scope variable "t"
*@
<link href="~/Content/starter-template.css" type="text/css" rel="stylesheet" />

@using (var t = this.Layout())
{
    <div class="container-fluid">
        <br />
        <br />
        <div class="row">
            <div class="col-md-2">
                @t.Plugins("lt")
                @t.Header("_checkboxify")
            </div>
            <div class="col-md-10">
                <div style="margin-bottom: 10px;">
                    @t.Plugins("toolbar-rt")
                </div>
                <div>
                    
                </div>
                <div>
                    @t.Header("Price")
                    @t.Header("Name")
                </div>
                <br />
                <hr />
            </div>
        </div>
        <div class="row">
            <div class="col-md-2">
                @t.Filters()
            </div>
            <div class="col-md-10">
                <div class="container-fluid">
                    <div class="row">
                        @t.Body()
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6 col-md-offset-4 text-center">
                @t.Plugins("rb")
            </div>
        </div>
    </div>
}

@*
    Plugin wrapper template. This template is being wrapped around each plugin
*@
@using (var t = this.PluginWrapper())
{
    <text>
        @using (t.IfPlacement("lt"))
        { <span> @t.Content() </span> }
        @using (t.IfPlacement("toolbar-lt"))
        { <span> @t.Content() </span> }
        @using (t.IfPlacement("lb"))
        { <div> @t.Content() </div> }
        @using (t.IfPlacement("toolbar-lb"))
        { <div> @t.Content() </div> }
        @using (t.IfPlacement("rt"))
        { <div> @t.Content() </div> }
        @using (t.IfPlacement("toolbar-rt"))
        { <div> @t.Content() </div> }
        @using (t.IfPlacement("rb"))
        { <div> @t.Content() </div> }
        @using (t.IfPlacement("toolbar-rb"))
        { <div style="float: right;"> @t.Content() </div> }
        @using (t.IfPlacement("filter"))
        { <div>@t.Content()</div> }
    </text>
}

@*
    Column header wrapper template.
*@
@using (var t = this.HeaderWrapper())
{
    <div style="display: inline"><span>@t.Content()</span>|</div> }

@*
    Row wrapper template.
    Following HTML is being wrapped around each data row
*@
@using (var t = this.RowWrapper())
{
    <div class="col-md-3" style="margin-bottom: 10px">
        <div class="thumbnail">
            <img src="http://www.toysrus.com/graphics/product_images/pTRU1-20603499enh-z6.jpg" alt="">
            <div class="btn-toolbar inside-tools" role="toolbar">
                @t.Content("_checkboxify")
            </div>
            <div class="caption">
                <h3 style="width: 160px; display: inline-block; overflow: hidden;">@t.Content("Name")</h3>
                <h4 style="width: 60px; display: inline-block; overflow: hidden; float: right;">@t.Content("Price")</h4>
            </div>
            <p>
                @t.Content("SupplierAddress")
            </p>
        </div>
    </div>
}

@using (var t = this.RowWrapper("updatedRow"))
{ <tr class="success">@t.Content()</tr> }

@using (var t = this.RowWrapper("addedRow"))
{ <tr style="background-color: #96f2e1">@t.Content()</tr> }

@*
    Cell wrapper template.
    Following HTML is being wrapped around each data cell
*@
@using (var t = this.CellWrapper())
{
    <span style="display: block;white-space: nowrap;text-overflow: ellipsis;">@t.Content()</span>
}

@using (var t = this.CellWrapper("updatedCell"))
{ <td class="touched">@t.Content()</td> }

@using (var t = this.MessagesWrapper())
{
    using (t.IfStrEquals(c => c.Class, "error"))
    {
        <tr class="danger" style="padding: 30px">
            <td colspan="@t.Value(c => c.UiColumnsCount)">
                <h4 class="text-center"><span class="glyphicon glyphicon-remove-sign" aria-hidden="true"></span>  Error occured</h4>
                <p style="margin-left:25px;margin-right:25px">
                    @t.Value(c => c.Title)
                    <hr />
                    @t.Value(c => c.Details)
                </p>
            </td>
        </tr>
    }

    using (t.IfStrEquals(c => c.Class, "noresults"))
    {
        <tr class="info">
            <td colspan="@t.Value(c => c.UiColumnsCount)">
                <h4 class="text-center text-info bg-info">
                    <span class="glyphicon glyphicon-eye-close"></span>  No data found
                </h4>
            </td>
        </tr>
    }

    using (t.IfStrEquals(c => c.Class, "initial"))
    {
        <tr class="warning">
            <td colspan="@t.Value(c => c.UiColumnsCount)">
                <h4 class="text-center text-info bg-info">
                    <span class="glyphicon glyphicon-search"></span>  Please change filter settings to get search results
                </h4>
            </td>
        </tr>
    }
}

@using (var t = Plugin.Loading())
{
    <div style="display:block;height:10px;margin:10px;margin-top:5px;" @t.ThisElementWillBlink()>
        <div class="badge">
            <span class="glyphicon glyphicon-refresh"></span> Loading
        </div>
    </div>
}

@using (var t = Plugin.Ordering())
{
    <div @t.BindSwitchOrdering("click") style="cursor: pointer;display:inline">
        <span>@t.HtmlValue(c => c.Column.Configuration.Title)</span>
        @using (t.If(c => c.IsNeutral))
        { <span class="glyphicon glyphicon-sort" style="color: #bac5d3;"></span> }
        @using (t.If(c => c.IsAscending))
        { <span class="glyphicon glyphicon-arrow-down" style="color: #bac5d3;"></span> }
        @using (t.If(c => c.IsDescending))
        { <span class="glyphicon glyphicon-arrow-up" style="color: #bac5d3; "></span> } |
    </div>
}

@using (var t = Plugin.Limit())
{
    <div class="btn-group">
        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
            Results: <strong>@t.Value(c => c.SelectedValue.Label)</strong> <span class="caret"></span>
        </button>
        <ul class="dropdown-menu" role="menu">
            @using (var sz = t.Each(c => c.Sizes))
            {
                using (sz.If(c => c.IsSeparator))
                {
                    <li class="divider"></li>
                    @sz.Else()
                    <li><a href="#" @sz.BindLimitChangeEvent("click")>@sz.Value(c => c.Label)</a></li>
                }
            }
        </ul>
    </div>
}

@using (var t = Plugin.Paging())
{
    using (t.If(c => c.Shown))
    {
        <div class="col-md-10" style="padding-left: 0">
            @using (var m = t.ArrowsMode())
            {
                <nav style="margin: 0; width: 250px; margin-left: auto;">
                    <ul class="pager">
                        @using (m.If(c => c.PrevArrow))
                        {
                            <li><a @t.BindPreviousPage("click") style="cursor: pointer"><span class="glyphicon glyphicon-chevron-left"></span></a></li>
                        }
                        <li><span>Page @m.Value(c => c.CurrentPage) of @m.Value(c => c.TotalPages)</span></li>
                        @using (m.If(c => c.NextArrow))
                        {
                            <li><a @t.BindNextPage("click") style="cursor: pointer"><span class="glyphicon glyphicon-chevron-right"></span></a></li>
                        }
                    </ul>
                </nav>
            }

            @using (var m = t.PeriodsMode())
            {
                <ul class="pagination" style="margin: 0;">
                    @using (var pg = m.Each(c => c.Pages))
                    {
                        using (pg.If(c => c.First))
                        {
                            <li class="first"><a style="cursor: pointer" @pg.BindNavigateToPage("click")><span class="glyphicon glyphicon-fast-backward"></span></a></li>
                        }
                        using (pg.If(c => c.Prev))
                        {
                            <li class="prev"><a style="cursor: pointer" @t.BindPreviousPage("click")><span class="glyphicon glyphicon-chevron-left"></span></a></li>
                        }
                        using (pg.If(c => c.Period))
                        {
                            <li><span>. . .</span></li>
                        }
                        using (pg.If(c => c.ActivePage))
                        {
                            <li class="active"><span>@pg.Value(c => c.DisPage)</span></li>
                        }
                        using (pg.If(c => c.InActivePage))
                        {
                            <li><a @pg.BindNavigateToPage("click") style="cursor: pointer">@pg.Value(c => c.DisPage)</a></li>
                        }
                        using (pg.If(c => c.Next))
                        {
                            <li class="next"><a style="cursor: pointer" @t.BindNextPage("click")><span class="glyphicon glyphicon-chevron-right"></span></a></li>
                        }
                        using (pg.If(c => c.Last))
                        {
                            <li class="last"><a style="cursor: pointer" @pg.BindNavigateToPage("click")><span class="glyphicon glyphicon-fast-forward"></span></a></li>
                        }
                    }
                </ul>
            }
        </div>
    }
}

@using (var t = Plugin.ValueFilter())
{
    <strong>@t.Value(c => c.AssociatedColumn.Configuration.Title) :</strong>
    <br />
    <br />
    <input type="text" @t.DatepickerCanBeHere() @t.BindValueChanged("keyup,input,change,paste") @t.ThisIsFilterValueProvider() style="margin: 0; width: 100%; max-width: 100%;" class="form-control input-md" value="@t.Value(c => c.Configuration.DefaultValue)" placeholder="@t.Value(c => c.Configuration.Placeholder)" />
    <hr />
}

@using (var t = Plugin.RangeFilter())
{
    <strong>@t.Value(c => c.AssociatedColumn.Configuration.Title) :</strong>
    <br />
    <br />
    <input type="text" @t.DatepickerCanBeHere() @t.ThisIsFromField() @t.BindValueChanged("keyup,input,change,paste") class="form-control input-md" value="@t.Value(c=>c.Configuration.FromValue)" style="margin:0;width:100%;max-width:100%;" placeholder="@t.Value(c=>c.Configuration.FromPlaceholder)">
    <br />
    <input type="text" @t.DatepickerCanBeHere() @t.ThisIsToField() @t.BindValueChanged("keyup,input,change,paste") class="form-control input-md" value="@t.Value(c => c.Configuration.ToValue)" style="margin: 0; width: 100%; max-width: 100%;" placeholder="@t.Value(c => c.Configuration.ToPlaceholder)">
    <hr />
}

@using (var t = Plugin.SelectFilter())
{
    <strong>@t.Value(c => c.AssociatedColumn.Configuration.Title) :</strong>
    <br />
    <br />
    <select class="form-control input-md" style="margin: 0; width: 100%; max-width: 100%;" @t.ThisIsFilterValueProvider() @t.BindValueChanged("change") @t.If(c => c.Configuration.IsMultiple, "multiple=\"multiple\"")>
        @using (var item = t.Each(c => c.Configuration.Items))
        {
            <option @item.If(c => c.Disabled, "disabled=\"disabled\"") value="@item.Value(c => c.Value)" @item.If(c => c.Selected, "selected")>@item.Value(c => c.Text)</option>
        }
    </select>
    <hr />
}

@using (var t = Plugin.HideoutMenu())
{
    <div class="btn-group" role="group">
        <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
            Show/Hide Columns
            <span class="caret"></span>
        </button>
        <ul class="dropdown-menu">
            @using (var itm = t.Each(c => c.ColumnStates))
            {
                using (itm.If(c => c.Visible))
                {
                    <li @itm.BindHide("click")>
                        <a style="cursor: pointer;">
                            <span class="glyphicon glyphicon-eye-open" style="float: left"></span> <span style="margin-left: 10px">@itm.Value(c => c.Name)</span>
                        </a>
                    </li>
                }
                using (itm.Unless(c => c.Visible))
                {
                    <li @itm.BindShow("click")>
                        <a style="cursor: pointer;">
                            <span class="glyphicon glyphicon-eye-close" style="float: left"></span> <span style="margin-left: 10px;">@itm.Value(c => c.Name)</span>
                        </a>
                    </li>
                }
            }
        </ul>

    </div>
}

@using (var t = Plugin.ResponseInfo())
{
    <p>
        @using (t.If(c => c.IsLocalRequest))
        {
            <br />
        <p>Data fetched locally.</p>
        }
        Currently shown <strong>@t.Value(c => c.CurrentlyShown)</strong> of <strong>@t.Value(c => c.TotalCount)</strong> records
        <br />
        @using (t.If(c => c.PagingEnabled))
        {
            <p>
                Page <strong>@t.Value(c => c.CurrentPage)</strong> of @t.Value(c => c.TotalPages)
            </p>
        }
        </p>
}

@using (var t = Plugin.CheckboxifySelectAll())
{
    <div>
        @using (t.If(c => c.CanSelectAll))
        {
            using (t.If(c => c.IsAllSelected))
            {
                <a href="#" @t.BindSelectAll("click")>Deselect all</a>
                @t.Else()
    <a href="#" @t.BindSelectAll("click")>Select all</a>
            }
        }
    </div>
}

@using (var t = Plugin.CheckboxifyCell())
{
    using (t.If(c => c.CanCheck))
    {
        <div class="btn-group">
            @using (t.If(c => c.IsChecked))
            {
                <button @t.ThisWillTriggerSelection() type="button" class="btn btn-success btn-sm" style="color:orange">
                    <span class="glyphicon glyphicon-star"></span>
                </button>
                @t.Else()
                <button @t.ThisWillTriggerSelection() type="button" class="btn btn-default btn-sm">
                    <span class="glyphicon glyphicon-star"></span>
                </button>

            }
        </div>
    }
}


@using (var t = Plugin.CheckboxifyRow())
{
    <div class="col-md-3" style="margin-bottom: 10px">
        <div class="thumbnail" style="background: aliceblue;">
            <img src="http://www.toysrus.com/graphics/product_images/pTRU1-20603499enh-z6.jpg" alt="">
            <div class="btn-toolbar inside-tools" role="toolbar">
                @t.Content("_checkboxify")
            </div>
            <div class="caption">
                <h3 style="width: 160px; display: inline-block; overflow: hidden;">@t.Content("Name")</h3>
                <h4 style="width: 60px; display: inline-block; overflow: hidden; float: right;">@t.Content("Price")</h4>
            </div>
            <p>
                @t.Content("SupplierAddress")
            </p>
        </div>
    </div>
}

@using (var t = Plugin.Toolbar())
{
    <div class="btn-group">
        @using (var btn = t.Buttons())
        {
            using (btn.Unless(c => c.HasSubmenu))
            {
                using (btn.If(c => c.IsDisabled))
                {
                    <button disabled="disabled" type="button" data-role="toolbar-btn" class="btn btn-sm btn-default @btn.Value(c => c.Css) disabled" title="@btn.Value(c => c.Title)" id="@btn.Value(c => c.Id)">@btn.HtmlValue(c => c.HtmlContent)</button>
                    @btn.Else()
    <button @btn.BindButton("click") type="button" data-role="toolbar-btn" class="btn btn-sm btn-default @btn.Value(c => c.Css)" title="@btn.Value(c => c.Title)" id="@btn.Value(c => c.Id)">@btn.HtmlValue(c => c.HtmlContent)</button>
                }

                @btn.Else()
                <div class="btn-group">
                    @btn.If(c => c.IsMenu, "<div class=\"btn-group\" role=\"group\">")
                    @using (btn.If(c => c.IsMenu))
                    {
                        <button type="button" id="@btn.Value(c => c.Id)" class="btn btn-sm @btn.Value(c => c.Css) dropdown-toggle" title="@btn.Value(c => c.Title)" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            @btn.HtmlValue(c => c.HtmlContent)
                            <span class="caret"></span>
                        </button>
                        @btn.Else()
                        using (btn.If(c => c.IsDisabled))
                        {
                            <button disabled="disabled" type="button" id="@btn.Value(c => c.Id)" class="btn btn-sm @btn.Value(c => c.Css) disabled" title="@btn.Value(c => c.Title)">@btn.HtmlValue(c => c.HtmlContent)</button>
                            @btn.Else()
    <button @btn.BindButton("click") type="button" id="@btn.Value(c => c.Id)" class="btn btn-sm @btn.Value(c => c.Css)" title="@btn.Value(c => c.Title)">@btn.HtmlValue(c => c.HtmlContent)</button>
                        }
                        <button type="button" class="btn btn-sm @btn.Value(c=>c.Css) dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <span class="caret"></span>
                            <span class="sr-only">Toggle Dropdown</span>
                        </button>
                    }
                    <ul class="dropdown-menu">
                        @using (var sm = btn.Each(c => c.Submenu))
                        {
                            using (sm.If(c => c.Separator))
                            {
                                <li role="separator" class="divider"></li>
                                @sm.Else()
                                using (btn.If(c => c.IsDisabled))
                                {
                                    <li aria-disabled="true" style="cursor: pointer" class="@sm.Value(c => c.Css) disabled" id="@sm.Value(c => c.Id)"><a title="@sm.Value(c => c.Title)">@sm.HtmlValue(c => c.HtmlContent)</a></li>
                                    @btn.Else()
                                    <li @btn.BindButton("click") style="cursor: pointer" class="@sm.Value(c => c.Css)" id="@sm.Value(c => c.Id)"><a title="@sm.Value(c => c.Title)">@sm.HtmlValue(c => c.HtmlContent)</a></li>
                                }
                            }
                        }
                    </ul>
                    @btn.If(c => c.IsMenu, "</div>")
                </div>
            }
        }
    </div>
}

@using (var t = Plugin.LoadingOverlap())
{
    <div style="background-color: white;opacity: 0.5">
        <div style="top: 45%; position: relative;" class="text-center">
            <h1>Loading</h1>
        </div>
    </div>
}

@using (var t = Plugin.Reload())
{
    <button class="btn btn-primary" @t.WhenLoading(c => c.Disabled()) @t.BindTriggerReload("click")>Refresh</button>
}

@using (var t = Plugin.Editor_PlainText())
{
    <div style="position: relative" @t.BindReject("out-click")>
        <div>
            @t.OriginalContent()
        </div>
        <div class="popover fade top in" role="tooltip" style="top: -88px; left: -50px; display: block; position: absolute;">
            <div class="arrow" style="top: 100%;"></div>
            <h3 class="popover-title">
                @t.Value(c => c.Column.Configuration.Title)
                <button type="button" class="close" @t.BindReject("click")><span aria-hidden="true">×</span></button>
            </h3>
            <div class="popover-content">
                <input type="text"
                       class="form-control input-md"
                       style="min-width: 200px;" aria-label="..."
                       @t.WhenSaving(c => c.Hide())
                       @t.ThisIsInput()
                       @t.BindChanged("keyup")
                       @t.BindCommit(DOMEvent.Filter("keyup").Prop(13, "keyCode", "which"))
                       @t.WhenInvalid(c => c.State.Color("red").Style("border-color", "red")) />
                <span class="text-center" style="display: none;min-width: 200px; min-height: 28px;margin-top: 5px;" @t.WhenSaving(c => c.Show())>
                    <span class="badge"><span class="glyphicon glyphicon-refresh loader"></span> Saving...</span>
                </span>
            </div>
        </div>
    </div>
}

@using (var t = Plugin.Editor_ValidationMessages())
{
    <p style="margin-bottom: 0">
        @using (var m = t.Each(c => c.Messages))
        {
            <span>@m.Value(c => c.Message)</span>
        }
    </p>
}

@using (var t = Plugin.Editor_PlainText("plainTextEditorAlternate"))
{
    <div @t.BindReject(DOMEvent.Filter("click").Out().Prop(true, "ctrlKey"))>
        <div class="input-group" @t.WhenInvalid(c => c.State.AddClass("has-error")) style="max-width: 200px;" @t.WhenSaving(c => c.Hide())>
            <input @t.ThisIsInput() @t.BindChanged("keyup") @t.BindCommit(DOMEvent.Filter("keyup").Prop(13, "keyCode", "which")) type="text" @t.WhenInvalid(c => c.State.Color("red")) class="form-control input-sm" aria-label="..." style="height: 28px; margin-top: -10px; margin-bottom: -10px" />
            <div class="tooltip bottom" role="tooltip" style="opacity: 1; top: 21px;display: none;"
                 @t.WhenInvalid(c => c.State.Show())>
                <div class="tooltip-arrow" style="border-bottom-color: #E15C5C;left:15%"></div>

                <div class="tooltip-inner" style="max-width: 400px; background-color: #E15C5C;" @t.WhenInvalid(c => c.Content(v => v.ValidationMessages))></div>
            </div>
            <div class="input-group-btn">
                <button style="margin: -4px 0px; padding: 4px 10px;" type="button" class="btn btn-default btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <span class="caret"></span>
                </button>
                <ul class="dropdown-menu dropdown-menu-right">
                    <li @t.WhenInvalid(c => c.State.Disabled().AddClass("disabled"))><a style="cursor: pointer;" @t.BindCommit("click")><span class="glyphicon glyphicon-floppy-disk"></span> Save</a></li>
                    <li role="separator" class="divider"></li>
                    <li><a style="cursor: pointer;" @t.BindReject("click")><span class="glyphicon glyphicon-remove"></span> Cancel</a></li>
                </ul>
            </div>
        </div>

        <span class="text-center" style="display: none" @t.WhenSaving(c => c.Show())>
            <span class="badge"><span class="glyphicon glyphicon-refresh"></span> Saving...</span>
        </span>
    </div>
}

@using (var t = Plugin.Editor_SelectList())
{
    <div style="position: relative" @t.BindReject("out-click")>
        <div>
            @t.OriginalContent()
        </div>
        <div class="popover fade top in" role="tooltip" style="top: -88px; left: -50px; display: block; position: absolute;">
            <div class="arrow" style="top: 100%;"></div>
            <h3 class="popover-title">
                @t.Value(c => c.Column.Configuration.Title)
                <button type="button" class="close" @t.BindReject("click")><span aria-hidden="true">×</span></button>
            </h3>
            <div class="popover-content">
                <select @t.WhenSaving(c => c.Hide())
                        @t.WhenInvalid(c => c.State.Style("background-color", "#FFF7F7"))
                        class="form-control input-md"
                        style="min-width: 150px;"
                        @t.ThisIsList()
                        @t.BindChanged("change")
                        @t.BindCommit("change")>
                    @using (var itm = t.Each(c => c.Items))
                    {
                        <option value="@itm.Value(c => c.Value)">@itm.Value(c => c.Text)</option>
                    }
                </select>
                <span class="text-center" style="display: none;min-width: 150px; min-height: 28px;margin-top: 5px;" @t.WhenSaving(c => c.Show())>
                    <span class="badge"><span class="glyphicon glyphicon-refresh loader"></span> Saving...</span>
                </span>
            </div>
        </div>
    </div>
}

@using (var t = Plugin.Editor_Memo())
{
    <div style="position: relative" @t.BindReject("out-click")>
        <div>
            @t.OriginalContent()
        </div>
        <div class="popover fade top in" role="tooltip"
             style="top: -160px; left: -50px; display: block; position: absolute; width: 300px;"
             @t.WhenSaving(c => c.Style("top", "-86px"))>
            <div class="arrow" style="top: 100%;"></div>
            <h3 class="popover-title">
                @t.Value(c => c.Column.Configuration.Title)
                <button type="button" class="close" @t.BindReject("click")><span aria-hidden="true">×</span></button>
            </h3>
            <div class="popover-content">
                <div class="col-md-12" @t.WhenSaving(c => c.Hide())>
                    <textarea class="form-control"
                              style="width: 100%;height:70px"
                              @t.ThisIsInput()
                              @t.BindChanged("change")
                              @t.WhenInvalid(c => c.State.Style("background-color", "#FFF7F7"))
                              rows="@t.Value(c => c.Rows)"
                              cols="@t.Value(c => c.Columns)"></textarea>
                </div>
                <br />
                <div class="col-md-12" @t.WhenSaving(c => c.Hide())>
                    <button class="btn btn-default btn-xs btn-block" @t.BindCommit("click") @t.WhenInvalid(c => c.State.Disabled())>Save</button>
                </div>
                <span class="text-center" style="display: none;min-width: 150px; min-height: 28px;margin-top: -15px;" @t.WhenSaving(c => c.Show())>
                    <span class="badge"><span class="glyphicon glyphicon-refresh loader"></span> Saving...</span>
                </span>
            </div>
        </div>
    </div>
}

@using (var t = Plugin.Editor_Check())
{
    <div style="position: relative" @t.BindReject("out-click")>
        <div>
            @t.OriginalContent()
        </div>
        <div class="popover fade top in" role="tooltip"
             style="top: -101px; left: -74px; display: block; position: absolute; width: 300px;"
             @t.WhenSaving(c => c.Style("top", "-86px"))>
            <div class="arrow" style="top: 100%;"></div>
            <h3 class="popover-title">
                @t.Value(c => c.Column.Configuration.Title)
                <button type="button" class="close" @t.BindReject("click")><span aria-hidden="true">×</span></button>
            </h3>
            <div class="popover-content">
                <div class="col-md-12" @t.WhenSaving(c => c.Hide())>
                    <div class="checkbox">
                        <label style="padding-left: 10px; line-height: 2; font-size: 16px;">
                            <input type="checkbox" @t.BindChanged("change") @t.BindCommit("change") style="width: 20px; height: 20px; cursor: pointer"
                                   @t.WhenChecked(c => c.Attr("checked", "checked")) />
                            @t.Value(c => c.Column.Configuration.Title) -
                            @t.Value(c => c.DataObject["Name"])
                        </label>
                    </div>

                </div>
                <span class="text-center" style="display: none;min-width: 150px; min-height: 48px;margin-top: -15px;" @t.WhenSaving(c => c.Show())>
                    <span class="badge" style="margin-top: 20px"><span class="glyphicon glyphicon-refresh loader"></span> Saving...</span>
                </span>
            </div>
        </div>
    </div>
}